%!PS-Adobe-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: montage.dvi
%%CreationDate: Thu Sep 13 22:53:24 2018
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 1134 284
%%DocumentFonts: CMR10
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips montage.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2018.09.14:0053
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 698 2017-12-30 19:08:50Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.28, 2017/12/30
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.01 2012/09/21
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 } 
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: pst-func.pro 0 0
%% $Id: pst-func.pro 918 2014-05-19 12:32:37Z herbert $
%%
%% This is file `pst-func.pro',
%%
%% IMPORTANT NOTICE:
%%
%% Package `pst-func'
%%
%% Herbert Voss <hvoss@tug.org>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% DESCRIPTION:
%%   `pst-func' is a PSTricks package to plot special math functions
%%
%%
%% version 0.16 / 2014-05-07  Herbert Voss
%
/tx@FuncDict 100 dict def
tx@FuncDict begin
%
/eps1 1.0e-05 def
/eps2 1.0e-04 def
/eps8 1.0e-08 def
%
/PiHalf 1.57079632679489661925640 def
/CEuler 0.5772156649 def % Euler-Mascheroni constant
%
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/Pascal [
  [                   1                   ] % 0
  [                 1   1                 ] % 1
  [               1   2   1               ] % 2
  [             1   3   3   1             ] % 3
  [           1   4   6   4   1           ] % 4
  [         1   5  10  10   5   1         ] % 5
  [       1   6  15  20  15   6   1       ] % 6
  [     1   7  21  35  35  21   7   1     ] % 7
  [   1   8  28  56  70  56  28  8    1   ] % 8
  [ 1   9  36  84 126 126  84  36  9    1 ] % 9
] def
%
/GetBezierCoor { 				% t on stack
  10 dict begin					% hold all local
  /t ED
  /t1 1 t sub def				% t1=1-t
  /Coeff Pascal BezierType get def		% get the coefficients
    0 0						% initial values for x y
    BezierType -1 0 {				% BezierType,...,2,1,0
      /I ED					% I=BezierType,...,2,1,0
      /J BezierType I sub def			% J=0,1,2,...,BezierType
      /T t I exp Coeff J get mul def		% coeff(J)*t^I
      /T1 t1 J exp def				% t1^J  
      Points I dup add 1 add get		% y(2*I+1)
      T mul T1 mul add				% the y coordinate
      exch					% y x	
      Points I dup add get			% x(2*I)
      T mul T1 mul add				% the x coordinate
      exch					% x y	
    } for					% x y on stack
  end
} def

/BezierCurve { % on stack [ coors psk@plotpoints BezierType
%  10 dict begin
  /BezierType ED                        % 2,3,4,5,6,...
  1 exch div /epsilon ED                % step for Bezier =1/plotpoints
  ]                                     % [ yi xi ... y3 x3 y2 x2 y1 x1 y0 x0]
  ps@ReverseOrderOfPoints               % [y0 x0 y1 x1 ... yi xi]
  /Points ED 				% save Points array
  epsilon GetBezierCoor 		% next Bezier point
  Points 0 get Points 1 get 		% starting point
  ArrowA lineto 
  epsilon epsilon 1 epsilon sub { % on stack is the loop variable
    GetBezierCoor lineto 
  } for 
  1 epsilon sub GetBezierCoor  
  1 GetBezierCoor  
  ArrowB lineto moveto
%  end
} def

/Bernstein { % on stack tStart tEnd plotpoints i n
  12 dict begin				% hold all local
  /envelope ED				% plot envelope?
  /n ED 
  /i ED
  /ni n i sub def  
  /epsilon ED				% step=1/plotpoints
  /tEnd ED
  /tStart ED
%
% B_{i,n}(t)=\binom{n}{i}t^i(1-t)^{n-i}      (Bernstein)
% f_n(x)=\frac{1}{\sqrt{\pi n\cdot x(1-x)}}  (envelope)
%
  n i MoverN /noveri ED			% \binom{n}{i}
  [					% for the array of points
  tStart epsilon tEnd {
    dup dup /t ED			% leave one on stack
    neg 1 add /t1 ED			% t1=1-t
    envelope 
      { t t1 mul 4 mul PiHalf mul n mul sqrt 1 exch Div }	% envelope
      { noveri t i exp mul t1 ni exp mul } ifelse 	% t f(t)
    ScreenCoor				% convert to screen coor
  } for
  end
  false /Lineto /lineto load def Line
} def
%
/Si { % integral sin from 0 to x (arg on stack)
  /arg exch def
  /Sum arg def
  /sign -1 def
  /index 3 def
  { 
    arg index exp index div index factorial div sign mul 
    dup abs eps8 lt { pop exit } if 
    Sum add /Sum exch def
    /sign sign neg def
    /index index 2 add def
  } loop
  Sum
} def
/si { % integral sin from x to infty -> si(x)=Si(x)-pi/2
  Si PiHalf sub
} def
/Ci { % integral cosin from x to infty (arg on stack)
  abs /arg exch def
  arg 0 eq { 0 } { 
    /argExp 1 def
    /fact 1 def
    /Sum CEuler arg ln add def
    /sign -1 def
    /index 2 def
    { 
      /argExp argExp arg arg mul mul def
      /fact fact index 1 sub index mul mul def
      argExp index div fact div sign mul 
      dup abs exch Sum add /Sum exch def
      eps8 lt { exit } if
      /sign sign neg def
      /index index 2 add def
    } loop
    Sum
  } ifelse
} def
/ci { % integral cosin from x to infty -> ci(x)=-Ci(x)+ln(x)+CEuler
  dup Ci neg exch abs ln add CEuler add
} def
%
/MaxIter 255 def
/func { coeff Derivation FuncValue } def
/func' { coeff Derivation 1 add FuncValue } def
/func'' { coeff Derivation 2 add FuncValue } def
%
/NewtonMehrfach {% the start value must be on top of the stack
  /Nx exch def 
  /Iter 0 def
  {
    /Iter Iter 1 add def
    Nx func /F exch def % f(Nx)
    F abs eps2 lt { exit } if
    Nx func' /FS exch def % f'(Nx) 
    FS 0 eq { /FS 1.0e-06 def } if
    Nx func'' /F2S exch def % f''(Nx)
    1.0 1.0 F F2S mul FS dup mul div sub div /J exch def
    J F mul FS div /Diff exch def 
    /Nx Nx Diff sub def
    Diff abs eps1 lt Iter MaxIter gt or { exit } if 
  } loop 
  Nx % the returned value ist the zero point
} def

/Steffensen {% the start value must be on top of the stack
  /y0 exch def % the start value
  /Iter 0 def   /MaxIter 200 def
  { pstack
    y0 func /F exch def
    F abs eps2 lt { exit } if
    y0 F sub /Phi exch def
    Phi func /F2 exch def
    F2 abs eps2 le { exit }{
      Phi y0 sub dup mul Phi F2 sub 2 Phi mul sub y0 add Div /Diff exch def
      y0 Diff sub /y0 exch def
      Diff abs eps1 le { exit } if
    } ifelse
    /Iter Iter 1 add def
    Iter MaxIter gt { exit } if
  } loop
  y0 28 mul % the returned value ist the zero point
  0  
  3 0 360 arc gsave 0 0 1 setrgbcolor fill grestore 1 setlinewidth stroke
} def 
%
/Horner {% x [coeff] must be on top of the stack
  aload length
  dup 2 add -1 roll
  exch 1 sub {
    dup 4 1 roll
    mul add exch
  } repeat
  pop % the y value is on top of the stack
} def
%
/FuncValue {% x [coeff] Derivation must be on top of the stack
  {
    aload 			% a0 a1 a2 ... a(n-1) [array]
    length                      % a0 a1 a2 ... a(n-1) n
    1 sub /grad exch def        % a0 a1 a2 ... a(n-1) 
    grad -1 1 {                 % for n=grad step -1 until 1
      /n exch def               % Laufvariable speichern
      n                         % a0 a1 a2 ... a(n-1) n
      mul                       % a0 a1 a2 ... a(n-1)*n 
      grad 1 add                % a0 a1 a2 ... a(n-1)*n grad+1 
      1 roll                    % an*na0 a1 a2 ... a(n-2)
    } for
    pop                         % loesche a0
    grad array astore           % [ a1 a2 ... a(n-2)]
  } repeat
  Horner
} def
%
/FindZeros { % dxN dxZ must be on top of the stack (x0..x1 the intervall) => []
  12 dict begin 
  /dxZ exch def /dxN exch def
  /pstZeros [] def 
  x0 dxZ x1 { % suche Nullstellen
    /xWert exch def
    xWert NewtonMehrfach 
    %xWert Steffensen 
    /xNull exch def 
    pstZeros aload length /Laenge exch def % now test if value is a new one
    Laenge 0 eq 
      { xNull 1 }
      { /newZero true def
        Laenge {
	  xNull sub abs dxN lt { /newZero false def } if
        } repeat
	pstZeros aload pop
        newZero { xNull Laenge 1 add } { Laenge } ifelse } ifelse
    array astore 
    /pstZeros exch def
  } for
  pstZeros  % the end array is now on the stack
  end
} def
%
/Simpson { % on stack must be a b M   --- simple version ---
% /SFunc must be defined 
  /M ED /b ED /a ED
  /h b a sub M 2 mul div def
  /s1 0 def
  /s2 0 def
  1 1 M {
    /k exch def
    /x k 2 mul 1 sub h mul a add def
    /s1 s1 x SFunc add def
  } for
  1 1 M 1 sub {
    /k exch def
    /x k 2 mul h mul a add def
    /s2 s2 x SFunc add def
  } for
  /I a SFunc b SFunc add s1 4 mul add s2 2 mul add 3 div h mul def
} def
%
/LogGamma { 5 dict begin	% z on stack
  /z ED
  /sum 0 def
  /k 1 def
  {
    z k div dup 1 add ln sub dup
    abs eps8 lt { pop exit } if
    sum add /sum exch def
    /k k 1 add def
  } loop
  sum z ln sub CEuler z mul sub
  end 
} def
%
/ChebyshevT { 5 dict begin	% z on stack
  /xtmp exch def
  /n exch def
  0 0 1 n .5 mul floor {
     /k exch def
     xtmp xtmp mul 1 sub k exp
     xtmp n 2 k mul sub exp mul
     n 2 k mul MoverN mul
     add
  } for
  end
} def
%
/ChebyshevU {5 dict begin	% z on stack
  /xtmp exch def
  /n exch def
  0 0 1 n .5 mul floor {
    /k exch def
    xtmp xtmp mul 1 sub k exp
    xtmp n 2 k mul sub exp mul
    n 1 add 2 k mul 1 add MoverN mul
    add
  } for
  end
} def
%
/vasicek{           %density=sqrt((1-R2)/R2)*exp(1/2*(norminv(x)2 - (1/sqrt(R2)*((sqrt(1-R2)*norminv(x)-norminv(pd)))2))
  2 dict begin
  /pd where { pop }{ /pd 0.22 def } ifelse    % element of (0,1) probability of default of portfolio  
  /R2 where { pop }{ /R2 0.11 def } ifelse    % element of (0,1) R_Squared of portfolio
  dup                 % x   x
  norminv             % x   norminv(x)
  dup mul             % x   norminv(x)^2
  exch                % norminv(x)2   x
  norminv             % norminv(x)2   norminv(x)
  1 R2 sub sqrt mul   % norminv(x)2   sqrt(1-R2)*norminv(x)
  pd norminv sub      % norminv(x)2   sqrt(1-R2)*norminv(x)-norminv(pd)
  R2 sqrt div         % norminv(x)2   1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd))
  dup mul             % norminv(x)2  (1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2
  sub                 % norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2
  2 div               % 1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)
  ENeperian exch exp  % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)
  1 R2 sub            % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)   1-R2
  R2 div              % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)   (1-R2)/R2
  sqrt                % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)   sqrt((1-R2)/R2)
  mul                 % sqrt((1-R2)/R2)*exp(1/2*(norminv(x)2 - (1/sqrt(R2)*((sqrt(1-R2)*norminv(x)-norminv(pd)))2))
  end
} def
%end{vasicek density}
%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def
%
end

%%EndProcSet
%%BeginProcSet: pst-intersect.pro 0 0
%%
%% This is file `pst-intersect.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% pst-intersect.dtx  (with options: `prolog')
%% 
%% This is a generated file.
%% 
%% Project: pst-intersect
%% Version: 0.4 (2014/03/16)
%% 
%% Copyright (C) 2007-2014 by Christoph Bersch <usenet@bersch.net>
%% 
%% This work may be distributed and/or modified under the
%% conditions of the LaTeX Project Public License, either version 1.3c
%% of this license or (at your option) any later version.
%% The latest version of this license is in
%%   http://www.latex-project.org/lppl.txt
%% and version 1.3c or later is part of all distributions of LaTeX
%% version 2008/05/04 or later.
%% 
%% This work has the LPPL maintenance status "maintained".
%% 
%% The current maintainer of this work is Christoph Bersch.
%% 
%% This work consists of the files pst-intersect.dtx and pst-intersect.ins
%% and the derived files
%%     pst-intersect.sty, pst-intersect.tex, pst-intersect.pro.
%% 
/tx@IntersectDict 200 dict def
tx@IntersectDict begin
/VecAdd {
    3 -1 roll add 3 1 roll add exch
} bind def
/VecSub {
    neg 3 -1 roll add 3 1 roll neg add exch
} bind def
/VecScale {
  dup 4 -1 roll mul 3 1 roll mul
} bind def
/ToPnt {
    [ 3 1 roll ]
} bind def
/MaxPrecision 1e-6 def
/Epsilon 1e-4 def
/MinClippedSizeThreshold 0.8 def
/H1Interval [0 0.5] def
/H2Interval [0.5 MaxPrecision add 1] def
/IntersectBeziers {
  2 copy length 2 eq exch length 2 eq and {
    IntersectLineSegms
  }{
    2 copy [0 1] [0 1] IterateIntersection
  } ifelse
  3 -1 roll exch
} bind def
/IntersectLines {
  (IntersectLines) DebugBegin
  2 copy
  exch { aload pop } forall 5 -1 roll { aload pop } forall
  8 -2 roll 2 copy 10 4 roll 4 2 roll 2 copy 6 2 roll 10 2 roll
  VecSub
  6 2 roll 4 2 roll VecSub
  8 4 roll 4 2 roll VecSub
  6 copy 12 -4 roll
  neg 4 -1 roll mul 3 1 roll mul add
  dup 0 eq {
    9 { pop } repeat [] []
  } {
    dup 10 1 roll 5 1 roll
     4 -1 roll mul 3 1 roll mul sub exch div
     6 1 roll 4 -1 roll mul 3 1 roll mul sub exch div
     [ exch ] exch [ exch ]
   } ifelse
  DebugEnd
} bind def
/IntersectLineSegms {
  IntersectLines
  dup length 0 eq not {
    0 get exch 0 get
    2 copy 2 copy 0 ge exch 0 ge and 3 1 roll 1 le exch 1 le and and {
      [ exch ] exch [ exch ]
    } {
      pop pop [] []
    } ifelse
  } if
} bind def
/IntersectLineLineSegm {
  tx@IntersectDict begin IntersectLines end
  dup length 0 eq not {
    0 get dup dup 0 ge exch 1 le and {
      [ exch ]
    } {
      pop pop [] []
    } ifelse
  } if
  3 -1 roll exch
} bind def
/IntersectLinePath {
  (IntersectLinePath) DebugBegin
  3 dict begin
    PreparePath
    2 copy ElongateLine exch 3 -1 roll pop
    /isect [] def
    /t -1 def
    /n -1 def
    {
      /n n 1 add def
      2 copy IntersectBeziers
      dup 5 1 roll LoadIntersectionPoints
      dup length 0 gt {
        /isect exch def
        0 get aload pop add 0.5 mul n add /t exch def
        exch pop
        exit
      } {
        pop pop pop
      } ifelse
    } forall
    t isect
  end
  DebugEnd
} bind def
/ElongateLine {
  exch { aload pop } forall
  4 2 roll 2 copy 6 2 roll
  VecSub 0 5 1 roll
  6 -1 roll {
    {
      aload pop
      6 2 roll 4 copy 10 4 roll
      6 2 roll VecSub 4 2 roll
      tx@EcldDict begin Project end
      tx@Dict begin Pyth end
      6 -1 roll 2 copy
      gt { pop } { exch pop } ifelse
      5 1 roll
    } forall
  } forall
  % for a line
  5 -1 roll VecScale 4 copy VecSub ToPnt 5 1 roll VecAdd ToPnt ToPnt
  % for a ray
  %4 2 roll 2 copy ToPnt 6 1 roll 4 2 roll 5 -1 roll 1.1 mul VecScale VecAdd ToPnt ToPnt
} bind def
/IntersectPaths {
  (IntersectPaths) DebugBegin
  6 dict begin
    2 copy exch PreparePath dup length /nA exch def
    exch PreparePath dup length /nB exch def
    /isect [] def
    /tA [] def /tB [] def
    { % [pathA] [Bi]
      /nB nB 1 sub def
      exch dup 3 1 roll % [pathA] [Bi] [pathA]
      {
        /nA nA 1 sub def
        exch dup 3 1 roll % [pathA] [Bi] [Aj] [Bi]
        IntersectBeziers % [curveA] [tA] [curveB] [tB]
        4 copy LoadIntersectionPoints
        [ exch isect aload pop ] /isect exch def
        exch pop 3 -1 roll pop
        [ tB aload length 2 add -1 roll TArray { nB add } forall ] /tB exch def
        [ tA aload length 2 add -1 roll TArray { nA add } forall ] /tA exch def
      } forall
      pop % remove [Bi]
      dup length /nA exch def
    } forall
    pop % remove [pathA]
    [ isect { aload pop } forall ] 3 1 roll tA exch tB
  end
  DebugEnd
} bind def
/IntersectCurvePath {
  (IntersectCurvePath) DebugBegin
  6 dict begin
    2 copy PreparePath dup length /n exch def
    /isect [] def
    /tA [] def /tB [] def
    {
      /n n 1 sub def
      exch dup 3 -1 roll
      IntersectBeziers
      4 copy LoadIntersectionPoints
      [ exch isect aload pop ] /isect exch def
      pop 3 -1 roll pop
      [ tB aload length 2 add -1 roll TArray { n add } forall ] /tB exch def
      [ tA aload length 2 add -1 roll TArray aload pop ] /tA exch def
    } forall
    pop
    [ isect { aload pop } forall ] 3 1 roll tA exch tB
  end
  DebugEnd
} bind def
/IntersectPathCurve {
  exch IntersectCurvePath 4 2 roll
} bind def
/MergeAndSortArrays {
  [ 3 1 roll aload pop counttomark -1 roll aload pop ]
  dup length 0 gt {
    dup dup 0 get type /arraytype eq {
      hulldict /comp get
    } {
      /lt
    } ifelse
    exch quicksort
  } if
} bind def
/SaveIntersection {
  (SaveIntersection) DebugBegin
  exch dup 3 1 roll % isectname add? isectname
  currentdict exch known and {
    load begin % pnts A tA B tB /A /B
      dup currentdict exch known { % /nameB already saved.
        4 -1 roll pop % pnts A tA tB /A /B
        nametostr (@t) strcat cvn dup load 4 -1 roll
        MergeAndSortArrays def
      } {
        dup 5 -1 roll def % pnts A tA B tB /A /B
        nametostr (@t) strcat cvn 3 -1 roll TArray def
      } ifelse % pnts A tA /A
      dup currentdict exch known { % /nameB already saved.
        3 -1 roll pop
        nametostr (@t) strcat cvn dup load 3 -1 roll
        MergeAndSortArrays def
      } {
        dup 4 -1 roll def
        nametostr (@t) strcat cvn exch TArray def
      } ifelse
      /Points exch ArrayToPointArray Points ArrayToPointArray
      MergeAndSortArrays PointArrayToArray def
    end
  } {
    4 dict dup 3 1 roll def
    begin
      dup 5 -1 roll def
      nametostr (@t) strcat cvn 3 -1 roll TArray def
      dup 4 -1 roll def
      nametostr (@t) strcat cvn exch TArray def
      /Points exch def
    end
  } ifelse
  DebugEnd
} bind def
/TArray {
  dup length 0 gt {
    dup 0 get type /arraytype eq {
      [ exch
      { %dup type /nulltype eq { pop exit } if
   aload pop add 0.5 mul
      } forall ]
    } if
    dup /lt exch quicksort
  } if
} bind def
/InitTracing {
  /movetype /moveto load def
  /linetype /lineto load def
  /curvetype /curveto load def
} bind def
/GetFullPath {
  (GetFullPath) DebugBegin
  { /movetype counttomark 3 roll }
  { /linetype counttomark 3 roll }
  { /curvetype counttomark 7 roll }{} pathforall
  DebugEnd
} bind def
/ReversePath {
  gsave newpath
    [ exch aload pop InitTracing
    { counttomark 0 eq { exit } if
      load exec
    } loop
    reversepath
    GetFullPath ]
  grestore
} bind def
/ReverseCurve {
  PointArrayToArray aload pop % [ tstart tstop [ X0 Y0 X1 Y1...
  counttomark -2 4 { 2 roll } for ] ArrayToPointArray
} bind def
/ReverseInterval {
  3 -1 roll dup 4 1 roll GetSegmentCount
  dup 4 1 roll exch sub 3 1 roll sub exch
} bind def
/UnifyInterval {
  exch dup 0 lt { pop 0 } if exch
  3 -1 roll dup 4 1 roll GetSegmentCount
  2 copy exch dup 3 1 roll % [curve] tstart tstop cnt tstop cnt tstop
  lt exch 0 lt or { exch } if pop % (tstop < 0 | cnt < tstop)
} bind def
/PreparePath {
  (PreparePath) DebugBegin
  [ exch aload pop
  {
    dup type /nametype eq not { exit } if
    dup /movetype eq {
      pop ToPnt /@mycp exch def
    } {
      dup /linetype eq {
        pop [ @mycp 4 2 roll 2 copy ToPnt /@mycp exch def ToPnt ]
      } {
        pop [ @mycp 8 2 roll 2 copy ToPnt /@mycp exch def
        ToPnt 5 1 roll ToPnt 4 1 roll ToPnt 3 1 roll ]
      } ifelse
      counttomark 1 roll
    } ifelse
  } loop ]
  DebugEnd
} bind def
/GetSegmentCount {
  (GetSegmentCount) DebugBegin
  dup IsPath {
    [ exch aload pop 0
    {
      counttomark 1 eq { exit } if
      exch
      dup /movetype eq {
        pop 3 1 roll pop pop
      }{
        dup /linetype eq {
          pop 1 add 3 1 roll pop pop
        }{
          pop 1 add 7 1 roll 6 { pop } repeat
        } ifelse
      } ifelse
    } loop
    exch pop
  } {
    % a Bezier curve is a single segment
    length 0 gt { 1 } { 0 } ifelse
  } ifelse
  DebugEnd
} bind def
/LoadLineIntersectionPoints {
  (LoadLineIntersectionPoints) DebugBegin
  exch [ exch { aload pop } forall ]
  tx@Dict begin tx@FuncDict begin 2 dict begin
    dup length 2 idiv 1 sub /BezierType exch def /Points exch def
    [ exch { GetBezierCoor } forall ]
  end end end
  DebugEnd
} bind def
/LoadCurveIntersectionPoints {
  (LoadCurveIntersectionPoints) DebugBegin
  2 {
    4 2 roll
    [ exch { aload pop } forall ]
    exch [ exch { aload pop } forall ]
  } repeat
  tx@Dict begin tx@FuncDict begin 2 dict begin
    dup length 2 idiv 1 sub /BezierType exch def /Points exch def
      [ exch { GetBezierCoor } forall ]
    3 1 roll
    dup length 2 idiv 1 sub /BezierType exch def /Points exch def
      [ exch { GetBezierCoor } forall ]
    end
    2 {
      [ exch aload length 4 idiv {
        [ 5 1 roll ] counttomark 1 roll
      } repeat ]
      exch
    } repeat
    2 {
      dup hulldict /comp get exch quicksort exch
    } repeat
    2 dict begin
      /B exch def /A exch def
      [ 0 1 A length 1 sub {
        dup A exch get exch B exch get % [IAi] [IBi]
        2 copy aload pop VecSub Pyth exch
        aload pop VecSub Pyth lt { exch } if pop
        aload pop VecAdd 0.5 VecScale
      } for ]
    end
  end end
  DebugEnd
} bind def
/LoadIntersectionPoints {
  (LoadIntersectionPoints) DebugBegin
  4 copy pop exch pop length 2 eq exch length 2 eq and {
    pop pop LoadLineIntersectionPoints
  }{
    LoadCurveIntersectionPoints
  } ifelse
  DebugEnd
} bind def
/IterateIntersection {
    (IterateIntersection) DebugBegin
    12 dict begin
/precision MaxPrecision def
        4 2 roll 2 copy 6 2 roll
        dup IsPath not { PointArrayToArray } if
        0 exch { dup type /nametype eq { pop }{ abs max} ifelse } forall
        exch dup IsPath not { PointArrayToArray } if
        { dup type /nametype eq { pop }{ abs max} ifelse } forall
        Epsilon mul /epsilon exch def
        /counter 0 def
/depth 0 def
/domsA [] def
/domsB [] def
/domsA /domsB 6 2 roll _IterateIntersection
domsB domsA
    end
    dup length 0 gt {
      TArraysRemoveDup
    } if
    DebugEnd
} bind def
/TArraysRemoveDup {
  4 dict begin
    /tB exch def
    /tA exch def
    /j 0 def
    [ tA 0 get tB 0 get
    1 1 tA length 1 sub {
      /i exch def
      tA j get aload pop tA i get aload pop tx@Dict begin Pyth2 end MaxPrecision gt
      tB j get aload pop tB i get aload pop tx@Dict begin Pyth2 end MaxPrecision gt and {
        % keep the current parameter point
        /j i def
        tB i get tA i get
        counttomark 2 idiv 1 add 1 roll
      } if
    } for
    counttomark 2 idiv 1 add [ exch 1 roll ] % [ ... [tB]
    counttomark 1 add 1 roll ] exch % [tA] [tB]
  end
} bind def
/_IterateIntersection {
    (_IterateIntersection) DebugBegin
    CloneVec /domB exch def
    CloneVec /domA exch def
    CloneCurve /CurveB exch def
    CloneCurve /CurveA exch def
    /iter 0 def
    /depth depth 1 add def
    /dom null def
    /counter counter 1 add def
    CheckIT {
(>> curve subdivision performed: dom(A) = ) domA CurveToString strcat
(, dom(B) = ) strcat domB CurveToString strcat ( <<) strcat ==
    } if
    CurveA IsConstant CurveB IsConstant and {
CurveA MiddlePoint ToPnt
CurveB MiddlePoint ToPnt AreNear {
    domA domB 4 -1 roll exch PutInterval PutInterval
} {
    pop pop
} ifelse
    }{
counter 100 lt {
    {
/iter iter 1 add def
iter 100 lt
domA Extent precision ge
domB Extent precision ge or and not {
    iter 100 ge {
false
    } {
CurveA MiddlePoint ToPnt
CurveB MiddlePoint ToPnt AreNear {
    domA domB true
}{
    false
} ifelse
    } ifelse
    exit
} if
CheckIT {
    (counter: ) counter 20 string cvs strcat
    (, iter: ) iter 20 string cvs strcat strcat
    (, depth: ) depth 20 string cvs strcat strcat ==
} if
CurveA CurveB ClipCurve /dom exch def

CheckIT {(dom : ) dom CurveToString strcat == } if
dom IsEmptyInterval {
    CheckIT { (empty interval, exit) == } if
    false exit
} if
dom aload pop 2 copy min 3 1 roll max gt {
    CheckIT {
(dom[0] > dom[1], invalid!) ==
    } if
    false exit
} if

domB dom MapTo /domB exch def
CurveB dom Portion

CurveB IsConstant CurveA IsConstant and {
    CheckIT {
           (both curves are constant: ) ==
(C1: [ ) CurveA { CurveToString ( ) strcat strcat } forall (]) strcat ==
(C2: [ ) CurveB { CurveToString ( ) strcat strcat } forall (]) strcat ==
    } if
    CurveA MiddlePoint ToPnt
    CurveB MiddlePoint ToPnt AreNear {
domA domB true
    } {
false
    } ifelse
    exit
} if
dom Extent MinClippedSizeThreshold gt {
    CheckIT {
(clipped less than 20% : ) ==
(angle(A) = ) CurveA dup length 1 sub get aload pop
      CurveA 0 get aload pop VecSub
          exch 2 copy 0 eq exch 0 eq and {
  pop pop (NaN)
      } {
  atan 20 string cvs
      } ifelse strcat ==
        (angle(B) = ) CurveB dup length 1 sub get aload pop
                      CurveB 0 get aload pop VecSub
      exch 2 copy 0 eq exch 0 eq and {
  pop pop (NaN)
      } {
  atan 20 string cvs
      } ifelse strcat ==
        (dom : ) == dom == (domB :) == domB ==
    } if
    CurveA CurveB domA domB iter
          7 -2 roll 2 copy 9 2 roll 2 copy
    domA Extent domB Extent gt {
CurveA CloneCurve dup H1Interval Portion % pC1
CurveA CloneCurve dup H2Interval Portion % pC2
domA H1Interval MapTo                    % dompC1
domA H2Interval MapTo                    % dompC2
3 -1 roll exch % /domsA /domsB /domsA /domsB pC1 dompC1 pC2 dompC2
CurveB exch domB 8 4 roll % /domsA /domsB pC2 CurveB dompC2 domB /domsA /domsB pC1 dompC1
CurveB exch domB % /domsA /domsB pC2 CurveB dompC2 domB /domsA /domsB pC1 CurveB dompC1 domB
    } {
CurveB CloneCurve dup H1Interval Portion % pC1
CurveB CloneCurve dup H2Interval Portion % pC2
domB H1Interval MapTo                    % dompC1
domB H2Interval MapTo                    % dompC2
8 -2 roll exch 8 2 roll 6 -2 roll exch 6 2 roll % /domsB /domsA /domsB /domsA pC1 pC2 dompC1 dompC2
3 -1 roll exch % /domsB /domsA /domsB /domsA pC1 dompC1 pC2 dompC2
CurveA exch domA 8 4 roll % /domsB /domsA pC2 CurveA dompC2 domA /domsB /domsA pC1 dompC1
CurveA exch domA          % /domsB /domsA pC2 CurveA dompC2 domA /domsB /domsA pC1 CurveA dompC1 domA
    } ifelse

    _IterateIntersection
    _IterateIntersection
    /iter exch def
    /domB exch def
    /domA exch def
    /CurveB exch def
    /CurveA exch def
    false exit
} if
CurveA CurveB /CurveA exch def /CurveB exch def
domA domB /domA exch def /domB exch def
exch
    } loop
    {
4 -1 roll exch PutInterval PutInterval
CheckIT {
    (found an intersection ============================) ==
} if
    } { pop pop } ifelse
} {
    pop pop
} ifelse
    } ifelse
    /depth depth 1 sub def
    DebugEnd
} bind def
/PutInterval {
    CloneVec [ exch 3 -1 roll dup 4 1 roll load aload pop ] def
} bind def
/IsEmptyInterval {
    aload pop 0 eq exch 1 eq and
} bind def
/ToUnitInterval {
    ToUnitRange exch ToUnitRange 2 copy gt {
exch
    } if
    ToPnt
} bind def
/ToUnitRange {
    dup 0 lt {
pop 0
    }{
dup 1 gt {
    pop 1
} if
    } ifelse
} bind def
/CloneCurve {
    [ exch {
CloneVec
    } forall ]
} bind def
/CloneVec {
    aload pop ToPnt
} bind def
/MapTo {
    (MapTo) DebugBegin
    exch aload 0 get 3 1 roll exch sub 2 copy % [I] J0 Jextent J0 Jextent
    5 -1 roll aload aload pop % J0 Jextent J0 Jextent I0 I1 I0 I1
    min 4 -1 roll mul % J0 Jextent J0 I0 I1 min(I0,I1)*Jextent
    4 -1 roll add [ exch % J0 Jextent I0 I1 [ J0new
    6 2 roll max mul add ]
    DebugEnd
} bind def
/Portion {
    (Portion) DebugBegin
    dup Min 0 eq { % [CurveB] [I]
Max dup 1 eq {% [CurveB] I.max()
    % I.max() == 1
    pop pop
} { % [CurveB] I.max()
    LeftPortion
} ifelse
    } { % [CurveB] [I]
2 copy Min % [CurveB] [I] [CurveB] I.min()
RightPortion
dup Max 1 eq {
    % I.max() == 1
    pop pop
} {% [CurveB] [I]
    dup aload pop exch sub 1 3 -1 roll Min sub div % [CurveB] (I1-I0)/(1-I.min())
    LeftPortion
} ifelse
    } ifelse
    DebugEnd
} bind def
/LeftPortion {
    (LeftPortion) DebugBegin
    exch dup length 1 sub dup 4 1 roll % L-1 t [CurveB] L-1
    1 1 3 -1 roll { % L-1 t [CurveB] i
4 -1 roll dup 5 1 roll % L-1 t [CurveB] i L-1
-1 3 -1 roll % L-1 t [CurveB] L-1 -1 i
{ % L-1 t [CurveB] j
    2 copy 5 copy % L-1 t [CurveB] j [CurveB] j t [CurveB] j [CurveB] j
    1 sub get 3 1 roll get % L-1 t [CurveB] j [CurveB] j t B[j-1] B[j]
    Lerp put pop % L-1 t [CurveB]
} for
    } for
    pop pop pop
    DebugEnd
} bind def
/RightPortion {
    (RightPortion) DebugBegin
    exch dup length 1 sub dup 4 1 roll % L-1 t [CurveB] L-1
    1 1 3 -1 roll {% L-1 t [CurveB] i
4 -1 roll dup 5 1 roll % L-1 t [CurveB] i L-1
exch sub 0 1 3 -1 roll  % L-1 t [CurveB] 0 1 L-i-1
{% L-1 t [CurveB] j
    2 copy 5 copy
    get 3 1 roll 1 add get Lerp put pop
} for
    } for
    pop pop pop
    DebugEnd
} bind def
/Lerp {
    (Lerp) DebugBegin
    3 -1 roll dup 1 exch sub 3 1 roll % [A] (1-t) [B] t
    exch aload pop 3 -1 roll VecScale % [A] (1-t) B.x*t B.y*t
    4 2 roll
    exch aload pop 3 -1 roll VecScale VecAdd ToPnt % [A.x*(1-t)+B.x*t A.y*(1-t)+B.y*t]
    DebugEnd
} bind def
/IsConstant {
    aload length [ exch 1 roll ] true 3 1 roll
    {
exch dup 4 1 roll
AreNear and exch
    } forall
    pop
} bind def
/AreNear {
    (AreNear) DebugBegin
    aload pop 3 -1 roll aload pop
    VecSub abs epsilon lt exch abs epsilon lt and
    DebugEnd
} bind def
/Min {
    aload pop min
} bind def
/Max {
    aload pop max
} bind def
/Extent {
    aload pop exch sub
} bind def
/MiddlePoint {
    dup dup length 1 sub get aload pop
    3 -1 roll 0 get aload pop
    VecAdd 0.5 VecScale
} bind def
/OrthogonalOrientationLine {
    (OrthogonalOrientationLine) DebugBegin
    dup dup length 1 sub get aload pop 3 -1 roll 0 get aload pop VecSub
    neg exch
    4 2 roll 2 copy 6 2 roll VecAdd
    ImplicitLine
    DebugEnd
} bind def
/PickOrientationLine {
    (PickOrientationLine) DebugBegin
    dup dup length 1 sub exch 0 get% [Curve] L-1 P0
    exch -1 1 {% [Curve] P0 i
3 -1 roll dup 4 1 roll exch get % [Curve] P0 Pi
2 copy AreNear {
    pop
} {
    exit
} ifelse
    } for
    3 -1 roll pop
    exch aload pop 3 -1 roll aload pop ImplicitLine
    DebugEnd
} bind def
/ImplicitLine {
    4 copy % Xi Yi Xj Yj Xi Yi Xj Yj
    3 -1 roll sub 7 1 roll sub 5 1 roll % Yj-Yi Xi-Xj Xi Yi Xj Yj
    % Yi*Xj - Xi*Yj
    4 -1 roll mul neg % Yj-Yi Xi-Xj Yi Xj -Yj*Xi
    3 1 roll mul add % Yj-Yi Xi-Xj Yi*Xj-Yj*Xi | l0 l1 l2
    3 1 roll 2 copy tx@Dict begin Pyth end dup dup % l2 l0 l1 L L L
    5 -1 roll exch % l2 l1 L L l0 L
    div 5 1 roll % l0/L l2 l1 L L
    3 1 roll div % l0/L l2 L l1/L
    3 1 roll div % l0/L l1/L l2/L
} bind def
/distance {
    5 1 roll 3 -1 roll mul 3 1 roll mul add add
} bind def
/ArrayToPointArray {
    aload length dup 2 idiv {
3 1 roll [ 3 1 roll ] exch
dup 1 sub 3 1 roll 1 roll
    } repeat 1 add [ exch 1 roll ]
} bind def
/PointArrayToArray {
    aload length dup {
1 add dup 3 -1 roll aload pop 4 -1 roll 1 add 2 roll
    } repeat 1 add [ exch 1 roll ]
} bind def
/ClipCurve {
    (ClipCurve) DebugBegin
    4 dict begin
    /CurveB exch def /CurveA exch def
    CurveA IsConstant {
     CurveA MiddlePoint CurveB OrthogonalOrientationLine
    } {
CurveA PickOrientationLine
    } ifelse
    CheckIT {
3 copy exch 3 -1 roll (OrientationLine : )
3 { exch 20 string cvs ( ) strcat strcat } repeat ==
    } if
    CurveA FatLineBounds
    CheckIT { dup (FatLineBounds : ) exch aload pop exch 20 string cvs (, ) strcat exch 20 string cvs strcat strcat == } if
    CurveB ClipCurveInterval
    end
    DebugEnd
} bind def
/FatLineBounds {
    (FatLineBounds) DebugBegin
    /dmin 0 def /dmax 0 def
    {
4 copy aload pop 5 2 roll distance
dup dmin lt { dup /dmin exch def } if
dup dmax gt { dup /dmax exch def } if
pop pop
    } forall
    [dmin dmax]
    DebugEnd
} bind def
/ClipCurveInterval {
    (ClipCurveInterval) DebugBegin
    15 dict begin
    /curve exch def
    aload pop 2 copy min /boundMin exch def max /boundMax exch def
    [ 4 1 roll ] cvx /fatline exch def
    % number of sub-intervals
    /n curve length 1 sub def
    % distance curve control points
    /D n 1 add array def
    0 1 n { % i
dup curve exch get aload pop % i Pi.x Pi.y
fatline distance % distance d of Point i from the orientation line, on stack; i d
exch dup n div % d i i/n
[ exch 4 -1 roll ] % i [ i/n d ]
D 3 1 roll put
    } for
    D ConvexHull /D exch def
    /getX { D exch get 0 get } def
    /getY { D exch get 1 get } def
    /tmin 1 def /tmax 0 def
    0 getY dup
    boundMin lt /plower exch def
    boundMax gt /phigher exch def
    plower phigher or not {
tmin 0 getX gt { /tmin 0 getX def } if
tmax 0 getX lt { /tmax 0 getX def } if
    } if
    1 1 D length 1 sub {
/i exch def
/clower i getY boundMin lt def
/chigher i getY boundMax gt def
clower chigher or not {
    tmin i getX gt { /tmin i getX def } if
    tmax i getX lt { /tmax i getX def } if
} if
clower plower eq not {
    boundMin i 1 sub i D Intersect % t on stack
    dup tmin lt { dup /tmin exch def } if
    dup tmax gt { dup /tmax exch def } if
    pop
    /plower clower def
} if
chigher phigher eq not {
    boundMax i 1 sub i D Intersect
    dup tmin lt { dup /tmin exch def } if
    dup tmax gt { dup /tmax exch def } if
    pop
    /phigher chigher def
} if
    } for
    /i D length 1 sub def
    /clower 0 getY boundMin lt def
    /chigher 0 getY boundMax gt def
    clower plower eq not {
boundMin i 0 D Intersect
dup tmin lt { dup /tmin exch def } if
dup tmax gt { dup /tmax exch def } if
pop
    } if
    chigher phigher eq not {
boundMax i 0 D Intersect
dup tmin lt { dup /tmin exch def } if
dup tmax gt { dup /tmax exch def } if
pop
    } if
    [tmin tmax]
    end
    DebugEnd
} bind def
/Intersect {
    dup 4 -1 roll get aload pop
    4 2 roll exch get aload pop
    4 2 roll 2 copy 6 2 roll VecSub
    5 2 roll
    neg 3 -1 roll add
    3 -1 roll div
    3 -1 roll mul add
} bind def
/IsPath {
  dup length 1 sub get type /nametype eq { true } { false } ifelse
} bind def
/ShowPathPortion {
  (ShowPathPortion) DebugBegin
  8 dict begin
  /tstop exch def
  /tstart exch def
  /savecp { ToPnt cvx /@cp exch def } def
  InitTracing
  /n 0 def
  mark exch aload pop
  {
    counttomark 0 eq n tstop ge or { cleartomark exit } if
    dup /movetype eq not { /n n 1 add def } if
    dup /movetype eq {
      pop savecp
    } {
      tstart n ge {
        /curvetype eq { 6 2 roll 4 { pop } repeat } if
        savecp
      } {
        tstart n 1 sub gt tstop n lt or {
          tstart n sub 1 add tstop n sub 1 add
          ToUnitInterval exch
          /linetype eq {
            3 1 roll ToPnt
            tstart n 1 sub gt { @cp ToPnt } { currentpoint ToPnt } ifelse exch ToPnt
            dup 3 -1 roll Portion
            aload pop exch
            tstart n 1 sub gt {
              exch aload pop 3 -1 roll aload pop ArrowA
              tstop n le {
                currentpoint 4 2 roll ArrowB linetype pop pop
              } {
                linetype
              } ifelse
            } {
              pop aload pop currentpoint 4 2 roll ArrowB linetype pop pop
            } ifelse
          } {
            7 1 roll
            [ tstart n 1 sub gt { @cp }{ currentpoint } ifelse
            9 3 roll ] ArrayToPointArray
            dup 3 -1 roll
            Portion
            { aload pop } forall
            tstart n 1 sub gt {
              8 -4 roll 4 2 roll ArrowA 6 2 roll
            } {
              8 -2 roll pop pop
            } ifelse
            tstop n le { ArrowB } if
            curvetype
          } ifelse
        }{
          tstart n 1 sub eq {
            /linetype eq {
              @cp ArrowA
              tstop n eq {
                currentpoint 4 2 roll ArrowB linetype pop pop
              } {
                linetype
              } ifelse
            } {
              6 -2 roll @cp ArrowA 6 2 roll
              tstop n eq {
                ArrowB
              } if
              curvetype
            } ifelse
          } {
            /linetype eq {
              tstop n eq {
                currentpoint 4 2 roll ArrowB linetype pop pop
              }{
                linetype
              } ifelse
            } {
              tstop n eq {
                ArrowB
              } if
              curvetype
            } ifelse
          } ifelse
        } ifelse
      } ifelse
    } ifelse
  } loop
  end
  DebugEnd
} bind def
/GetCurvePoint {
  dup IsPath {
    5 dict begin
    exch dup /tstart exch def
    1 add cvi /tstop exch def
    /savecp { ToPnt cvx /@cp exch def } def
    /n 0 def
    mark exch aload pop
    {
      counttomark 0 eq n tstop ge or { cleartomark exit } if
      dup /movetype eq not { /n n 1 add def } if
      dup /movetype eq {
        pop savecp
      } {
        tstart n ge {
          /curvetype eq { 6 2 roll 4 { pop } repeat } if
          savecp
        } {
          tstart n 1 sub gt {
            tstart n sub 1 add tstop n sub 1 add
            ToUnitInterval exch
            /linetype eq {
              3 1 roll ToPnt
              tstart n 1 sub gt { @cp ToPnt } { currentpoint ToPnt } ifelse exch ToPnt
              dup 3 -1 roll Portion
            } {
              7 1 roll
              [ @cp 9 3 roll ] ArrayToPointArray
              dup 3 -1 roll
              Portion
            } ifelse
            0 get aload pop
          }{
            /curvetype eq {
              pop pop pop pop
            } if
          } ifelse
          counttomark 1 add 2 roll cleartomark exit
        } ifelse
      } ifelse
    } loop
    end
  } {
    exch dup 0 eq {
      pop 0 get aload pop
    } {
      0 exch ToUnitInterval exch dup 3 -1 roll Portion
      dup length 1 sub get aload pop
    } ifelse
  } ifelse
} bind def
/TraceCurveOrPath {
  4 1 roll
  UnifyInterval
  3 -1 roll dup IsPath {
    4 -1 roll pop
    3 1 roll 2 copy gt {
      ReverseInterval
      3 -1 roll ReversePath 3 1 roll
    } if
    ShowPathPortion
  }{ % tstart tstop [curve]
    mark exch 4 2 roll % [ [curve] tstart tstop
      2 copy gt { % tstart > tstop
        exch
        [ 4 -1 roll ReverseCurve 3 1 roll % [ [curve'] tstart tstop
      } if
      ToUnitInterval exch dup 3 -1 roll Portion
      { aload pop } forall
      counttomark -2 4 { 2 roll } for
      counttomark 2 sub 2 idiv
      counttomark 2 add -1 roll exec
    } ifelse
} bind def
 % Graham Scal algorithm to compute the convex hull of a set of
 % points. Code written by Bill Casselman,
 %  http://www.math.ubc.ca/~cass/graphics/text/www/
 %
 % [[X1 Y1] [X2 Y2] ... [Xn Yn]] hull -> [[...] ... [...]]
 %
/hulldict 32 dict def
hulldict begin

 % u - v
/vsub { 2 dict begin
/v exch def
/u exch def
[
  u 0 get v 0 get sub
  u 1 get v 1 get sub
]
end } def

 % u - v rotated 90 degrees
/vperp { 2 dict begin
/v exch def
/u exch def
[
  v 1 get u 1 get sub
  u 0 get v 0 get sub
]
end } def

/dot { 2 dict begin
/v exch def
/u exch def
  v 0 get u 0 get mul
  v 1 get u 1 get mul
  add
end } def

 % P Q
 % tests whether P < Q in lexicographic order
 % i.e xP < xQ, or yP < yQ if xP = yP
/comp { 2 dict begin
/Q exch def
/P exch def
P 0 get Q 0 get lt
  P 0 get Q 0 get eq
  P 1 get Q 1 get lt
  and
or
end } def

end

 % args: an array of points C
 % effect: returns the array of points on the boundary of
 %     the convex hull of C, in clockwise order

/ConvexHull {
(ConvexHull) DebugBegin
hulldict begin
/C exch def
/comp C quicksort
/n C length def
 % Q might circle around to the start
/Q n 1 add array def
Q 0 C 0 get put
Q 1 C 1 get put
/i 2 def
/k 2 def
 % i is next point in C to be looked at
 % k is next point in Q to be added
 % [ Q[0] Q[1] ... ]
 % scan the points to make the top hull
n 2 sub {
  % P is the current point at right
  /P C i get def
  /i i 1 add def
  {
    % if k = 1 then just add P
    k 2 lt { exit } if
    % now k is 2 or more
    % look at Q[k-2] Q[k-1] P: a left turn (or in a line)?
    % yes if (P - Q[k-1])*(Q[k-1] - Q[k-2])^perp >= 0
    P Q k 1 sub get vsub
    Q k 1 sub get Q k 2 sub get vperp
    dot 0 lt {
      % not a left turn
      exit
    } if
    /k k 1 sub def
  } loop
  Q k P put
  /k k 1 add def
} repeat

 % done with top half
 % K is where the right hand point is
/K k 1 sub def

/i n 2 sub def
Q k C i get put
/i i 1 sub def
/k k 1 add def
n 2 sub {
  % P is the current point at right
  /P C i get def
  /i i 1 sub def
  {
    % in this pass k is always 2 or more
    k K 2 add lt { exit } if
    % look at Q[k-2] Q[k-1] P: a left turn (or in a line)?
    % yes if (P - Q[k-1])*(Q[k-1] - Q[k-2])^perp >= 0
    P Q k 1 sub get vsub
    Q k 1 sub get Q k 2 sub get vperp
    dot 0 lt {
      % not a left turn
      exit
    } if
    /k k 1 sub def
  } loop
  Q k P put
  /k k 1 add def
} repeat

 % strip Q down to [ Q[0] Q[1] ... Q[k-2] ]
 % excluding the doubled initial point
[ 0 1 k 2 sub {
  Q exch get
} for ]
end
DebugEnd
} def

/qsortdict 8 dict def

qsortdict begin

 % args: /comp a L R x
 % effect: effects a partition into two pieces [L j] [i R]
 %     leaves i j on stack

/partition { 8 dict begin
/x exch def
/j exch def
/i exch def
/a exch def
dup type /nametype eq { load } if /comp exch def
{
  {
    a i get x comp exec not {
      exit
    } if
    /i i 1 add def
  } loop
  {
    x a j get comp exec not {
      exit
    } if
    /j j 1 sub def
  } loop

  i j le {
    % swap a[i] a[j]
    a j a i get
    a i a j get
    put put
    /i i 1 add def
    /j j 1 sub def
  } if
  i j gt {
    exit
  } if
} loop
i j
end } def

 % args: /comp a L R
 % effect: sorts a[L .. R] according to comp
/subsort {
 % /c a L R
[ 3 1 roll ] 3 copy
 % /c a [L R] /c a [L R]
aload aload pop
 % /c a [L R] /c a L R L R
add 2 idiv
 % /c a [L R] /c a L R (L+R)/2
3 index exch get
 % /c a [L R] /c a L R x
partition
 % /c a [L R] i j
 % if j > L subsort(a, L, j)
dup
 % /c a [L R] i j j
3 index 0 get gt {
  % /c a [L R] i j
  5 copy
  % /c a [L R] i j /c a [L R] i j
  exch pop
  % /c a [L R] i j /c a [L R] j
  exch 0 get exch
  % ... /c a L j
  subsort
} if
 % /c a [L R] i j
pop dup
 % /c a [L R] i i
 % if i < R subsort(a, i, R)
2 index 1 get lt {
  % /c a [L R] i
  exch 1 get
  % /c a i R
  subsort
}{
  4 { pop } repeat
} ifelse
} def

end % qsortdict

 % args: /comp a
 % effect: sorts the array a
 % comp returns truth of x < y for entries in a

/quicksort { qsortdict begin
dup length 1 gt {
 % /comp a
dup
 % /comp a a
length 1 sub
 % /comp a n-1
0 exch subsort
} {
pop pop
} ifelse
end } def
/debug {
    dup 1 add copy {==} repeat pop
} bind def
/DebugIT false def
/CheckIT false def
/DebugDepth 0 def
/DebugBegin {
  DebugIT {
    /DebugProcName exch def
    DebugDepth 2 mul string
    0 1 DebugDepth 2 mul 1 sub {
      dup 2 mod 0 eq { (|) }{( )} ifelse
      3 -1 roll dup 4 2 roll
      putinterval
    } for
    DebugProcName strcat ==
    /DebugDepth DebugDepth 1 add def
  }{
    pop
  } ifelse
} bind def
/DebugEnd {
  DebugIT {
    /DebugDepth DebugDepth 1 sub def
    DebugDepth 2 mul 2 add string
    0 1 DebugDepth 2 mul 1 sub {
      dup 2 mod 0 eq { (|) }{ ( ) } ifelse
      3 -1 roll dup 4 2 roll
      putinterval
    } for
    dup DebugDepth 2 mul (+-) putinterval
    ( done) strcat ==
  } if
} bind def
/strcat {
    exch 2 copy
    length exch length add
    string dup dup 5 2 roll
    copy length exch
    putinterval
} bind def
/nametostr {
    dup length string cvs
} bind def
/ShowCurve {
    { aload pop } forall
    8 -2 roll moveto curveto
} bind def
/CurveToString {
    (CurveToString) DebugBegin
    aload pop ([) 3 -1 roll 20 string cvs strcat (, ) strcat exch 20 string cvs strcat (]) strcat
    DebugEnd
} bind def
end % tx@IntersectDict

%%EndProcSet
%%BeginProcSet: pst-optexp.pro 0 0
%%
%% This is file `pst-optexp.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% pst-optexp.dtx  (with options: `prolog')
%% 
%% This is a generated file.
%% 
%% Project: pst-optexp
%% Version: 5.2 (2014/11/26)
%% 
%% Copyright (C) 2007-2014 by Christoph Bersch <usenet@bersch.net>
%% 
%% This work may be distributed and/or modified under the
%% conditions of the LaTeX Project Public License, either version 1.3c
%% of this license or (at your option) any later version.
%% The latest version of this license is in
%%   http://www.latex-project.org/lppl.txt
%% and version 1.3c or later is part of all distributions of LaTeX
%% version 2008/05/04 or later.
%% 
%% This work has the LPPL maintenance status "maintained".
%% 
%% The current maintainer of this work is Christoph Bersch.
%% 
%% This work consists of the files pst-optexp.dtx and pst-optexp.ins
%% and the derived files
%%     pst-optexp.sty, pst-optexp.pro.
%% 
/tx@OptexpDict 200 dict def
tx@OptexpDict begin
/DebugOE false def
/DebugDepth 0 def
/DebugBegin {
  DebugOE {
    /DebugProcName ED
    DebugDepth 2 mul string
    0 1 DebugDepth 2 mul 1 sub {
      dup 2 mod 0 eq { (|) }{( )} ifelse
      3 -1 roll dup 4 2 roll
      putinterval
    } for
    DebugProcName strcat ==
    /DebugDepth DebugDepth 1 add def
  }{
    pop
  } ifelse
} bind def
/DebugEnd {
  DebugOE {
    /DebugDepth DebugDepth 1 sub def
    DebugDepth 2 mul 2 add string
    0 1 DebugDepth 2 mul 1 sub {
      dup 2 mod 0 eq { (|) }{ ( ) } ifelse
      3 -1 roll dup 4 2 roll
      putinterval
    } for
    dup DebugDepth 2 mul (+-) putinterval
    ( done) strcat ==
  } if
} bind def
/DebugMsg {
  DebugOE {
    DebugDepth 1 add 2 mul string
    0 1 DebugDepth 2 mul 1 add {
      dup 2 mod 0 eq { (|) }{( )} ifelse
      3 -1 roll dup 4 2 roll
      putinterval
    } for
    exch strcat ==
  }{
    pop
  } ifelse
} bind def
/strcat {
    exch 2 copy
    length exch length add
    string dup dup 5 2 roll
    copy length exch
    putinterval
} bind def
/nametostr {
    dup length string cvs
} bind def
/PrintWarning {
  (Warning pst-optexp: ) exch strcat (\n) strcat print
} bind def
/CompUnknownWarning {
  (Component ') exch strcat (' unknown) strcat Warning
} bind def
/OneFiberCompWarning {
  (Found only one unsupported component in beam path, drawing no beam) Warning
} bind def
/FiberCompWarning {
  (Found an unsupported component in beam path, stopping beam path) Warning
} bind def
/inttostr {
  dup type /integertype eq {
    dup log 1 add floor cvi string cvs
  } if
} bind def
/calcNodes {
  (calcNode) DebugBegin
  /YG exch def /XG exch def
  /by exch YG sub def
  /bx exch XG sub def
  /ay YG 3 -1 roll sub def
  /ax XG 3 -1 roll sub def
  ax ay NormalizeVec bx by NormalizeVec VecAdd
  2 copy Pyth abs 1e-4 lt {
    pop pop ax ay -90 matrix rotate dtransform
  } if
  /cy ED /cx ED
  /c ax bx add ay by add Pyth def
  c 0 eq {
    ax ay bx by DotProd 0 gt {
      /cx ax def
      /cy ay def
    }{
      /cx ay def
      /cy ax neg def
    } ifelse
  } if
  cx cy NormalizeVec 2 copy
  XG YG VecAdd /Y@A ED /X@A ED
  XG YG 4 2 roll VecSub /Y@B ED /X@B ED
  true
  ax by mul ay bx mul sub 0 le {
    pop false
    Y@A X@A
    /X@A X@B def
    /Y@A Y@B def
    /X@B exch def
    /Y@B exch def
  } if
  DebugEnd
} bind def
/capHeight {
    dup mul neg exch abs dup 3 1 roll dup mul add sqrt sub
} bind def
/leftCurvedIfc {
  /R1 exch def /h exch def
  0 R1 abs dup R1 h capHeight exch sub R1 sign mul dup
  h exch atan exch
  h neg exch atan
  R1 0 lt {
    /ArcL /arcn load def
  } {
    /ArcL /arc load def
  } ifelse
  R1
} bind def
/rightCurvedIfc {
  /R2 exch def /h exch def
  0 R2 abs dup R2 h capHeight sub R2 sign mul dup
  h neg exch atan exch
  h exch atan
  R2 0 lt {
    /ArcR /arcn load def
  } {
    /ArcR /arc load def
  } ifelse
  R2
} bind def
/SlopeAngle {
  (SlopeAngle) DebugBegin
  @GetCenter 3 -1 roll @GetCenter @ABVect exch atan
  DebugEnd
} bind def
/DefineExtNode {%
  (DefineExtNode) DebugBegin
  @@y mul RefFac mul @@y0 add
  exch @@x mul RefFac mul @@x0 add exch
  DebugEnd
} bind def
/GetInternalNodeNames {
  (GetInternalNodeNames) DebugBegin
  /reverse ED
  dup cvn load /N get dup
  reverse { -1 1 } { 1 1 3 -1 roll } ifelse
  { inttostr
    3 -1 roll dup 4 1 roll exch NodeName 3 1 roll
  } for
  pop pop
  DebugEnd
} bind def
/GetInternalBeamNodes {
  (GetInternalBeamNodes) DebugBegin
  [ 3 1 roll GetInternalNodeNames ]
  { @GetCenter } forall
  DebugEnd
} bind def
/InitOptexpComp {%
  /@@x 0 def
  /@@y 0 def
  /@@x0 0 def
  /@@y0 0 def
  /@xref [0] def
  /@yref [0] def
  /RefFac 1 def
} bind def
/NewTempNodeComp {
  (NewTempNodeComp) DebugBegin
  /sc ED
  dup cvn
  6 dict dup 3 1 roll def begin
    /ambiguous false def
    /allowbeaminside false def
    /forcebeaminside false def
    /name ED
    /correct false def
    {0 0} exch 3 -1 roll exec
    gsave
      translate
      /CompMtrx CM def
    grestore
    /N 1 def
    /n bgRefIndex def
    5 dict dup dup /P@1 ED /P@N ED
    begin
      /mode trans def
      {} 0 0 PlainIfc
    end
  /adjustRel true def
  end
  DebugEnd
} bind def
/CurvedIfc {
  5 2 roll
  2 copy 5 3 roll exec 3 -1 roll exec VecAdd
  5 -1 roll exec /Y ED /X ED
  exch exec 3 -1 roll 3 copy exec /RY ED /RX ED
  3 1 roll NormalizeVec 3 -1 roll exec
  tx@Dict begin Pyth end dup
  3 1 roll mul 1.00001 mul /NAup ED
  mul 1.00001 mul /NAlow ED
} bind def
/PlainIfc {
  5 2 roll
  dup 3 -1 roll exec NormalizeVec 3 -1 roll exec 2 copy /DY ED /DX ED
  tx@Dict begin Pyth end dup 4 2 roll
  exch exec 3 -1 roll exec /Y ED /X ED
  3 1 roll mul 1.00001 mul /NAup ED
  mul 1.00001 mul /NAlow ED
} bind def
/PathIfc {
  pop pop /NAup 0 def /NAlow 0 def
  3 1 roll /Path ED
  exec 3 -1 roll exec /Y ED /X ED
} bind def
/NewCompIfc {
  /scl ED
  /next ED
  dup (P@) exch strcat cvn
  6 dict dup
  3 1 roll def
  begin
    3 -1 roll
    /mode ED
    6 -1 roll dup 7 -1 roll
    {scl} 8 -2 roll next
  end
  exec scl ToVec 3 1 roll NodeName @NewNode
} bind def
/relative 0 def /absolute 1 def /center 2 def /firstcomp 3 def
/refl 0 def /trans 1 def /absorb 2 def /refltrans 3 def /auto 4 def /undefined -1 def
/desc 0 def /asc 1 def /amb 2 def
/ok 0 def /tir 1 def /missed 2 def
/bgRefIndex 0 def
/NewOptexpComp {
  (NewOptexpComp) DebugBegin
  /sc ED dup cvn
  gsave
  13 dict dup 3 1 roll def begin
  /name ED
  /forcebeaminside ED
  /allowbeaminside ED
  /ambiguous ED
  /grating false def
  dup type /booleantype eq not { false } if /correct ED
  tx@Dict begin
    STV {CP T} stopped pop
  end
  /CompMtrx CM def
  grestore
  counttomark dup 6 idiv dup /N ED 6 mul eq { 1 } if
  cvx 1 EvalRefIndex /n ED
  ambiguous {
    /ambIfc ED
  }{
    /ambIfc 0 def
  } ifelse
  1 N eq {
      name (1) 3 -1 roll {sc} NewCompIfc
      (1) (2) IfcCopy
      (2) (N) IfcAlias
  }{
    N -1 1 { %
      inttostr exch name 3 1 roll {sc} NewCompIfc
    } for
    N inttostr (N) IfcAlias
  } ifelse
  ambiguous ambIfc 0 gt and {
    ambIfc inttostr (C) IfcCopy
  } if
  end
  pop
  DebugEnd
} bind def
/NewOptexpFiberComp {
  (NewOptexpFiberComp) DebugBegin
  /sc ED dup cvn
  gsave
  12 dict dup 3 1 roll def begin
  /name ED
  tx@Dict begin
    STV {CP T} stopped pop
  end
  /CompMtrx CM def
  grestore
  counttomark /N ED
  1 N eq {
    {0 1} 0 0 trans name (1) {PlainIfc} {sc} NewCompIfc
    (1) (2) IfcCopy
    (2) (N) IfcAlias
  }{
    N -1 1 {
      inttostr
      {0 1} 0 0 absorb name 6 -1 roll {PlainIfc} {sc} NewCompIfc
    } for
    N inttostr (N) IfcAlias
  } ifelse
  end
  pop
  DebugEnd
} bind def
/IfcCopy {
  2 copy IfcName exch IfcName load dup
  length dict copy def
  name exch NodeName name 3 -1 roll NodeName
  tx@NodeDict begin
    load dup length dict copy def
  end
} bind def
/IfcAlias {
  2 copy IfcName exch IfcName load def
  tx@NodeDict begin
    name exch NodeName name 3 -1 roll NodeName load def
  end
} bind def
/CompAlias {
  2 copy cvn dup currentdict exch known {
    load def
  } {
    pop
  } ifelse
  tx@NodeDict begin
  1 {
    3 copy inttostr dup
    3 1 roll 2 copy NodeName
    currentdict exch known {
      NodeName load 3 1 roll NodeName ED
      1 add
    } {
      pop (N) NodeName load 3 1 roll
      pop (N) NodeName ED
      pop exit
    } ifelse
  } loop
  mark (A) (B) (@A) (@B) (Center) (Label) (Rotref)
       (TrefA) (TrefB) (@TrefA) (@TrefB) (Ext) (Origin)
  counttomark {
    counttomark 3 add -2 roll 2 copy counttomark 1 add 2 roll
    3 -1 roll dup 4 1 roll NodeName dup
    currentdict exch known {
      load 3 1 roll exch NodeName ED
    } {
      pop pop pop
    } ifelse
  } repeat pop
  exch 1 1 8 {
    3 copy
    (Ext) exch 5 string cvs strcat dup 3 1 roll
    NodeName 3 1 roll NodeName
    dup currentdict exch known {
      load def pop
    } {
      pop pop pop exit
    } ifelse
  } for
  pop pop
  end
} bind def
/GetPlaneVec {
  (GetPlaneVec) DebugBegin
  cvn load begin
    IfcName load begin
      currentdict /RX known {
        RX RY CompMtrx dtransform CM idtransform
        neg exch
      } {
        DX DY CompMtrx dtransform CM idtransform
      } ifelse
    end
  end
  DebugEnd
} bind def
/GetIfcCenter {
  (GetIfcCenter) DebugBegin
  dup type /stringtype eq not {
    dup xcheck not {
      0 get (C) exch
    } {
      exec pop pop pop
    } ifelse
  } if
  cvn load begin
    IfcName load begin
      currentdict /RX known {
        X RX sub Y RY sub
      } {
        X Y
      } ifelse
      CompMtrx transform CM itransform
    end
  end
  DebugEnd
} bind def
/GetIfcCenterCorr {
  (GetIfcCenterCorr) DebugBegin
  cvn load begin
    IfcName load begin
      currentdict /XCorr known {
        XCorr YCorr
      }{
        X Y
      } ifelse
      currentdict /RX known {
        RX neg RY neg VecAdd
      } if
      CompMtrx transform CM itransform
    end
  end
  DebugEnd
} bind def
/TransformInVec {
  (TransformInVec) DebugBegin
  3 1 roll
  GetIfcCenter 4 2 roll
  GetIfcCenter 5 -2 roll
  @ABVect
  3 -1 roll exec 2 copy 6 2 roll
  0 eq exch 0 eq and not {
    exch atan matrix rotate dtransform
  } {
    4 2 roll pop pop
  } ifelse
  ToVec
  DebugEnd
} bind def
/TransformStartPos {
  (TransformStartPos) DebugBegin
  exec 2 copy 6 2 roll 0 eq exch 0 eq and not
  3 1 roll GetIfcCenter 4 2 roll
  GetIfcCenter 5 2 roll {
    2 copy 8 2 roll
    @ABVect exch atan matrix rotate dtransform
    VecAdd
  } {
    6 2 roll pop pop pop pop
  } ifelse
  ToVec
  DebugEnd
} bind def
/GetNearestPlane {
  (GetNearestPlane) DebugBegin
  3 copy 1 exch GetIfcCenter @ABDist /dist ED /nearestPlane 1 def
  dup cvn load /N get 2 1 3 -1 roll {
    4 copy exch GetIfcCenter @ABDist dup dist lt {
      /dist ED /nearestPlane ED
    } {
      pop pop
    } ifelse
  } for
  pop pop pop nearestPlane
  DebugEnd
} bind def
/PushAmbCompPlanesOnStack {
 (PushAmbCompPlanesOnStack) DebugBegin
  currentdict /outToPlane undef
  PN IfcCnt eq not {
    exch dup 3 1 roll % nextifc ambcomp nextifc
    dup xcheck not {
      0 get (C) exch
    } {
      exec pop pop pop
    } ifelse
    [ 3 1 roll ] cvx /outToPlane ED
  } if
  /IfcCntTmp IfcCnt def
  aload pop /draw ED /name ED
  name cvn load /N get dup /N ED
  1 eq { /draw true def } if
  currentdict /Curr known {
    /CurrTmp /Curr load def
    /CurrVecTmp /CurrVec load def
  } {
    /CurrTmp /CurrLow load def
    /CurrVecTmp /CurrVecLow load def
  } ifelse
  PN 1 eq {
    [ (C) name name GetRefIndex trans draw] cvx
    name /outToPlane load GetNextPlane
    dup 0 eq not {
      [ exch name bgRefIndex trans draw ] cvx exch
      /IfcCntTmp IfcCntTmp 1 add def
    } {
      pop
    } ifelse
  }{
    CurrTmp name GetNearestPlane dup /firstPlane ED
    name isAmbiguousIfc not {
      firstPlane name
      name firstPlane GetIfcMode
      connectifc { bgRefIndex }{ name GetRefIndex } ifelse
      CurrTmp CurrVecTmp
      10 dict begin HandleInterface end pop
      ToVec /CurrVecTmp ED ToVec /CurrTmp ED
      [ firstPlane name
      connectifc {
        bgRefIndex
      }{
        name GetRefIndex
      } ifelse
      name firstPlane GetIfcMode
      true ] cvx
      /IfcCntTmp IfcCntTmp 1 add def
    } if
    PN IfcCnt eq {
      [ (C) name
      name GetRefIndex
      trans draw ] cvx
      IfcCntTmp IfcCnt gt { exch } if
    }{
      beamdiffractionorder null eq not name cvn load /grating get and {
        beamdiffractionorder dup 0 eq { pop () } if
        (C) exch 20 string cvs strcat
        dup (P@) exch strcat cvn name cvn load exch known not {
          pop beamdiffractionorder dup sign neg 1 {
            (C) exch 5 string cvs dup 3 1 roll strcat
            dup (P@) exch strcat cvn name cvn load exch known {
              3 -1 roll pop
              (Diffraction order ) beamdiffractionorder 5 string cvs strcat
              ( is not defined, using ) 4 -1 roll strcat strcat Warning
              exit
            } {
              pop
            } ifelse
          } for
        } if
        /@@centerifc ED
        mark @@centerifc name name GetRefIndex
        beamdiffractionorder 0 eq {
          trans
        }{
          name @@centerifc GetIfcMode refltrans eq {
            refltrans
          }{
            refl
          } ifelse
        } ifelse
      }{
        /@@centerifc (C) def
        [ @@centerifc name
        name GetRefIndex
        beammode auto eq {
          CurrVecTmp @@centerifc name GetPlaneVec
          name @@centerifc GetIfcMode refltrans eq { -90 matrix rotate dtransform } if
          NormalVec outToPlane GetIfcCenter @@centerifc name GetIfcCenter @ABVect DotProd
          0 lt {
            trans
          }{
            name @@centerifc GetIfcMode
            refltrans eq {
              refltrans
            }{
              refl
            } ifelse
          } ifelse
        } {
          beammode dup refl eq {
            pop name @@centerifc GetIfcMode dup refltrans eq not { pop refl } if
          } if
        } ifelse
      } ifelse
      dup 6 1 roll
      IfcCntTmp IfcCnt eq { true }{ draw } ifelse
      ] cvx
      @@centerifc name 4 -1 roll
      connectifc { bgRefIndex }{ name GetRefIndex } ifelse
      CurrTmp CurrVecTmp
      10 dict begin HandleInterface end pop
      ToVec /CurrVecTmp ED ToVec /CurrTmp ED
      name /outToPlane load GetNextPlane
      dup dup name isAmbiguousIfc exch 0 eq or not {
        [ exch name bgRefIndex trans draw ] cvx exch
        firstPlane name isAmbiguousIfc not { 3 -1 roll } if
        /IfcCntTmp IfcCntTmp 1 add def
      } {
        pop
        exec 3 -1 roll pop bgRefIndex 3 1 roll [ 6 1 roll ] cvx
        firstPlane name isAmbiguousIfc not { exch } if
      } ifelse
    } ifelse
  } ifelse
  /IfcCnt IfcCntTmp def
  DebugEnd
} bind def
/GetNextPlane {
  (GetNextPlane) DebugBegin
  2 copy (C) 3 -1 roll
  GetIfcCenter 3 -1 roll
  exec GetIfcCenter
  4 2 roll 4 copy @ABVect ToVec /Vec ED
  @ABDist /centerDist ED
  /sprod 1 def
  /nextPlane 0 def
  exch dup 3 1 roll
  cvn load dup /ambIfc get /ambIfc ED /N get 1 1 3 -1 roll {
   dup ambIfc eq not {
      3 copy 3 -1 roll 2 copy
      GetPlaneVec Vec 4 2 roll NormalVec
      Vec DotProd dup sprod lt 5 2 roll
      GetIfcCenter 3 -1 roll exec GetIfcCenter @ABDist
      centerDist lt and
      centerDist -1 eq { pop dup 0 gt } if
      { /sprod ED /nextPlane ED } { pop pop } ifelse
    } {
      pop
    } ifelse
  } for
  pop pop nextPlane
  DebugEnd
} bind def
/TraceBeam {
  (Tracebeam) DebugBegin
  AngToVec /InVec ED /StartPoint ED
  /oldbeaminsidelast currentdict /beaminsidelast known {
    beaminsidelast
  } {
    false
  } ifelse def
  exec
  connectifc {
    /nbeam bgRefIndex def
  } if
  /startinside startinside beaminsidefirst or def
  /stopinside stopinside beaminsidelast or def
  /PrevCorrect false def
  PrearrangePlanes
  PushAllPlanesOnStack
  currentdict /lastVecTmp known {
    lastVecTmp beamangle matrix rotate dtransform ToVec
  } {
    counttomark 2 ge beamalign relative eq and {
      2 copy /InVec load TransformInVec
    } {
      /InVec load
    } ifelse
  } ifelse
  /CurrVec ED
  currentdict /lastBeamPointTmp known {
    /lastBeamPointTmp load /Curr ED
  }{
    counttomark 2 ge {
      2 copy /StartPoint load  TransformStartPos
    } {
      /StartPoint load
    } ifelse
    /Curr ED
  } ifelse
  counttomark /IfcCnt ED
  /n1 bgRefIndex def
  /PN 1 def
  (start looping) DebugMsg
  {
    PN IfcCnt gt {
      exit
    } if
    (checked) DebugMsg
    beampathcount 0 eq {
      cleartomark mark exit
    } if
    dup xcheck not {
      PushAmbCompPlanesOnStack
    } if
    exec
    /draw ED /Mode ED /n2 ED 2 copy /CompName ED /IfcNum ED
    GetIfcCenter ToVec /CurrCenter ED
    Curr CurrVec
    connectifc PrevCorrect PN 2 gt and PN 2 eq or and {
      CurrVec CurrCenter PrevCenter PrevMode
      currentdict /relAngle known
      { relAngle } { 0 } ifelse connectInterfaces
      /relAngle ED
    } if
    CompName cvn load begin
      currentdict /adjustRel known aligntovector and {
        IfcNum IfcName load begin
          currentdict /RX known not {
            2 copy neg exch CM dtransform CompMtrx idtransform
            /DY ED /DX ED
          } if
        end
      } if
    end
    IfcNum CompName Mode n2 8 4 roll HandleInterface
    missed eq {
      counttomark PN 1 sub 3 mul sub {pop} repeat
      (The beam missed an interface) Warning exit
      exit
    } if
    PN 1 eq {
      pop pop
      /draw beaminsidefirst oldbeaminsidelast xor def
    } {
      ToVec /CurrVec ED
    } ifelse
    2 copy
    ToVec /Curr ED
    draw PN beampathskip 1 add gt and
    counttomark 3 roll
    /PrevCenter /CurrCenter load def
    /lastBeamPointTmp /Curr load def
    currentdict /lastVecTmp known {
      /prevVecTmp /lastVecTmp load def
      /lastVecTmp /CurrVec load def
    } {
      /CurrVec load dup /lastVecTmp ED /prevVecTmp ED
    } ifelse
    /PrevMode Mode def
    CompName cvn load /correct get /PrevCorrect ED
    PN IfcCnt eq {
      exit
    } {
      CurrVec 0 eq exch 0 eq and {
        IfcCnt PN sub {pop} repeat
        (Total internal reflection occured, this is not supported)
        Warning
        exit
      } if
      beampathcount 1 add PN eq {
        IfcCnt PN sub {pop} repeat
        exit
      } if
      /PN PN 1 add def
    } ifelse
  } loop
  DebugEnd
} bind def
/sign {
    0 ge { 1 } { -1 } ifelse
} bind def
/Chirality {
  4 -1 roll mul 3 1 roll mul sub sign
} bind def
/TraceInterfacePath {
  tx@IntersectDict begin
    /ArrowA { {currentpoint} stopped {moveto}{pop pop pop pop} ifelse } def
    {} TraceCurveOrPath
    currentdict /ArrowA undef
  end
} bind def
/TraceAndFillWideBeam {
  (TraceAndFillWideBeam) DebugBegin
  AngToVec /InvecLow ED /StartLow ED
  AngToVec /InvecUp ED /StartUp ED
  exec
  connectifc {
    /nbeam bgRefIndex def
  } if
  /startinside startinside beaminsidefirst or def
  /stopinside stopinside beaminsidelast or def
  /DrawnSegm 0 def
  /PrevCorrect false def
  PrearrangePlanes
  PushAllPlanesOnStack
  currentdict /lastVecTmpUp known
  currentdict /lastVecTmpLow known and {
    /CurrVecLow lastVecTmpLow beamangle matrix rotate dtransform ToVec def
    /CurrVecUp lastVecTmpUp beamangle matrix rotate dtransform ToVec def
  }{
    beamalign relative eq counttomark 2 ge and {
      2 copy /InvecLow load TransformInVec /CurrVecLow ED
      2 copy /InvecUp load TransformInVec /CurrVecUp ED
    } {
      /CurrVecLow /InvecLow load def
      /CurrVecUp /InvecUp load def
    } ifelse
  } ifelse
  currentdict /lastBeamPointTmpLow known
  currentdict /lastBeamPointTmpUp known and {
    /lastBeamPointTmpLow load /CurrLow ED
    /lastBeamPointTmpUp load /CurrUp ED
    loadbeam not beamdiv 0 eq not and {
      CurrVecLow CurrVecUp Chirality
      CurrLow CurrUp @ABVect CurrVecLow CurrVecUp VecAdd Chirality 0 lt { neg } if
      beamdiv sign eq not {
        /CurrVecLow load /CurrVecUp load /CurrVecLow ED /CurrVecUp ED
      } if
    } if
  } {
    counttomark 2 ge {
      2 copy /StartLow load TransformStartPos /CurrLow ED
      2 copy /StartUp load TransformStartPos /CurrUp ED
    } {
      /StartLow load /CurrLow ED
      /StartUp load /CurrUp ED
    } ifelse
  } ifelse
  /PrevVecUp /CurrVecUp load def
  /PrevVecLow /CurrVecLow load def
  counttomark /IfcCnt ED
  /n1 bgRefIndex def
  /CurrR false def
  /CurrPath false def
  /CurrUpT false def
  /CurrLowT false def
  /ret missed def
  /PN 1 def
  {
    PN IfcCnt gt {
      exit
    } if
    beampathcount 0 eq {
      cleartomark mark exit
    } if
    dup xcheck not {
      PushAmbCompPlanesOnStack
    } if
    exec
    PN beampathskip 1 add gt and /draw ED
    /Mode ED /n2 ED 2 copy /CompName ED /IfcNum ED
    GetIfcCenter ToVec /CurrPCenter ED
    /oldn1 n1 def
    CompName cvn load /adjustRel known aligntovector and {
      connectifc PrevCorrect PN 2 gt and PN 2 eq or and {
        CurrVecUp CurrVecUp CurrPCenter PrevPCenter PrevMode
        currentdict /relAngleUp known { relAngleUp } { 0 } ifelse
        connectInterfaces pop
        CurrVecLow CurrVecLow CurrPCenter PrevPCenter PrevMode
        currentdict /relAngleLow known { relAngleLow } { 0 } ifelse
        connectInterfaces pop
      } {
        CurrVecUp CurrVecLow
      } ifelse
      VecAdd NormalizeVec
      CompName cvn load begin
        IfcNum IfcName load begin
          currentdict /RX known not {
            CM dtransform CompMtrx idtransform
            /DX ED neg /DY ED
          } {
            pop pop
          } ifelse
        end
      end
    } if
    CurrUp CurrVecUp
    connectifc PrevCorrect PN 2 gt and PN 2 eq or and {
      CurrVecUp CurrPCenter PrevPCenter PrevMode
      currentdict /relAngleUp known { relAngleUp } { 0 } ifelse
      connectInterfaces /relAngleUp ED
    } if
    /PrevUp /CurrUp load def
    /PrevUpT /CurrUpT load def
    /PrevPath /CurrPath load def
    IfcNum CompName Mode n2 8 4 roll HandleInterface
    dup /ret ED
    missed eq {
      counttomark {pop} repeat
      (The upper beam missed an interface) Warning exit
    } if
    ToVec /CurrVecUp ED
    ToVec /CurrUp ED
    currentdict /isectT known currentdict /isectPath known and {
      /CurrUpT isectT def
      /CurrPath isectPath def
    } if
    /n1 oldn1 def
    /PrevLow /CurrLow load def
    /PrevLowT /CurrLowT load def
    CurrLow CurrVecLow
    connectifc PrevCorrect PN 2 gt and PN 2 eq or and  {
      CurrVecLow CurrPCenter PrevPCenter PrevMode
      currentdict /relAngleLow known { relAngleLow } { 0 } ifelse
      connectInterfaces /relAngleLow ED
    } if
    IfcNum CompName Mode n2 8 4 roll HandleInterface
    dup missed eq {
      /ret ED
      (The lower beam missed an interface) Warning
      counttomark {pop} repeat exit
    } if
    tir eq ret tir eq or {
      /ret tir def
    } {
      /ret ok def
    } ifelse
    ToVec /CurrVecLow ED
    ToVec /CurrLow ED
    currentdict /isectT known {
      /CurrLowT isectT def
    } if
    /PrevR CurrR def
    PrevR type /realtype eq {
      /CurrCenter load /PrevCenter ED
    } if
    IfcNum CompName isCurvedIfc {
      IfcNum CompName LoadIfc
      tx@Dict begin Pyth end /CurrR ED
      ToVec /CurrCenter ED
    } {
      /CurrR false def
      /CurrCenter false def
    } ifelse
    IfcNum CompName isPathIfc not {
      /CurrPath false def
      /CurrLowT false def
      /CurrUpT false def
    } if
    PN 1 gt currentdict /fillBeam known and {
      draw {
        /DrawnSegm DrawnSegm 1 add def
        PrevUp moveto CurrUp lineto
        IfcNum CompName isCurvedIfc {
          CurrCenter CurrUp CurrLow
          4 copy 3 -1 roll eq 3 1 roll eq and {
            6 {pop} repeat
          } {
            TangentCrosspoint
            CurrLow CurrR arct
          } ifelse
        } {
          IfcNum CompName isPathIfc {
            CurrPath CurrUpT CurrLowT TraceInterfacePath
          } {
            CurrLow lineto
          } ifelse
        } ifelse
        PrevLow lineto
        PrevPath type /booleantype eq not {
          PrevPath PrevLowT PrevUpT TraceInterfacePath
        } {
          PrevR type /booleantype eq not {
            PrevCenter PrevLow PrevUp
            4 copy 3 -1 roll eq 3 1 roll eq and {
              6 {pop} repeat
            } {
              TangentCrosspoint
              PrevUp PrevR arct
            } ifelse
          } {
            PrevUp lineto
          } ifelse
        } ifelse
      } if
      Mode refl eq draw and
      draw not DrawnSegm 0 gt and or {
        fillBeam newpath
        /DrawnSegm 0 def
      } if
    } if
    PN 1 eq {
      /CurrVecUp /PrevVecUp load def
      /CurrVecLow /PrevVecLow load def
    } if
    strokeBeam {
      CurrUp draw CurrLow draw counttomark 1 add 6 roll
    } if
    PN IfcCnt eq ret tir eq or
    beampathcount 1 add PN eq or {
      DrawnSegm 0 gt currentdict /fillBeam known and {
        fillBeam newpath
        /DrawnSegm 0 def
      } if
      IfcCnt PN sub {pop} repeat
      ret tir eq {
        (Total internal reflection occured, this is not supported)
        Warning
      } if
      exit
    } if
    /PN PN 1 add def
    /PrevVecUp /CurrVecUp load def
    /PrevVecLow /CurrVecLow load def
    /PrevPCenter /CurrPCenter load def
    /PrevMode Mode def
    CompName cvn load /correct get /PrevCorrect ED
  } loop
  DrawnSegm 0 gt currentdict /fillBeam known and {
    fillBeam newpath
    /DrawnSegm 0 def
  } if
  ret missed eq not {
    CurrLow CurrUp @ABVect % from Low to Up
    PrevVecUp PrevVecLow VecAdd
    2 copy 6 2 roll
    Chirality 0 lt
    3 1 roll 2 copy pop -1e-5 lt
    3 1 roll exch 1e-5 lt exch 0 lt and or xor {
      /lastBeamPointTmpUp /CurrLow load def
      /lastBeamPointTmpLow /CurrUp load def
      /lastVecTmpUp /CurrVecLow load def
      /lastVecTmpLow /CurrVecUp load def
    } {
      /lastBeamPointTmpLow /CurrLow load def
      /lastBeamPointTmpUp /CurrUp load def
      /lastVecTmpUp /CurrVecUp load def
      /lastVecTmpLow /CurrVecLow load def
    } ifelse
    /lastVecTmpUp load /lastVecTmpLow load
    /prevVecLow ED /prevVecUp ED
  } if
  DebugEnd
} bind def
/DrawbeamPrepare {
  {
    counttomark 6 le { exit } if
    3 index not { pop pop pop }{ exit } ifelse
  } loop
  {
    counttomark 3 le { exit } if
    counttomark 3 sub index not {
      counttomark -3 roll pop pop pop
    }{
      exit
    } ifelse
  } loop
} bind def
/DrawbeamSimple {
  pop 5 copy 3 -1 roll pop
  ArrowA pop pop pop pop
  counttomark 3 idiv -1 2 {
    pop {
      lineto
    }{
      moveto
    } ifelse
  } for
  {CP 4 2 roll ArrowB lineto pop pop } {moveto} ifelse
} bind def
/DrawbeamArrowInside {
  6 copy pop
  /y1 ED /x1 ED pop /y2 ED /x2 ED
  /Alpha y2 y1 sub x2 x1 sub Atan def
  pop 3 -1 roll 5 1 roll
  ArrowA
  x1 Alpha cos arrowlength mul add
  y1 Alpha sin arrowlength mul add
  5 -1 roll 3 1 roll true
  /N N 1 sub def
  N {
    6 copy pop
    /y1 ED /x1 ED pop /y2 ED /x2 ED /draw ED
    x1 y1 x2 y2 @ABDist dup
    arrowminlength ge
    exch arrowmaxlength dup 0 lt
    3 1 roll le or and {
      x1 y1
      arrowpos 1 gt {
        /Alpha y2 y1 sub x2 x1 sub Atan def
        /dArrowPos dArrowPosStart abs def
        /ArrowPos ArrowPosStart def
        arrowno {
          /ArrowPos ArrowPos dArrowPos add def
          x1 Alpha cos ArrowPos mul add
          y1 Alpha sin ArrowPos mul add
          6 index { ArrowInside } if
          pop pop
        } repeat
      }{
        arrowno 1 gt {
          1.0 arrowno 1.0 add div
        }{
          dArrowPosStart
        } ifelse /dArrowPos ED
        /ArrowPos ArrowPosStart def
        arrowno {
          /ArrowPos ArrowPos dArrowPos add def
          x2 x1 sub ArrowPos mul x1 add
          y2 y1 sub ArrowPos mul y1 add
          6 index { ArrowInside } if
          pop pop
        } repeat
      } ifelse
      pop pop
    } if
    draw {Lineto}{moveto} ifelse
  } repeat
  {CP 4 2 roll ArrowB lineto pop pop } {moveto} ifelse
} bind def
/isAmbiguous {
  cvn load dup /ambiguous known {
    /ambiguous get
  } {
    pop false
  } ifelse
} bind def
/isAmbiguousIfc {
  cvn load dup /ambiguous known {
    /ambIfc get eq
  } {
    pop pop false
  } ifelse
} bind def
/isCurvedIfc {
  cvn load begin
    IfcName load /RX known
  end
} bind def
/isPathIfc {
  cvn load begin
    IfcName load /Path known
  end
} bind def
/HandleInterface {
  (HandleInterface) DebugBegin
  /Yin ED /Xin ED /Y0 ED /X0 ED /n2 ED /mode ED
  currentdict /isectT undef currentdict /isectPath undef
  2 copy 2 copy LoadIfc % IfcNum name IfcNum name path
  dup type /arraytype eq { % is an path interface
    dup /isectPath exch def
    3 1 roll pop pop PathInterface % IfcNum name t X0' Y0' Xout Yout status
    dup missed eq not { 6 -1 roll /isectT exch def } if
  } {
    6 -2 roll
    isCurvedIfc { CurvedInterface }{ PlainInterface } ifelse
  } ifelse
  dup missed eq not useNA connectifc not and and {
    7 3 roll 2 copy 9 2 roll
    4 2 roll 2 copy
    %% X0' Y0' Xout Yout status X0' Y0' IfcNum CompName IfcNum CompName
    cvn load begin IfcName load dup /NAlow get exch /NAup get end
    2 copy lt {
      4 2 roll 2 copy LoadIfc NormalizeVec
      6 -2 roll isCurvedIfc {
        neg exch
      } if
      %% ... X0' Y0' NAlow NAup X Y dXp dYp
      8 -2 roll 6 -2 roll
      %% ... NAlow NAup dXp dYp X0' Y0' X Y
      @ABVect DotProd
      dup 4 -1 roll ge 3 1 roll ge and not
      {
        pop missed
      } if
    }{
      6 {pop} repeat
    } ifelse
  } {
    7 -2 roll pop pop
  } ifelse
  DebugEnd
} bind def
/LoadIfc {
  (LoadIfc) DebugBegin
  cvn load begin
    IfcName load begin
      currentdict /Path known {
        Path TransformPath
      } {
        X Y
        CompMtrx transform CM itransform
        currentdict /RX known { RX RY }{ DX DY } ifelse
        CompMtrx dtransform CM idtransform
      } ifelse
    end
  end
  DebugEnd
} bind def
/isFreeray {
  cvn load /n known
} bind def
/compIsKnown {
  dup type /stringtype eq { cvn } if
  tx@OptexpDict exch known
} bind def
/PrearrangePlanes {
  (PrearrangePlanes) DebugBegin
  counttomark dup 2 lt {
    dup 0 eq {
      (Found no component on stack, drawing no beam) PrintWarning
    }{
      exch dup
      compIsKnown {
        dup isFreeray {
          asc exch 3 -1 roll
        }{
          OneFiberCompWarning
          pop
        } ifelse
      }{
        CompUnknownWarning
      } ifelse
    } ifelse
    /N 0 def
  }{
    /N ED
    /CompA ED dup /CompB ED
    CompA compIsKnown CompB compIsKnown and {
      CompA isFreeray {
        CompA isAmbiguous {
          amb dup CompA
        } {
          CompB isAmbiguous {
            1 CompA GetIfcCenter (C) CompB GetIfcCenter @ABDist
            (N) CompA GetIfcCenter (C) CompB GetIfcCenter @ABDist
          } {
            1 CompA GetIfcCenter
            1 CompB GetIfcCenter
            (N) CompB GetIfcCenter
            true OrderNodes exch pop
            (N) CompA GetIfcCenter
            1 CompB GetIfcCenter
            (N) CompB GetIfcCenter
            true OrderNodes exch pop
          } ifelse
          le { desc } { asc } ifelse dup CompA
        } ifelse
        counttomark 2 roll
      }{
        FiberCompWarning
        counttomark 1 sub { pop } repeat
        /N 0 def
      } ifelse
    }{
      /N 0 def
      CompA compIsKnown not {CompA}{CompB} ifelse
      CompUnknownWarning
    } ifelse
  } ifelse
  2 1 N {
    /i ED exch /CompB ED
    CompB compIsKnown not {
      counttomark i 1 sub 2 mul 1 add sub { pop } repeat
      CompB CompUnknownWarning
      exit
    } if
    CompB isFreeray not {
      counttomark i 1 sub 2 mul 1 add sub { pop } repeat
      FiberCompWarning
      exit
    } if
    CompB isAmbiguous not {
      dup desc eq { 1 } { dup amb eq { (C) }{ (N) } ifelse } ifelse
      CompA GetIfcCenter
      1 CompB GetIfcCenter
      (N) CompB GetIfcCenter false OrderNodes dup dup
      4 -1 roll CompA exch 5 -1 roll CompB exch
      i 2 eq {
        4 copy 4 2 roll AdjustRelRot
      } if
      AdjustRelRot
    } {
      i 2 eq {
        CompB amb CompA desc AdjustRelRot
      } if
      pop amb dup
    } ifelse
    CompB /CompA CompB def
    counttomark 2 roll
  } for pop
  DebugEnd
} bind def
/AdjustRelRot {
  (AdjustRelRot) DebugBegin
  exch dup cvn load /adjustRel known aligntovector not and {
    dup dup 4 2 roll isAmbiguous {
      exch pop (C)
    }{
      desc eq { (N) }{ 1 } ifelse
    } ifelse
    exch GetIfcCenter 5 3 roll
    exch dup 3 1 roll isAmbiguous {
      pop (C)
    }{
      desc eq { 1 }{ (N) } ifelse
    } ifelse
    exch GetIfcCenter
    @ABVect exch atan exch
    cvn load begin
      adjustRel {
        matrix rotate CompMtrx matrix concatmatrix /CompMtrx ED
        /adjustRel false def
      } {
        pop
      } ifelse
    end
  } {
    pop pop pop pop
  } ifelse
  DebugEnd
} bind def
/PushAllPlanesOnStack {
  (PushAllPlanesOnStack) DebugBegin
  counttomark 2 div cvi /@N ED
  1 1 @N {
    /last false def
    /first false def
    dup 1 eq {
      /first true def pop beaminsidefirst
    } {
      @N eq {
        beaminsidelast
        /last true def
      } {
        beaminside
      } ifelse
    } ifelse
    exch load dup dup
    /forcebeaminside get {
      3 -1 roll pop true
    } {
      dup /allowbeaminside get 4 -1 roll and
    } ifelse
    /drawinside ED
    /ambiguous get {
      /name get drawinside [ 3 1 roll ]
      counttomark 1 roll pop
    } {
      begin
        desc eq {
          N N -1 1 1
        } {
          1 1 1 N N
        } ifelse
        first {
          startinside not {
            5 -2 roll
            pop pop
            2 copy 5 2 roll
          } {
            startinsidecount 0 gt N startinsidecount sub 1 gt and {
              3 -1 roll dup 4 1 roll
              N 1 sub startinsidecount sub mul
              6 -2 roll pop add dup 5 2 roll
            } if
          } ifelse
        } if
        last stopinsidecount 0 gt N stopinsidecount sub 1 gt and and {
          % 1 1 1 N N
          3 -1 roll dup 4 1 roll stopinsidecount mul
          6 -1 roll dup 7 1 roll add 3 1 roll pop pop dup
        } if
        5 1 roll
        {
          3 1 roll 2 copy 5 -1 roll
          dup 3 1 roll
          eq first not and {
            true
          } {
            drawinside
          } ifelse
          exch dup 4 -1 roll eq {
            bgRefIndex
          }{
            name GetRefIndex
          } ifelse
          exch inttostr exch
          3 1 roll name
          4 1 roll
          dup IfcName load /mode get
          3 1 roll 5 1 roll
          [ 6 1 roll ] cvx counttomark 1 roll
          last {
            savebeampoints 1 ge stopinside not and
            savebeampoints 1 lt beaminsidelast not and or {
              exit
            } if
          } if
        } for pop pop
      end
    } ifelse
  } for
  DebugEnd
  counttomark 1 eq { pop } if
} bind def
/IfcName {
  inttostr (P@) exch strcat cvn
} bind def
/GetIfcMode {
  exch cvn load begin
    IfcName load /mode get
  end
} bind def
/NodeName {
  dup /stringtype eq not { inttostr } if
  strcat (N@) exch strcat cvn
} bind def
/OrderNodes {
   7 1 roll 6 -2 roll 2 copy 8 2 roll
   @ABDist 5 1 roll @ABDist 2 copy gt {
       pop asc exch
   } {
       exch pop desc exch
   } ifelse
   3 -1 roll not {
       pop
   } if
} bind def
/NormalVec {
  neg exch 2 copy 6 2 roll DotProd 0 gt {
    -1 mul exch -1 mul exch
  } if
  NormalizeVec
} bind def
/DotProd {
    3 -1 roll mul 3 1 roll mul add
} bind def
/VecAngle {
  4 copy 4 copy DotProd 5 1 roll
  tx@Dict begin
    Pyth 3 1 roll Pyth
  end mul
  div Acos
  5 2 roll mul 4 1 roll 3 -1 roll mul 3 -1 roll sub
  0 le { -1 }{ 1 } ifelse mul
} bind def
/VecAdd {
    3 -1 roll add 3 1 roll add exch
} bind def
/VecSub {
    neg 3 -1 roll add 3 1 roll neg add exch
} bind def
/VecScale {
  dup 4 -1 roll mul 3 1 roll mul
} bind def
/ToVec {
    ToPnt cvx
} bind def
/ToPnt {
    [ 3 1 roll ]
} bind def
/AngToVec {
    dup cos exch sin ToVec
} bind def
/NormalizeVec {
  2 copy
  tx@Dict begin
    Pyth
  end
  dup 3 1 roll div 3 1 roll div exch
} bind def
/@ABVect {
  3 -1 roll exch sub 3 1 roll sub exch
} bind def
/@ABDist {
  3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt
} bind def
/@InterLines {
  tx@EcldDict begin
    EqDr /D1c exch def /D1b exch def /D1a exch def
    EqDr /D2c exch def /D2b exch def /D2a exch def
    D1a D2b mul D1b D2a mul sub dup
    ZeroEq { % parallel lines
      pop 0 0 missed
    }{
      /Det exch def
      D1b D2c mul D1c D2b mul sub Det div
      D1a D2c mul D2a D1c mul sub Det div
      ok
    } ifelse
  end
} bind def
/@GetCenter {
  tx@NodeDict begin load GetCenter end
} bind def
/@NewNode {
  tx@NodeDict begin
    false exch 10 {InitPnode } NewNode
  end
} bind def
/RefractVec {
  (RefractVec) DebugBegin
  TransformRefIndex exch TransformRefIndex exch div /n ED
  /Ynorm ED /Xnorm ED
  NormalizeVec /Yin ED /Xin ED
  n abs 1 eq {
    Xin Yin
  }{
    /costheta1 Xnorm Ynorm Xin neg Yin neg DotProd def
    1 n dup mul 1 costheta1 dup mul sub mul sub
    dup 0 lt {
      pop 0 0
    } {
      sqrt /costheta2 ED
      n Xin mul n Yin mul
      n costheta1 mul costheta2 sub dup
      Xnorm mul exch Ynorm mul VecAdd
    } ifelse
  } ifelse
  DebugEnd
} bind def
/ReflectVec {
  (ReflectVec) DebugBegin
  /Ynorm ED /Xnorm ED NormalizeVec /Yin ED /Xin ED
  /costheta1 Xnorm Ynorm Xin neg Yin neg DotProd def
  Xin Yin 2 costheta1 mul dup Xnorm mul exch Ynorm mul VecAdd
  DebugEnd
} bind def
/ReflectGratVec {
  (ReflectGratVec) DebugBegin
  /Ynorm ED /Xnorm ED NormalizeVec /Yin ED /Xin ED
  /costheta1 Xnorm Ynorm Xin neg Yin neg DotProd def
  Xin Yin -2 costheta1 mul dup Xnorm mul exch Ynorm mul VecAdd
  DebugEnd
} bind def
/CurvedInterface {
  (CurvedInterface) DebugBegin
  2 copy /Yr ED /Xr ED
  tx@Dict begin Pyth end /radius ED /Yp ED /Xp ED
  /X0n X0 Xp sub def /Y0n Y0 Yp sub def
  tx@EcldDict begin
    X0n Y0n 2 copy 2 copy Xin 3 -1 roll add Yin 3 -1 roll add
    2 copy 6 2 roll EqDr radius InterLineCircle
  end
  4 copy
  0 eq 3 {exch 0 eq and} repeat {
    missed
  } {
    4 copy
    Xr neg Yr neg 2 copy
    8 -2 roll @ABDist
    5 1 roll @ABDist
    gt {
      4 2 roll
    } if pop pop
    Xp Yp VecAdd
    2 copy Xp Yp 4 2 roll @ABVect exch neg Xin Yin 4 2 roll NormalVec
    Xin Yin 4 2 roll
    mode trans eq {
      n1 n2 RefractVec
      2 copy 0 eq exch 0 eq and { tir } { ok } ifelse
    } {
      ReflectVec ok
    } ifelse /n1 n2 def
    5 -2 roll 2 copy 7 2 roll X0 Y0 @ABVect Xin Yin DotProd 0 lt
    PN 1 gt and {
      pop missed
    } if
  } ifelse
  DebugEnd
} bind def
/PlainInterface {%
  (PlainInterface) DebugBegin
  /dYp ED /dXp ED /Yp ED /Xp ED
  Xp Yp Xp dXp add Yp dYp add X0 Y0 X0 Xin add Y0 Yin add
  @InterLines missed eq {
    0 0 missed
  } {
    Xin Yin Xin Yin dXp dYp
    mode refltrans eq {
      neg exch NormalVec ReflectVec ok
    } {
      NormalVec
      mode trans eq {
        n1 n2 RefractVec
        2 copy 0 eq exch 0 eq and { tir } { ok } ifelse
      } {
        ReflectVec ok
      } ifelse
    } ifelse
    /n1 n2 def
    5 -2 roll 2 copy 7 2 roll X0 Y0 @ABVect Xin Yin DotProd 0 lt
    PN 1 gt and {
      pop missed
    } if
  } ifelse
  DebugEnd
} bind def
/PathInterface {
  (PathInterface) DebugBegin
  [ [X0 Y0] [X0 Xin add Y0 Yin add] ] exch
  tx@IntersectDict begin IntersectLinePath end % [pathseg] t [isect]
  dup length 0 eq {
    pop pop pop 0 0 missed
  } {
    aload pop
    Xin Yin Xin Yin
    8 -2 roll exch % I.x I.y Xin Yin Xin Yin t [pathseg]
    exch dup 9 1 roll exch % t I.x I.y Xin Yin Xin Yin t [pathseg]
    dup length 2 eq { % a line
      exch pop
      aload pop aload pop 3 -1 roll aload pop VecSub % t I.x I.y Xin Yin Xin Yin dXp dYp
    } {
      exch dup cvi sub DeriveCurve
    } ifelse
    % the following part is copied from /PlainInterface
    NormalVec
    mode trans eq {
      n1 n2 RefractVec
      2 copy 0 eq exch 0 eq and { tir } { ok } ifelse
    } {
      ReflectVec ok
    } ifelse
    /n1 n2 def
    5 -2 roll 2 copy 7 2 roll X0 Y0 @ABVect Xin Yin DotProd 0 lt
    PN 1 gt and {
      pop missed
    } if
    % t X0' Y0' Xout Yout status
  } ifelse
  DebugEnd
} bind def
/TransformRefIndex {
  dup bgRefIndex eq { pop 1 } if
} bind def
/GetRefIndex {
  cvn load /n get /nbeam load exch
  EvalRefIndex
} bind def
/EvalRefIndex {
  dup bgRefIndex eq not {
    1 dict begin
      /n ED
      exec
    end
  } if
} bind def
/Sellmaier {
  dup mul
  dup dup 1.03961212 mul exch 6000.69867 sub div
  exch dup dup 0.231792344 mul exch 20017.9144 sub div
  exch dup 1.01046945 mul exch 103.560653e6 sub div
  add add 1 add sqrt
} bind def
/TangentCrosspoint {
    4 copy 4 copy 14 -2 roll 2 copy
    6 2 roll @ABVect neg exch
    6 2 roll @ABVect neg exch
    8 -2 roll VecAdd 10 2 roll VecAdd
    @InterLines pop
} bind def
/NearestNodeTmp {
  exch /NodeB ED
  /dist -1 def
  dup cvn load /N get dup 1 eq {
    [ exch (N) ]
  } {
    [ exch 1 1 3 -1 roll { } for ]
  } ifelse
  {
    2 copy pop
    GetIfcCenterCorr 2 copy
    NodeB @ABDist
    dist 0 lt {
      /dist ED
      ToVec /node ED
    } {
      dup dist lt {
        /dist ED
        ToVec /node ED
      } {
        pop pop pop
      } ifelse
    } ifelse
  } forall
  pop dist /node load
} bind def
/NearestNode {
  (NearestNode) DebugBegin
  dup xcheck not { nametostr } if /CompB ED
  dup xcheck not {
    nametostr /CompA ED
    /CompB load dup xcheck not {
      /mindist -1 def
      [ exch false GetInternalNodeNames ]
      { @GetCenter ToVec
        CompA NearestNodeTmp
        exch dup mindist ge mindist 0 ge and {
          pop pop
        }{
          /mindist ED /minnodeA ED
        } ifelse
      } forall
      minnodeA
    } {
      CompA NearestNodeTmp exch pop exec
    } ifelse
  } {
    exec
  } ifelse
  DebugEnd
} bind def
/RelConnAngle {
  (RelConnAngle) DebugBegin
  /fiberalign ED
  dup xcheck not { nametostr } if /CompB ED
  dup xcheck not { nametostr } if /CompA ED
  /CompA load xcheck {
    /CompB load xcheck {
      @ABVect exch atan
    } {
      4 copy @ABVect 6 2 roll pop pop 2 copy
      CompB (Center) NodeName @GetCenter
      4 2 roll @ABVect 4 2 roll
      CompB
      fiberalign center eq {
        RelConnAngle@center
      }{
        3 1 roll pop pop
        RelConnAngle@ref
      } ifelse
      2 copy exch atan
      7 3 roll 2 copy 9 -2 roll
      DotProd 0 gt 5 1 roll DotProd 0 gt xor { 180 add } if
    } ifelse
  } {
    4 2 roll pop pop 2 copy
    CompA (Center) NodeName @GetCenter
    4 2 roll @ABVect 4 2 roll
    CompA fiberalign center eq {
      RelConnAngle@center
    }{
      3 1 roll pop pop
      RelConnAngle@tref
    } ifelse
    2 copy exch atan
    5 1 roll DotProd 0 gt { 180 add } if
  } ifelse
  DebugEnd
} bind def
/RelConnAngle@ref {
  dup (A) NodeName exch (B) NodeName
  @GetCenter 3 -1 roll @GetCenter @ABVect
} bind def
/RelConnAngle@tref {
  dup (TrefA) NodeName exch (TrefB) NodeName
  @GetCenter 3 -1 roll @GetCenter @ABVect
} bind def
/RelConnAngle@center {
  (Center) NodeName @GetCenter 4 2 roll @ABVect
} bind def
/GetIfcOrNodeCoord {
  dup xcheck {
    exch pop exec
  } {
    nametostr exch nametostr exch GetIfcCenter
  } ifelse
} bind def
/connectInterfaces {
  /relAngleTmp ED
  PN 2 eq {
    pop @ABVect NormalizeVec 4 2 roll VecAngle /relAngleTmp ED
  } if
  PN 3 ge {
    trans eq {
      @ABVect NormalizeVec 4 2 roll pop pop % remove Vec from stack
      relAngleTmp matrix rotate dtransform
      4 2 roll pop pop
    } {
      @ABVect NormalizeVec 4 2 roll VecAngle /relAngleTmp ED
    } ifelse
  } if
  relAngleTmp
} bind def
/GetCompRange {
  2 copy gt { 1 }{ -1 } ifelse 3 -1 roll
  { exch dup 3 -1 roll inttostr strcat exch} for
  pop
} bind def
/CorrectDipoleIfc {
  (CorrectDipoleIfc) DebugBegin
  dup dup 3 copy
  8 -1 roll dup 9 1 roll NodeName exch 7 -1 roll dup 7 1 roll NodeName
  gsave
    tx@Dict begin
      STV CP T
      exch @GetCenter 3 -1 roll @GetCenter
    end
  grestore
  4 copy @ABDist 1e-7 lt {
    6 -1 roll
    gsave
      tx@Dict begin
        STV CP T
        (TrefA) NodeName @GetCenter 7 -1 roll
        (TrefB) NodeName @GetCenter
      end
    grestore
    @ABVect NormalizeVec 2 copy
    8 -2 roll abs exch abs mymax -1e-6 mul VecScale
    8 -2 roll cvn load begin
      IfcName load begin
        X Y VecAdd /YCorr exch def /XCorr exch def
      end
    end
    4 2 roll abs exch abs mymax 1e-6 mul VecScale
    4 2 roll cvn load begin
      IfcName load begin
        X Y VecAdd /YCorr exch def /XCorr exch def
      end
    end
  } {
    10 { pop } repeat
  } ifelse
  DebugEnd
} bind def
/ClipFadeValue {
  dup 0 lt { pop 0 }{ dup 1 gt { pop 1 } if } ifelse
} bind def
/fadeto@white {
  FadeFunc ClipFadeValue @S mul @H exch @B sethsbcolor
} bind def
/fadeto@black {
  FadeFunc ClipFadeValue @B mul @H exch @S exch sethsbcolor
} bind def
/fadeto@transparency {
  FadeFunc ClipFadeValue @T mul .setopacityalpha
} bind def
/fadefunc@linear {
  neg 1 add
} bind def
/fadefunc@squared {
  dup mul neg 1 add
} bind def
/fadefunc@gauss {
  0.4 div dup mul neg Euler exch exp
} bind def
/fadefunc@exp {
  -6 mul Euler exch exp
} bind def
/FadeStroke {
  /FadeFunc ED /FadeToColor ED /@T ED
  PathLength dup /@L ED exch div /@dl ED
  mark
  { false counttomark 3 roll }
  { true counttomark 3 roll }
  {} {} pathforall
  currenthsbcolor /@B ED /@S ED /@H ED
  newpath /currL 0 def
  counttomark 3 idiv 1 1 3 -1 roll {
    pop
    { % lineto
      /y2 ED /x2 ED  x2 x1 sub y2 y1 sub 2 copy
      dup mul exch dup mul add sqrt dup  @L div exch
      @dl div 1 add floor dup dup
      4 2 roll div 5 1 roll
      1 1 3 -1 roll {
        5 copy 4 copy 2 copy eq not { fadecorrect add } if exch div VecScale
        6 2 roll 1 sub dup 0 eq not { fadecorrect sub } if exch div VecScale
        x1 y1 VecAdd moveto x1 y1 VecAdd lineto
        mul currL add FadeToColor
        stroke
      } for
      4 1 roll pop pop mul currL add /currL ED
      /y1 y2 def /x1 x2 def
    } { % moveto
      /y1 ED /x1 ED
    } ifelse
  } for
  pop
} def
/TransformPath {
  mark [ 3 -1 roll aload pop
  counttomark 1 add counttomark 1 add exch 1 roll
  {
    counttomark 1 eq { cleartomark exit } if
    dup /curvetype eq {
      7 1 roll
      3 { CompMtrx transform CM itransform 7 2 roll } repeat
      counttomark -1 roll dup counttomark 1 roll
      7 roll
    } {
      3 1 roll CompMtrx transform CM itransform 3 -1 roll
      counttomark -1 roll dup counttomark 1 roll
      3 roll
    } ifelse
  } loop
  ]
} bind def
/DeriveCurve {
  (DeriveCurve) DebugBegin
  exch dup length 4 eq not {
    pop pop 0 0
  } {
    aload pop 5 -1 roll
    dup 1 exch sub dup mul -3 mul exch % P0 P1 P2 P3 C0=(-3(1-t)^2) t
    dup dup -4 mul 1 add exch dup mul 3 mul add 3 mul exch % P0 P1 P2 P3 C0 C1=(3(3t^2-4t+1)) t
    dup dup 2 mul exch dup mul -3 mul add 3 mul exch % P0 P1 P2 P3 C0 C1 C2=(3(2t-3t^2)) t
    dup mul 3 mul % P0 P1 P2 P3 C0 C1 C2 C3=3t^2
    8 copy
    0 6 -1 3 { -1 roll 0 get 3 -1 roll mul add } for
    9 1 roll
    0 6 -1 3 { -1 roll 1 get 3 -1 roll mul add } for
  } ifelse
  DebugEnd
} bind def
/GetBezierDeriv {  % t on stack
  10 dict begin % hold all local
  /t ED
  /t1 1 t sub def % t1=1-t
  dup length /BezierOrder exch def
  /Points exch def
  /Coeff tx@FuncDict begin Pascal end BezierOrder get def % get the coefficients
    0 0 % initial values for x y
    BezierOrder -1 0 { % BezierOrder,...,2,1,0
      /I ED % I=BezierOrder,...,2,1,0
      /J BezierOrder I sub def % J=0,1,2,...,BezierOrder
      I 0 eq {
        0
      }{
        I t I 1 sub exp mul t1 J exp mul        %  i*t^{i-1}*(1-t)^{n-i}
      } ifelse
      J 0 eq {
        0
      } {
        J t I exp mul t1 J 1 sub exp mul    % -(n-i)t^i(1-t)^{n-i-1}
      } ifelse
      sub Coeff J get mul
      Points I get aload pop 3 -1 roll VecScale VecAdd
    } for % x y on stack
  end
} bind def
tx@IntersectDict begin
/IntersectLinePath {
  3 dict begin
    PreparePath dup length /n exch def
    2 copy ElongateLine exch 3 -1 roll pop
    /isect [] def
    /t -1 def
    {
      /n n 1 sub def
      2 copy IntersectBeziers
      dup 5 1 roll LoadIntersectionPoints
      dup length 0 gt {
        /isect exch def
        0 get dup type /arraytype eq {
          aload pop add 0.5 mul
        } if n add /t exch def
        exch pop
        exit
      } {
        pop pop pop
      } ifelse
    } forall
    t isect
  end
} bind def
end
/mymax {
  2 copy lt { exch } if pop
} bind def
/debug {
  /@N ED count dup @N gt @N 0 ge and { pop @N } if
  copy @N { == } repeat
} bind def
/debugComp {
  dup (debug comp ") exch strcat ("===============) strcat ==
  cvn load {
    dup type /dicttype eq {
      (plane----------------) ==
      { == == } forall
      (-----------done) ==
      } { == } ifelse
      ==
  } forall
  (================== done) ==
} bind def
end % tx@OptexpDict

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 57 /nine put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 70 /F put
dup 72 /H put
dup 73 /I put
dup 76 /L put
dup 77 /M put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 87 /W put
dup 97 /a put
dup 101 /e put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E5ADA5E217BE24851180E9A1700FBA66C7D2B0D7BFDE4F4EED1D24B821A40947
5620363657F6D048E651A689822CF815E72FC8AE9D835BE31D1DD8B54C9A717F
4DC319B4B59AE073936EA40B070524C7E71D5A7B64436DA107749746B516E29F
E3BBCB8F8C473E706670E11E5B221716F315FF097CD1841D0069FA69EA1898FF
9F9EC2518C77806A19730C97F54BEAD10B4729E5749A10EDBE644886443D1249
2C8517DF8D8AE98E2882439FA81903941B363A7D885F93C6DF9E1FD89F2F8CEE
B870C409ED13E78B4C914813B0A01DF8F876EDCC4F384055FD37C575726AD69F
F23D50EC5BEE2FB95A44F2B2E2DD94C933D90BED2C97B53738B4B2ED56EBE617
BEF17B9DF4F314A37F10FDE34C570D7BE76A496A58242F51E7321380CB042424
855F4B53071DF5A0DA5A31B8AAF9FB4F4C491625FF8FD008BD4402918043BEDF
77B840B2BE0DAAB4EF904FFEF935954AFB9BD2041241B1BC8519EB642C89E288
479664226DBB6F1171F9EEBC7E1273D0CABCF6B1BF7F26AF21C21D9B1B916F4F
603DDB68D3614B86566FC91D67AC3F4A4A96E256FA1A3BD35F4465AE4EC64D82
34BEB4BBDDCEEBD9A89D932E55F14CA2776F927C4FD3E0920790A57DAEA08C5B
169A3E2309DA6BA8684A5D1DEE81415796E13DCF906FCDADB092047831B16841
B250CD148557D72DD7E683BF122B38E2C4F614E59B395D1D9823D7D5F126D932
14B50A37FCA7120F8F3A8E42134F1B6B0C248D56F247AA68FB941839F600F61C
14247EFF780BBA3E5198D37CED44DEEC3455048FC451BCDB48DC414AE5293A60
5A59877D6A42FA7AF1CD28488C1FA0A2D5D57551A68A6479A8FFA785C2BD2D32
BB5F20CFCD667AB094E382D582BEAD23DF0A82CC481E2DF2F7B0CE752DB13736
3373816937321F70D50D6D61F24053B2D53F0D9433CD9F0A33FE83C973E627DD
0CCC64457AF3C439E130540FBCBC2D0CB410A2986BD4A7B118FC52BD298B1DE6
26D7348E9A27E721E0DB58AE8034A64BE77A35CA8567EE7B87B270052843D6B4
46C3B8817FF88202F88F36C41EE1C42B5BE295014645895872580E379881BE7C
CD90FFDA7BB3B40A6386A75CC6DC32B110F005A191549DF2F43E7D52E442E8A7
945D1DF17FA4A20F18140F4C14D8719DE497FC97A9D171AEC4C9FF966EB2A72B
35A074D10C98256868B461E056C6A78047ACD0F86DDAA2DE1EF3C6CA054ED739
43131131ECEE2A39FAE6EE293844EEDE173452C0642746FD2A9EC08ECC3F08B5
6E85648F42FC8573EAB04A3356958455286C1A02208B0355D14C218D571C3EB1
A050306F1A20763850EFFC345954EBE8DFE4FE17D296ECD8B322F8192430635B
74CA881353E4CE103BADA0E97277556A4C1C5172E6D0D74FF4308739F8C6EC14
3C647C529D8FBB014A31BCF1B6DC70502E3DF760580C06138C1832670A289060
DE4202AF887F0170538A24AAF1B52C747AF180B5296ABA4A94962889ADC7DDAE
3704E8E399575EF2ECAAC7649193843D694E6CA59318C013A681B87B3FDA2CC3
472D6D40775CD82E40FD770691FB6A28091D0C6088D01C99BB01C54605A556A6
01887AD5D4E49663A5CA73CA347E27BC49C7DBD28DDB3FCE19BDE36680C8AD10
A56C33C4B06DCFF17C02E31E24F08D2A07B4F53B9FAD6199644165A2747A198D
86A0322C021122E962CD756DE48DA93798FBDD034F41A2086C597E0B679C0D5F
E02E8C8A198053748E474826A0F6698C532EA7708BA68FC2FB7A553605C3A5C9
FA82E6656CFE6D2A1A6847EF5AA78B7ED95B2BFD80F53A8C60ECCB266669B89D
275EFFE5BE1D7FB787B45979E878C00247A2592A8DF2B8896A62B08BA34328FE
DC05A2EE1D38F2EA5858472E625F74FE3D6DE742A698723BDC2F3251276FF58F
7529045CFA59BFE46E90DE9ED303BAAA11E1DD8A770D7E3CCB5524F6275E2E37
512DF3E9BD1FA0531017D74B47E173553F7727CAB5EA16F3B8AB092BC46D3D72
DBF4A0960790485372B2196510E4F1802B93E6208D6555416F71253007B8C2A6
733B8906BC8E4D0B88323556BC8C5FCCEABE65C338BA74791FCBBF22CCA16ABF
8B08A5578EFC3CA2B4A21EE551AB331DA32D114A58F8E53D6DD9349799027486
377C130B1E82CEDF785AF638C513DFFDA29CDC5B778E34870D52D97A6287BFCC
2281E47337DCAA2F7CFB0AC0026384B574804332A593AC927B1B877525642802
84EE6D2B646C87AE283E6F3B633646E563EA6097B8816B764189B048FE64C083
6B09C674417421724A6E83151BBF93BDCC6AA2205EFF87FE0EC49C6E1228CF4A
BE44BB355FF00A1105C0C78E420FAF4970AEBD38FEF83F09F98531BB100E1685
461CAFCD695FB966CF0FDDBFDD3D9A70063221C5F95FA1E8E2CD3FBD3C82D585
4D9A98E98E2B1DD10F21A0FAFC4A64C84DEBA9B99F064C64FD6B67380D65A350
B9486CD95B41460A284B639F70190E286DB283E949A747F2B0EBCB16B8246556
0BD255F1947F05187DB80FC952418014E909E2AE00EC6422671A3381D8039D07
BDF69F6AB567ED977E8B5AD928F4417DAE6E95576C7F7A2A25823683BD51D676
48F058BB71888A8AEB1272D19165E0D746ECEC4B91C16CAC3F1F13C03AD805AA
74F65566957680618C923BABB7CB689B219C91938C746FFB2F105326012D6C3F
002D379F29E596AC7033C89671E11D3F168D1CD6842962F0C90F89A85BC37B8C
1074256AB824BB1EDF1A798C8FCF94EE42BB85F8DA693989733024558730115B
4AF2D9DF46E1E5B36E223885BB7E1E8B28BEFEC4982820B11EA1FFAD6406F59A
25291292BFF6E9F65FEA010BDFE5F57243AB56DEE14A6856E16475FDE32B8D9A
269E9FDA641FBD4D0508C0EA0F178734522F89E6B7EACE425EA592037819AA45
058D48936C193B202FB9C5CFBABEDDD2E9AE3C91030D7E1AC115C39AA1054652
2A5801B49E1AEBA592BABA2DB6F3D663808C2BB6B3BE5B62FECF211FE45E3BD2
C4FED7A0B4310B67DB13666C4A98A9AB68AFF6615EA2D5A5490DC6A5CD8C1BF7
3F852A5854CD9DD02FBBCB477E9E059490F641DAE05D5CAA90ADCA42B4990420
7C0D5E50634A4D5304A2E6AC9C996A67D046491EAA7CFED2E3C24B3BE9F866BD
95E1C109585F829065A21A9E62C2C397B0D86FF2BC399B6ACBA84002ECBE96AA
5FE86BC1960E5248B957A4A5B85147A411D861A0076446786FC21962B0FFB2B8
8609E8883245CE402700E4F6522AC928BB0867AA56FADF3E6B321F42CEB4203F
46DD2D9DAF8F90CF4F43A85588862F69FDADB27871E711B7F00F668A0240AC9A
7D1794C9051D6B32A98009CAE553A3979A49AB33CD381FCD7C89E9AE387D2AB6
0D7A00A2D1EE3E7F37E666393542472014F905D301165BFABD17AB334E600536
FA078EF33485035BD4C473812483A6F41A24D9B74A0FE9314AA6560B40F9D537
C84AEE95ADCB66773D939844409833041E5F3997C357ABD25D6B8D4069B10D1F
BFC41CC8DDE513DEA3AC030FB1A945F7660FD9E0E78D2F285EFE30BC461BFB2F
0B4E61D62BF54A918F87E3FA1A4B633CB6598F3F77F3F0723B3CED8B043E45CD
7CF6EA2746B4240DC02A3564071F527443FA3C4C36A1EAB57E3D94961A532673
19F6515B36EF969FCC5A5E1947A1A80642E73431449159694228F4D9FB4D8331
DDBF4C141FCFE9A952B5EEEA31241D894B5160828C385E9F697EEE3A99077EAD
370219B155881499C2E0AA6FE70409F63B078779257BAC70A63522FC02647703
2C02E2E65763B595EDDE8F720094679681E59E2FCF16796C192CFCFDF2173726
86B1FEEAC57C32764D531E3B5CD8D173F0AF52C20A9A19C16BD126202B3AD480
21700C552CF4A53AA408FC266E193CEFA8B56FBACBF689EA049C88A7445B0598
8AA25334553DE9FC4652ADF65179AAC3ACD6F03661719C67527EB25CCD932828
3C9F0A17150E9B6CECE72D7992DC7BC4F5D001F82EBFBE58CFD5256C297C5927
FD0E40C8A0875C215AFA1F1B9709B6140D5362D450F5CEF063234FDCF00C43F6
C605BFBFABC3AADE4027CB1675AD8F922E936D756C67AFA12306C2849432EB2D
F4DB3A3C697E87D6750075FA80955ABB204FF5E5CF8EA78FA56921A7C774A7B6
D8F137FD474FE4CEBFC743E80CAEB1301FC99A84DDE5D5FF995D6BF6CC570B0B
EF80BF541E37E231E5C7AEA4B048911B66840F8125BFAD4A52A6418A0BF5C9C9
81324FC6225A5F1F1E0D08C74A25DA8885EE45B5E929CB01DFC65D7197C0082C
5C81417464E4B8458F4383BD1092EABF8F201CFC8DE8CDB14340685DC6AB54A6
FFAD5B2B75AADA0E5E91B847BA7A745A855C8406BB4248C47CCC4B5794F29E91
05C30D5D902382BEE6419F97D458946510DF1BFE12041F7057EF3559AE955255
FD1AEDD2A23B52223A939A99E74EE78C947F5572678584240B7FBB85EEC7FBD3
DF3C37423E38CD154B5112D6BDD8A1422BC684ECE45EB2C644DAB026162AA610
6772DBD519190B8005286125B915C85425BE30C0F8B6A591D0AC6F9C023CABDC
ACB793B08A3D7CFBD4C73BA328432764155AEBD1857DE9FAA86D21C5FC993DB0
03E394FFBA8E3955D2E2713A61BB32E47C3B2F789631CCF8F588E224797CBA4F
2AAE58BC0407DADA69887BC353414BBEC9B19CF23B174415EEBCAD0BFF75CBCD
814C6BEA492820F9D3EFA2E077F602CF88EC90396BE87DCD273C56D4C98D9A97
7AD9E29C60C3A597308B26FD5870E26ECA896D30E29A606541531BDC8131D561
6E4521BA0830264E48B488CA83C5D50DCFD3E5D889364A5E0D7FAC2816992764
A3513FAC083AE7AA570EF7C45C3E783795752D18DE0D665D41B7506AF0D775F3
3B9376B8D0F6B56E6DF15612150D27E9ED9A368B247FB401F0485030208510C4
0C7E13CC3072FB5F4B5C9BCE2FF2EA011899DCB2297235F382C556B97685A8D3
AE3DF4E4FBF6B3616BBEA7CD5BFA705F726572E9C1A3165039E27EAD9E525939
32214353ABFEB2EB7B23CBAC7614A8526D98413F780BB5656E54F184742092ED
69B1B7C8EE9F34534693647F2F10CEBA33CAB08B3864D253027691DE735421D8
C9CDA8D4E747C1F2136701A63449E752F8069356B30A6056497FD399311E52D7
E89BA9EABF1532758919AA3C41578874A1EAC4AAD8D34BC95BB203F77C3704A3
5E8E1F21D767404FB149DB9F05AF35FD99DE7064B37869057B90E08CE0F0962F
5DA0513E4793D86888009FC4816663D5FD3F504B8EFA08A01985B7770A01EC20
BA2E154EA46CD5ABC742D19D85A5A861AC3735A21B81FA7D918815383B9466E2
A941DAE22EFBE5D066D373872E66788A17E10B2C43FC3AF99C4B00B7F05F03B4
90827F69EC5770DD64E1659124925F7CE91FFD0B3E9599F44C42CA0B74896203
1E13125552F52773178096AB3437BE9F5FDEB08F94BEC9097DCAA0C5F9EF4256
8775D895B394852E70518DD7D873BB9EF09C762C159637E4C4E0DE44C554E3B3
44F148CDE0A08741A7ED2CA3B6DF37A20D84A757050A202D8BCA157062123072
2F80314CEA16D66CB1242762BD135BE3287CDF8CEED4CA1B08424957326A884D
C594715313CDBA2D94A8232E51F5654A96D91B8DF2412DFDB2B9E42CCD7974DF
83D6BD4150B7892E71878648412AA945F50C7D7967A6E415B89683793C440392
C4EBF5D6A817A976EDA41B50516DE62F9448F555EEC43D173E336332BB140726
BEA01F6ECE539A983466DDC63C31E35E664764C3FA8AADDC6D0BCBEE09A2E152
D05390F9FFFC125DB8AB11B2337F60DA6424EFCF9048AD640B3D19691BD3E2A6
A38C505EA393BAFAB29CBA17606C8C94E25AC2494B2A23E1FF8617A6EABC6CE4
CFAED0E168E905E77915DA40BF4A81C4F87557858DE95E0672723C45B538B567
E0A1F4A3CB2C7CA24D9D6890ACC64DA90F028294CFE44C392357E209F44CC3F5
C8906125B0EAF2DE13D9D2B5C458A4BB633B73A0BDA4F347CEF760D46F41DE15
7419F296B85AA7F566F6A624A2949B95E57858A5BD192A7B58FF70F988DBC40F
3A4FCE7A438E91294AC03345828932C31C02DE96E70960C63E0436EF688DCCE0
CB4B0CA2833A2C2DA82C46981A52918BD1CD635B464BF39CB049C21F6F187FFD
AB97F67876C0C83F8B107223C1CE25E8E3A193CE2036CAAA5F55E2BC9F170BDD
884AB20FF253E8D195DFC393D50BDCB56302057E41CDCE41167BB33ECE6E0DBE
49C86C838811DD48C748A28B371CF1199BAD98158C87891E5B89F1B46B45ACF4
96FBDE6E243A4D2F1A71CF630078EA2FB74686007166B67CB9DD9C4F051CA6ED
0FA1892778D98AEBD3D0DE49C5819F7D493317E0799D4C9261141F0D27AED22B
58889DB20DA9791CC67B6A63DF2B8A19BC09AECB089D060BDBBC67CEE1847CF6
13BB1385C37A7BC3F8918CA75CE28763E4E47D48C38AD4D66043916AF2952C19
648AC40AC2D5D17D2CE8FF4F2E61ABE8DE941E44435C503B6FA16CD2C46285C7
E9ECC9B7537C6492076432FAD79A55E0CC42DC5D9667110E8D0BB41BCCF23A70
3C2F320530D1109CA88B81E1BB2791449AC073A760BA0413A62AA16757CB2C66
89FCD40F25ED1C68C8880C9E803E40906545CB80B363DEFD427C9CA679FB2D4C
1D7AA84807488E36D0A9E9EE1A94FB8A0D4426C0576B5B9EB823E0A006B60DC8
009FB47C6F1979561EF9C6A19A4866CC083B5C1508C97404F8EEFD268B3ABCD8
79605C02CA02057B9B800396E12736B727D7436858CFF1C868ADC658F5551629
59856A4D4136AF242D667AD6F7D05F1E88E6F7EAAD33C7178BE83C08AD158AE3
ACCE843E214F43655BAA4AF481315317E9EAEB35072D21F0BD07DF280EB84C72
B74C17F854E40AE6FE082A9E718969FEFC23BA0C40F72DC28EC209553DE6D8EF
178919C2D30BB17A3EEE598AD1334DB756D0526BC337F785EBEF3EAEF181F069
ABAA9E9641564269F4E91CF44FB1CC44DED85109F343D13CA2304FD9EEF5E66D
56A91DD2058FB96670101916481D2CA8F6C381C02F3AAA17C47D7605C38A376F
D4104BC54EBE523E78787BD660631CD34D92699A6F07BCEF6203DC0C43262245
1B1E0E325DE9588D48211A2D3239B2F1A9E9FD206E48D224278E544F209C8FB8
950FB71100D08EB6C7FAE8EEF89D0C5ACB62C706084841B44798DC91BE70EBE3
586700704EAA6FE188082F5178DAEBC1CE52CC8015219A183D60AC2E7E91FBA7
4EB91F99DB775A5287E8800C21F851742071E9725A6B7D7B2C037B9E3C45C99A
2A029AB7D22F2632BE264B75783E0E6AA294BBB73124945038AD565541863AC4
F26ACCACBE926FE74C34B10BEC7D7D6337F7270C7818D70F4E0153468CEB1D4D
AB43DDCC6F12F3B0DC1B06658CD86A1938275DFB724DEA3448034B8A0A17338D
886452414D88CF3E688D6095C1CB3F56FC098B742BA58CE6EE83C602EBB78AED
5BEFAE55655D6A7391D978E206079D37379E9EC8F8C9FD4F411A59BC213E991E
12DE0CF1CEBB3B997068416B4EDEA4403A058189C10DE9862F79555A37287C87
AF43685F2CC76FD9E6A449AF38A943AA595571AF6E9A6105B1CEFD6195E1F85C
0A850442E4B4E9AA024F6FE19B3AECA10AB3FCB20788941F71CE945E85782A5F
BF65AB82B68A20DA2732CE8F2F63FA195A30190B6A195A48EF148AAD7B8FB020
345C4B016CBFDCA2B95A767ED689665B47CD4C0A523C9A23AD9BA1FECECB891F
9600D381148D106C2D6C2C871EC15542BED72618292685F91FC1C2043C10C692
074F7EA6942FFAF7B22C69DD3FE920A4E3B843A3BE50A2B66AC64EEF51A23177
8DC0963B51E6AAC2E6165852A69AF3A7AB865E4E8E0079D3D4A5F620D4A5040E
9E17A3DAD9E8CDDB5309DB1D9B76651332407F87CA78D53C950DAE477FB8826F
7F17E5F5D565D752CFED1D9C1EE62299F8EF5C607255AFC5AC9B33390C463082
6C278601437CB5E8CFEF29B7C00EE7E6B454A2A56F94ED8B8AAC85FB2A5C3C71
F35BFBC4290A4A2E7D56FB69DB29DD6DC7B76D38EB802590426C66703B8E68C1
E823261743FE00F51B32EEACB7C8CD1335261A7B4F717D28F7A930DE935CF253
34F925B95F3B19D6873151D621E5D60815DABD547075A2EFBC3DC482A9A09F37
AA76794143561094B7D2DB2C726BC495C0856797724D1108FB16A4D8442B0FB2
6D6829B81FB57E7D8A13C3435A893B3DA6CE37353B3A882F01D0AFF44886E270
8D62B8CAB5D7F7F24E6CC3816626E4EB46E45272BC26423561B921CBC8B0DA9E
C5AEA9B9A133A215927F285BC52B6DB3238915D82A4E6830A2DE1F1C26FCA9E8
C288ED82D5260035F7A6F289F6D0331C135B6EC34456B67947CB31336E00CAEB
4D882911B37656ABEA6F89900CEA53249802601877DB963C21D446331035508A
7090EE72B34C4597A29DEF0189985F9E0A96FA28A20B8086AE5F7491047CA150
4A1ED84B2F8CA5A7BE3414F4400AFF60680C04E9C291C45841BF39FCC88ADAA1
8181595D3528BD702306D841984BC0F800E17BE3060B181648FFF90B9CF8D20C
411EBD84396F11F12D4374A27846FC8FD384A33E89C4F37199401F823F09E633
A7E81853EB60534DA0C0BEABA2DAC00384659CB894CB33C8FDFD8F0706566162
1CAD5459B7C06B803605D548CE8002DBDB9F6AD28699B285DFB300FD259833BD
F290B46965D0DC97356574AA5D5E8DE3B310E8DE486410080424E24FC4F4AD05
E596E4B48F3948CAF874C891D7C49EDDC693F391B6D6C4AADED84AF5BCF2F7D8
D4B3E4E647906BC9623CC98BDD02C71CA459ED087C63363F8607F78D995E8005
C79B720BEDD11CD6621FA75C0824467F10BB81D7440F6281FE80D8DEB65AD73C
5A51778BBA6F74F41DB01B89833E1DD1FC96506F68E190CA7B2F8851BAA40E17
98E933377323F4D148D1222719BC1FBFE5B9C330D6AFBEC7C7A4BF4DF6D6E0B0
E1EE3BEEA8D10060019061A856495B6EE58BAB5A864C31B67F0EF65AB2A41159
75F2764FA3F5C5B9E5DD2A7A4E7EA0B225810518966E74385F87C5A5A6B6CC42
A308E8A23BB25185C324E828CE70A3238C9EC06A65C24B83D21C82A293C0175C
49127704562A577C5D17215988EFEAE28D02265132DB4F0EE6B60C60868491EB
6C15D919835D234E27B0C7C8BC0649DE761EC30372BE73AAE127B84C6E87BB80
6516B71B3BF4337246366E2D2C2867893E9CBE62CAAF0FDA7AC6B35DB49FEB60
FC6A4F437A43543EF44A444B10E4E58F10535E684A67D33B8FDC4359FAA7CC36
B0E5485290E6DF4302AD807EAAF4C32A475A0A02CA53868EA127662941844B2B
5304AEDBFD312E705ADBF4BA7072066DD9E0A4B3475C952F44334C3201381D89
4C59239EEA61BBF68352DD494FCB551ECF193A9B92E75E1E0A9B2969963BF89D
6D1F8405DDA6BA87AC9A1305C8B6F792ECC926DDF4228E79D6F129643B0DB241
876E1611DDD3B36BC5A76EA0B5850D96E9775FBADAA395314E720A1352C7DE9C
258AF2AA326C776907AAB111C2A9852201801EB7C3F2D6DABDBF540AC604B6DE
6839C30668B86B20D6756C3DC22423D8D6AAD376592306D8BC3083AD0787D02A
53EC210438BDC3EC1BC8ACF1A1966BB85CE978DCBBAEDB706A02CBD6260F3A6D
1F1C825218777F755A7EA6F3FF455909B8313F6C9FFCC23D27E4C8D85929B1B8
2407BF63177DB1D93BC61828A3B18BD9F23065CDD9B6BF1D7D262A8C50F1C6C9
40142373B0928607FB0656AEB9DA55B925E37FB1B118C9EA2FECFB287F60AF99
9E9435DEA9F06B07C09098875CB9065A66C06A21B4654674DE2595892796FD9A
BCAD57C544F30BCD3E26E235C04EB5AB59D4888C0F9420491591110B3CB3BE5D
C12854069640B04ED3F8D50C9CE54F5114718475B9FA44B7B0E8DE906E4E57E7
3558B51C3072663DC751BE46D67E7B89D2B63B8D8E570FA6115A4E2CE55B6CB8
3AF61D7271CFD1660B5524F1EF85A138C33AD655444E1A9A4486DCD79077621A
D07EDFA878C5D0490BC79F65939B07A261F44F0E326B1699DFF04928DBA2A125
FBEFF446B3453DB91BBDEE272105516388DB7081BCEA22EE4778A45B2EFDC908
B2E9291D8DF3CC9B34D785FF5D790F644321D538D31B7E03A892CC716CFA31D4
AEA810D93D5FC02FA8D267E029B5DC8B4B8784BA3C45D326816059887894E9B9
1086A54D30E7B4C7C922510E7E16B850400B0E5E52163B436797DD8A7A4BF583
AD81F225963AC130F85D38938AC4AF31C8B5599EC236692775A0C33BF0BB26D0
0B4D6140FBAB2090EE82EBEBF4FE898DAAE79F6F3411B09316E30F2997836485
9980860CDE6DE683209868A88ECF3F3189B1CA4826E5D2EE4BFB120CC5806830
0D0D1390FB1E659630ABEB4389D8E7FCE5CF600439720040A982EDE38A266EFC
F1593A158C80BFEE200C9012C6B763746FC00566CC364D7372E9BB7F5062AD46
B28720DC5617C8897A0DD6D29E8CB18718CA5932F2AF76179DD6C2C298EB1CAB
4286BAEA604CA8129575F45562C30E9FC27E291BFC9EE26110A05EB542E70CC9
14CC6868035329A86E5F69938EC30122B787C729E62F9DDB9111271F846F8992
F58CA5B4968F12A41631A15DC7CF7878A90AE078CB5D29CC06E1F30F35510038
CA8B816F47F5DD89D26297B5E962BBCEBC76CD806A363B820D857B334F86C5D0
218356F72E5EB2ED578B87DA839FF440E351AEF4CAC7EA67C24782BDC5C042C3
A534002CB86B39201C81C3C42AF7C517DE615527D5C9FF70BF4C67DDA24D17BF
9BEBD68CFB92F3AD7B3A6A4683F5662EA0A800E17D5F0F2B56F199AE9D02097B
C6789536A8A5457380AE35CD0A73EB2C0B5F039D979014516E8316ACA24355A4
C9A5B26665924BB77E084C8204E9B400EED6DCFDC639DB7D0B030C102C164AC7
DD062129C2C34B83048BD987123C1C7AF3F2F643AC5DEA7EF1601A0B8568CB1D
36A998AD0787CFE0DF70406F9ADBAD0F874673B0D645E6E940D88394B544AFBC
D897B0B4D9ED4692D0BAA04D5B5CE7EBD8C1BEECEDB8499E4F23EBE954124960
F2F7EB82080323552EFA9D4AC8EE9AB46E4D4C34E74A0573E94404694D39E05F
5E2A4E968A32E90600C47A736ABF3FB1A10141C29A2B6DB1274DB3528D61CE11
3953908A6081560C97F963A67A1DF651B7F29495DD9102C978565732F9064472
A63F244712FCF4866BC5DF722EAE2F04935CEDEC4B00EC6D9CD7C6BC0CA62D93
5FAC45A5985AA32671714041F8B48B98CAC8EFE5A1784A8DAC8BC1043C0EAD6A
91D4EF8207ED057AC1D8F2C6A1C8E3BAFCFFECBE3B69A6968E93B58BF008EA19
D190AD41ED5845F2409189DCF124E43489AD28151652DC5A25FBB51203819201
BAE584EBFDD44D54AA899ECE4676D8A3D020053BD119A88218FFD7A758D5AB9E
DB2478C42CA0738626FDE12DDBA4EBAC38B6C8E6C28A51AC005453B3E52A6056
495ADBB509B488E6DDDA5151EAA66D60C88EC7BB1C9CD653A87EF84A867F5678
202E7087DDDEC8229B9AD5C31929FB6A0C1DC638907B8D753D4CE4B3E685AB08
1862EAA95B05424D305A849123BCA3DDFA0ADC222FFA99320993F278E4BC5FF4
BF8D4544BF8EC765D62C4ACB316E47340565A3437773F87E10E2F874979273E2
E4812B9F3AEA4646EF9EB5C1CAB5C128F590890CEE223FBEB60CE9BB468E696C
4F78EB753F58ADE28067351018149151ECAAFB720C660FDA50FEB0438DDD844B
CF56A909A9BE6DD5F206058AB5BA80E83474596F6F4811709D0D211D97068B0C
EE4F7BCDF0CB147B3959A2A254B508C25C05E141C67D81FCEAD49D1FC636F75A
DC40D3981A117B2B8DE2AB62134A5D30A9EC06C04B87E73B94B84FCC49B3496F
864817089B6FD7294945C271A359798AD5106186C499979B4D5C56718E67FB94
F4807CC3AABEF8088D3E720F50011A17A4977619A755A625CEB493B2D4A04BF2
04350268B02CA73CA7DBE669BF0DC98FE66E258BBD7AA6E6444719CB9F51207C
2F962B4D781697061E97C73AB404CC260249286159F84EF5720D250BD7D3666F
955EBFA7ADE8F9E31172331255B76819D7E3548148CF0E313E98C9764BF02BE6
04496FA3351F3B9E89EBFB8AD6668EBB49A71BB9415BA6918C451FF14D73F5CF
00FD8689E9AD31A807467E7E26977872E3EC62E7C2ACE0045EBA716F36DD2BA9
2B2CC435FAFCED1496246BB85A12E6842E3869BC3AD39D35624B510C09A2BB47
9CC2AD467B0D4BC0787700E45DB101633B640354B3AA67F18C0E3B1D343A103E
E7A17BD32B2B8944329C1850586A879952F0C1B42D086AABC5CF06BEA11FD869
F3B16C42918C5CFFC8F22A4BFE41FDDB636FAA9044CA998E55CD2720646E5859
67D0C9C35E3BCFB340552FC5CA71983398F65F7DC2A3202681CEB500E4DD2C0B
91B1FA5944D650BD084B82497DFC1EB679B58127632933250DAAA693D0B7E0CC
255B81C42A13C996EC5EB4C25CC47E05CE3B38BB88795F7777D23CEFE1BC7C32
48B4FD39604A354E7BCA3192131DB14E5E4C2271A3E837A1B156FDDD2459631A
423E830E68193A9381209CB6DB0FC94AD70B591CA788E5E90F2D82E15A5C938C
F61A1FEC2813591744B7ECB4E0CAC38415444D391AC53334A8A44F90BD73E742
C673B4F42224E257BA0403DCF7A3DE2FAAAF4F78C32F430AD5976978E32432F8

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 74587157 18646788 1000 600 600 (montage.dvi)
@start /Fa 134[44 4[32 33 33 2[42 46 69 23 2[23 3[37
3[42 9[85 3[46 61 1[57 2[76 52 2[30 62 1[54 1[63 60 59
62 7[42 1[42 42 42 42 42 42 42 42 1[23 46[{}34 83.022
/CMR10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
% dvips-unknown
statusdict /setpageparams known { hsize vsize 0 1 statusdict begin {
setpageparams } stopped end } { true } ifelse { statusdict /setpage known
{ hsize vsize 1 statusdict begin { setpage } stopped pop end } if } if
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-600 -600 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -600 -600 a -600 -600 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 -600 a -600
-600 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -600 -600 a -600 -600 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 -600 a
%%HiResBoundingBox: 0 0 1138.10974pt 284.52744pt

%%PageBoundingBox: 0 0 1134 284
%%HiResPageBoundingBox: 0 0 1133.85503 283.46375
%%BeginPageSetup
<< /PageSize [1133.85503 283.46375] >> setpagedevice
0 0 bop
%%EndPageSetup
 0 TeXcolorgray
0 TeXcolorgray -600 1762 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray   gsave  1. .setopacityalpha
 0.8 SLW 0.75  setgray 0.0 0.0 1138.10974 284.52744 0.0 0.0 28.45274
abs 28.45274 abs 1 10 { 0  setgray } 8.0 /NimbusSanL-Regu findfont
8.0 scalefont setfont Grid grestore  end


@endspecial -600 1762 a
tx@Dict begin  tx@NodeDict begin {312.98018 199.1692 } false /N@BS2
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {398.33841 199.1692 } false /N@BS3
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600
1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {312.98018 113.81097 } false /N@BS4
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {398.33841 113.81097 } false /N@BS5
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762
a -600 1762 a
tx@Dict begin  tx@NodeDict begin {455.2439 199.1692 } false /N@M4 10
{InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {398.33841 256.07469 } false /N@M1
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600
1762 a
tx@Dict begin  tx@NodeDict begin {312.98018 56.90549 } false /N@M3
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {256.07469 113.81097 } false /N@M2
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762
a
tx@Dict begin  tx@NodeDict begin {512.14938 113.81097 } false /N@FocLens
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {512.14938 113.81097 } false /N@FocLens
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {625.96036 113.81097 } false /N@FocLens2
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600
1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {711.31859 113.81097 } false /N@ZoomLens
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {753.9977 113.81097 } false /N@CAM
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762
a -600 1762 a
tx@Dict begin  tx@NodeDict begin {85.35823 199.1692 } false /N@FS 10
{InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {113.81097 199.1692 } false /N@PH
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600
1762 a
tx@Dict begin  tx@NodeDict begin {108.1205 199.1692 } false /N@L1 10
{InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {199.1692 199.1692 } false /N@BS1
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762
a
tx@Dict begin  tx@NodeDict begin {199.1692 56.90549 } false /N@MILas
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {170.71646 199.1692 } false /N@Filter
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {142.26372 56.90549 } false /N@Laser
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600
1762 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@FS known { /N@FS load GetCenter } { 0 0 } ifelse end 28.45274 199.1692
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup
1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1
ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha
cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n 1 sub
def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha
y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } repeat
}{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub
ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop
} repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def
n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave
0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin 0
 setlinecap stroke  grestore end
 
@endspecial -600 1762
a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {79.66776 199.1692 } false /N@OE@@1A
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {82.51277 199.1692 } false /N@OE@@1B
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600
1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /N@OE@@1A @GetCenter /N@OE@@1B @GetCenter
@ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac -1 def
} if  end  end
 -600 1762
a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@@x 0.  0.5 mul def /@@y 0.  0.5
mul def  end  end
 -600 1762 a -600 1762 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@1A /N@OE@@1B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -600 1762 a -600
1762 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@1A
known { /N@OE@@1A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@1B known { /N@OE@@1B load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def /dy YB
YA sub def /angle dy dx Atan def XA tx@OptexpDict begin  @@x0 neg @@x
sub  end 1 sub angle cos mul add YA tx@OptexpDict begin  @@x0 neg @@x
sub  end 1 sub angle sin mul add   28.45274 mul exch 28.45274 mul exch
 } false /N@temp@nlputA 10 {InitPnode } /NodeScale {} def NewNode end
 end
 -600 1762 a -600 1762
a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@1A
known { /N@OE@@1A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@1B known { /N@OE@@1B load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def /dy YB
YA sub def /angle dy dx Atan def XA tx@OptexpDict begin  @@x0 neg @@x
sub  end 1 add angle cos mul add YA tx@OptexpDict begin  @@x0 neg @@x
sub  end 1 add angle sin mul add   28.45274 mul exch 28.45274 mul exch
 } false /N@temp@nlputB 10 {InitPnode } /NodeScale {} def NewNode end
 end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputA
known { /N@temp@nlputA load GetCenter } { 0 0 } ifelse end } false
/N@@@A 10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputB
known { /N@temp@nlputB load GetCenter } { 0 0 } ifelse end } false
/N@@@B 10 {InitPnode } /NodeScale {} def NewNode end  end
 -600
1762 a -600 1762 a
tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 -600 1762
a -600 1762 a
tx@Dict begin NAngle  RotBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -600 1762 a -600
1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@1Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@1Rotref
known { /N@OE@@1Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -600 1762 a -600 1762
a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@1Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin tx@NodeDict begin /NodeScale {} def
end [ {@@x0 @@x sub 0} {0 1} @@y0 @@y sub @@y0 @@y add trans {PlainIfc}
@@x 0 eq not { {@@x0 @@x add 0} {0 1} @@y0 @@y sub @@y0 @@y add trans
{PlainIfc} } if [1.5]  false true false (OE@@1) { 28.45274 mul exch
28.45274 mul exch  } NewOptexpComp  end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin OE@@1 begin 4 dict dup /source exch
def begin /beamangle 0 def /beamdiv 10 def end source length 0 eq {
currentdict /source undef } if end  end  end
 -600
1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@1Center
@GetCenter 0.0 0.0 0.  180.  add matrix rotate dtransform VecAdd  28.45274
div exch 28.45274 div exch   end  28.45274 mul exch 28.45274 mul exch
 } false /N@OE@@1Label 10 {InitPnode } /NodeScale {} def NewNode end
 end
 -600 1762 a -600 1762 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -600 1762
a -600 1762 a
tx@Dict begin  PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin RotEnd  end
 -600 1762 a -600
1762 a
tx@Dict begin PutEnd  end
 -600 1762 a @beginspecial @setspecial
  tx@Dict begin STP newpath end
 
@endspecial
-600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@1Rotref
@GetCenter 2 copy /N@OE@@1A @GetCenter 0.  0.   28.45274 mul exch 28.45274
mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@1TrefA 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@1Rotref
@GetCenter 2 copy /N@OE@@1B @GetCenter 0.  0.   28.45274 mul exch 28.45274
mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@1TrefB 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -600 1762 a -600
1762 a
tx@Dict begin tx@OptexpDict begin  (1) (N) (OE@@1) CorrectDipoleIfc
 end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin  (OE@SRC) (OE@@1) CompAlias  end
 end
 -600 1762 a -600 1762
a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@FS
known { /N@FS load GetCenter } { 0 0 } ifelse end } false /N@OE@@2A
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@PH
known { /N@PH load GetCenter } { 0 0 } ifelse end } false /N@OE@@2B
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600
1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /N@OE@@2A @GetCenter /N@OE@@2B @GetCenter
@ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac -1 def
} if  end  end
 -600 1762
a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@@y 1.  0.5 mul def end  end
 -600 1762 a -600 1762 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@2A /N@OE@@2B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -600 1762 a -600
1762 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin /t 0. def LPut end PutBegin  end
 -600 1762 a -600 1762
a
tx@Dict begin NAngle  RotBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@2Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -600
1762 a -600 1762 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@2Rotref
known { /N@OE@@2Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@2Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -600 1762
a -600 1762 a
tx@Dict begin tx@OptexpDict begin tx@NodeDict begin /NodeScale {} def
end [ {-1e-4 0} {0 1} @@y0 @@y sub @@y0 @@y add trans {PlainIfc} {0
0} {0 1} 0.1  -0.5 mul dup neg trans {PlainIfc} {1e-4 0} {0 1} @@y0
@@y sub @@y0 @@y add trans {PlainIfc} [1.5]  false true false (OE@@2)
{ 28.45274 mul exch 28.45274 mul exch  } NewOptexpComp  end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@2Center
@GetCenter 0.0 22.76227 180.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@2Label 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -600 1762 a -600
1762 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  PutEnd  end
 -600 1762 a -600 1762
a
tx@Dict begin RotEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@2Rotref
@GetCenter 2 copy /N@OE@@2A @GetCenter 0.  0.   28.45274 mul exch 28.45274
mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@2TrefA 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -600
1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@2Rotref
@GetCenter 2 copy /N@OE@@2B @GetCenter 0.  0.   28.45274 mul exch 28.45274
mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@2TrefB 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin  (1) (N) (OE@@2) CorrectDipoleIfc
 end  end
 -600 1762
a -600 1762 a
tx@Dict begin tx@OptexpDict begin  (OE@NPH0) (OE@@2) CompAlias  end
 end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -600 1762 a -600
1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@PH
known { /N@PH load GetCenter } { 0 0 } ifelse end } false /N@OE@@3A
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@L1
known { /N@L1 load GetCenter } { 0 0 } ifelse end } false /N@OE@@3B
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762
a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /N@OE@@3A @GetCenter /N@OE@@3B @GetCenter
@ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac -1 def
} if  end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@@y 1.  0.5 mul def /@@x 1. 1. 
0.5 mul capHeight   1. 1.  0.5 mul capHeight  add  0.5 mul def  end
 end
 -600
1762 a -600 1762 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@3A /N@OE@@3B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -600 1762 a -600 1762 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 1762
a -600 1762 a
tx@Dict begin  tx@NodeDict begin /t 1. def LPut end PutBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin NAngle  RotBegin  end
 -600 1762 a -600
1762 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@3Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762
a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@3Rotref
known { /N@OE@@3Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@3Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin tx@NodeDict begin /NodeScale {} def
end [ {@@x neg 0} {1.  0} 1.  -0.5 mul dup neg trans {CurvedIfc} {@@x
0} {1.  neg 0} 1.  -0.5 mul dup neg trans {CurvedIfc} [1.5]  false
true false (OE@@3) { 28.45274 mul exch 28.45274 mul exch  } NewOptexpComp
 end  end
 -600
1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@3Center
@GetCenter 0.0 28.45274 180.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@3Label 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -600 1762 a -600 1762 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -600 1762
a -600 1762 a
tx@Dict begin  PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin RotEnd  end
 -600 1762 a -600
1762 a
tx@Dict begin PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@3Rotref
@GetCenter 2 copy /N@OE@@3A @GetCenter 0.  0.   28.45274 mul exch 28.45274
mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@3TrefA 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -600 1762 a -600 1762
a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@3Rotref
@GetCenter 2 copy /N@OE@@3B @GetCenter 0.  0.   28.45274 mul exch 28.45274
mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@3TrefB 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin  (1) (N) (OE@@3) CorrectDipoleIfc
 end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin  (OE@NL0) (OE@@3) CompAlias  end
 end
 -600
1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@L1
known { /N@L1 load GetCenter } { 0 0 } ifelse end } false /N@OE@@4A
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762
a -600 1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@Filter
known { /N@Filter load GetCenter } { 0 0 } ifelse end } false /N@OE@@4B
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 -600 1762 a -600
1762 a
tx@Dict begin tx@OptexpDict begin /N@OE@@4A @GetCenter /N@OE@@4B @GetCenter
@ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac -1 def
} if  end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@@y 1.  0.5 mul def  end  end
 -600 1762 a -600 1762
a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@4A /N@OE@@4B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -600 1762 a -600 1762 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin /t 0.4 def LPut end PutBegin  end
 -600
1762 a -600 1762 a
tx@Dict begin NAngle  RotBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -600 1762
a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@4Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@4Rotref
known { /N@OE@@4Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -600 1762 a -600
1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@4Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin tx@NodeDict begin /NodeScale {} def
end [ {@@x0 @@x sub 0} {0 1} @@y0 @@y sub @@y0 @@y add trans {PlainIfc}
@@x 0 eq not { {@@x0 @@x add 0} {0 1} @@y0 @@y sub @@y0 @@y add trans
{PlainIfc} } if [1.5]  false true false (OE@@4) { 28.45274 mul exch
28.45274 mul exch  } NewOptexpComp  end  end
 -600 1762 a -600 1762
a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@4Center
@GetCenter 0.0 34.1432 180.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@4Label 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -600 1762 a -600 1762 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  PutEnd  end
 -600
1762 a -600 1762 a
tx@Dict begin RotEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin PutEnd  end
 -600 1762
a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@4Rotref
@GetCenter 2 copy /N@OE@@4A @GetCenter 0.  0.   28.45274 mul exch 28.45274
mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@4TrefA 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@4Rotref
@GetCenter 2 copy /N@OE@@4B @GetCenter 0.  0.   28.45274 mul exch 28.45274
mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@4TrefB 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -600 1762 a -600
1762 a
tx@Dict begin tx@OptexpDict begin  (1) (N) (OE@@4) CorrectDipoleIfc
 end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin  (OE@NF0) (OE@@4) CompAlias  end
 end
 -600 1762 a -600 1762
a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@Filter
known { /N@Filter load GetCenter } { 0 0 } ifelse end } false /N@OE@@5A
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@BS1
known { /N@BS1 load GetCenter } { 0 0 } ifelse end } false /N@OE@@5B
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600
1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /N@OE@@5A @GetCenter /N@OE@@5B @GetCenter
@ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac -1 def
} if  end  end
 -600 1762
a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@@y 1.  0.5 mul def end  end
 -600 1762 a -600 1762 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@5A /N@OE@@5B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -600 1762 a -600
1762 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin /t 0. def LPut end PutBegin  end
 -600 1762 a -600 1762
a
tx@Dict begin NAngle  RotBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@5Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -600
1762 a -600 1762 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@5Rotref
known { /N@OE@@5Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@5Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -600 1762
a -600 1762 a
tx@Dict begin tx@OptexpDict begin tx@NodeDict begin /NodeScale {} def
end [ {-1e-4 0} {0 1} @@y0 @@y sub @@y0 @@y add trans {PlainIfc} {0
0} {0 1} 0.1  -0.5 mul dup neg trans {PlainIfc} {1e-4 0} {0 1} @@y0
@@y sub @@y0 @@y add trans {PlainIfc} [1.5]  false true false (OE@@5)
{ 28.45274 mul exch 28.45274 mul exch  } NewOptexpComp  end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@5Center
@GetCenter 0.0 22.76227 180.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@5Label 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -600 1762 a -600
1762 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  PutEnd  end
 -600 1762 a -600 1762
a
tx@Dict begin RotEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@5Rotref
@GetCenter 2 copy /N@OE@@5A @GetCenter 0.  0.   28.45274 mul exch 28.45274
mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@5TrefA 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -600
1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@5Rotref
@GetCenter 2 copy /N@OE@@5B @GetCenter 0.  0.   28.45274 mul exch 28.45274
mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@5TrefB 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin  (1) (N) (OE@@5) CorrectDipoleIfc
 end  end
 -600 1762
a -600 1762 a
tx@Dict begin tx@OptexpDict begin  (OE@NPH1) (OE@@5) CompAlias  end
 end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -600 1762 a -600
1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin tx@NodeDict
begin tx@NodeDict /N@MILas known { /N@MILas load GetCenter } { 0 0
} ifelse end  28.45274 div exch 28.45274 div exch  tx@NodeDict begin
tx@NodeDict /N@BS2 known { /N@BS2 load GetCenter } { 0 0 } ifelse end
 28.45274 div exch 28.45274 div exch  tx@NodeDict begin tx@NodeDict
/N@BS1 known { /N@BS1 load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  calcNodes /exch@ref@OE@@6 ED X@A Y@A end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@6@A 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin X@B Y@B end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@6@B 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762
a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@BS1
known { /N@BS1 load GetCenter } { 0 0 } ifelse end } false /N@OE@@6Origin
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@MILas
known { /N@MILas load GetCenter } { 0 0 } ifelse end } false /N@OE@@6A
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@BS2
known { /N@BS2 load GetCenter } { 0 0 } ifelse end } false /N@OE@@6B
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600
1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /N@OE@@6@A @GetCenter /N@OE@@6@B
@GetCenter @ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac
-1 def } if  end  end
 -600 1762
a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@@x 0.8  0.5 sqrt mul def  end 
end
 -600 1762 a -600 1762 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@6@A /N@OE@@6@B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -600 1762 a -600
1762 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin /t .5 def LPut end PutBegin  end
 -600 1762 a -600 1762
a
tx@Dict begin NAngle  RotBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin {  0.  neg  0.   28.45274 mul exch 28.45274 mul exch
 } PutCoor PutBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@6Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -600
1762 a -600 1762 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@6Rotref
known { /N@OE@@6Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@6Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -600 1762
a -600 1762 a
tx@Dict begin tx@OptexpDict begin tx@NodeDict begin /NodeScale {} def
end [ {0.8  0.5 mul 2 sqrt div neg dup} {-1 1} 0.8  0.5 mul neg 0.8
 0.5 mul trans {PlainIfc} {0.8  0.5 mul 2 sqrt div dup neg} {1 1} 0.8
 0.5 mul neg 0.8  0.5 mul trans {PlainIfc} {0 0} {1 0} 0.8  0.5 mul
2 sqrt mul dup neg exch trans {PlainIfc} {0.8  0.5 mul 2 sqrt div dup}
{-1 1} 0.8  0.5 mul neg 0.8  0.5 mul trans {PlainIfc} {0.8  0.5 mul
2 sqrt div neg dup neg} {1 1} 0.8  0.5 mul neg 0.8  0.5 mul trans {PlainIfc}
3 [1.5]  true true false (OE@@6) { 28.45274 mul exch 28.45274 mul exch
 } NewOptexpComp  end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@6Center
@GetCenter 0.0 22.76227 -90.  45.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@6Label 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -600 1762 a -600
1762 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  PutEnd  end
 -600 1762 a -600 1762
a
tx@Dict begin RotEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@6Rotref
@GetCenter 2 copy /N@OE@@6A @GetCenter 0.  neg  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@6TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -600
1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@6Rotref
@GetCenter 2 copy /N@OE@@6B @GetCenter 0.  neg  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@6TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@6Rotref
@GetCenter 2 copy /N@OE@@6@A @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@6@TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -600 1762
a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@6Rotref
@GetCenter 2 copy /N@OE@@6@B @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@6@TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin  (OE@NBS1) (OE@@6) CompAlias  end
 end
 -600 1762 a -600
1762 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin tx@NodeDict
begin tx@NodeDict /N@Laser known { /N@Laser load GetCenter } { 0 0
} ifelse end  28.45274 div exch 28.45274 div exch  tx@NodeDict begin
tx@NodeDict /N@BS1 known { /N@BS1 load GetCenter } { 0 0 } ifelse end
 28.45274 div exch 28.45274 div exch  tx@NodeDict begin tx@NodeDict
/N@MILas known { /N@MILas load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  calcNodes /exch@ref@OE@@7 ED X@A Y@A end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@7@A 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762
a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin X@B Y@B end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@7@B 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@MILas
known { /N@MILas load GetCenter } { 0 0 } ifelse end } false /N@OE@@7Origin
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@Laser
known { /N@Laser load GetCenter } { 0 0 } ifelse end } false /N@OE@@7A
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600
1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@BS1
known { /N@BS1 load GetCenter } { 0 0 } ifelse end } false /N@OE@@7B
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 -600 1762
a -600 1762 a
tx@Dict begin tx@OptexpDict begin /N@OE@@7@A @GetCenter /N@OE@@7@B
@GetCenter @ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac
-1 def } if  end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@@x 1.  0.5 mul def end  end
 -600 1762 a -600
1762 a
tx@Dict begin tx@OptexpDict begin 0.15  0.5 mul dup /@@y0 ED /@@y ED
end  end
 -600 1762 a -600 1762 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@7@A /N@OE@@7@B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -600 1762 a -600 1762
a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin /t .5 def LPut end PutBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin NAngle  RotBegin  end
 -600
1762 a -600 1762 a
tx@Dict begin {  0.  neg  0.   28.45274 mul exch 28.45274 mul exch
 } PutCoor PutBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@7Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -600 1762
a -600 1762 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@7Rotref
known { /N@OE@@7Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@7Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -600 1762 a -600
1762 a
tx@Dict begin tx@OptexpDict begin [ {0 0} {1 0} 1.  -0.5 mul dup neg
refl {PlainIfc}  1   false  true false (OE@@7) { 28.45274 mul exch
28.45274 mul exch  } NewOptexpComp  end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 } false /N@OE@@7Center 10
{InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762
a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@7Center
@GetCenter 0.0 22.76227 0.  0.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@7Label 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -600 1762 a -600 1762 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  PutEnd  end
 -600
1762 a -600 1762 a
tx@Dict begin RotEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin PutEnd  end
 -600 1762
a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@7Rotref
@GetCenter 2 copy /N@OE@@7A @GetCenter 0.  neg  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@7TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@7Rotref
@GetCenter 2 copy /N@OE@@7B @GetCenter 0.  neg  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@7TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -600 1762 a -600
1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@7Rotref
@GetCenter 2 copy /N@OE@@7@A @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@7@TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@7Rotref
@GetCenter 2 copy /N@OE@@7@B @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@7@TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -600 1762 a -600 1762
a
tx@Dict begin tx@OptexpDict begin  (OE@NM0) (OE@@7) CompAlias  end
 end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@Laser
known { /N@Laser load GetCenter } { 0 0 } ifelse end } false /N@OE@@8A
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600
1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@Laser
known { /N@Laser load GetCenter } { 0 0 } ifelse end } false /N@OE@@8B
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 -600 1762
a -600 1762 a
tx@Dict begin tx@OptexpDict begin /N@OE@@8A @GetCenter /N@OE@@8B @GetCenter
@ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac -1 def
} if  end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@@x 1.5  0.5 mul def /@@y 0.9  0.5
mul def  end  end
 -600 1762 a -600
1762 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@8A /N@OE@@8B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -600 1762 a -600 1762 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 1762 a -600 1762
a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@8A
known { /N@OE@@8A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@8B known { /N@OE@@8B load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def /dy YB
YA sub def /angle dy dx Atan def XA tx@OptexpDict begin  @@x0 neg @@x
sub  end 1 sub angle cos mul add YA tx@OptexpDict begin  @@x0 neg @@x
sub  end 1 sub angle sin mul add   28.45274 mul exch 28.45274 mul exch
 } false /N@temp@nlputA 10 {InitPnode } /NodeScale {} def NewNode end
 end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@8A
known { /N@OE@@8A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@8B known { /N@OE@@8B load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def /dy YB
YA sub def /angle dy dx Atan def XA tx@OptexpDict begin  @@x0 neg @@x
sub  end 1 add angle cos mul add YA tx@OptexpDict begin  @@x0 neg @@x
sub  end 1 add angle sin mul add   28.45274 mul exch 28.45274 mul exch
 } false /N@temp@nlputB 10 {InitPnode } /NodeScale {} def NewNode end
 end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputA
known { /N@temp@nlputA load GetCenter } { 0 0 } ifelse end } false
/N@@@A 10 {InitPnode } /NodeScale {} def NewNode end  end
 -600
1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputB
known { /N@temp@nlputB load GetCenter } { 0 0 } ifelse end } false
/N@@@B 10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -600 1762
a -600 1762 a
tx@Dict begin  tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin NAngle  RotBegin  end
 -600 1762 a -600
1762 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@8Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762
a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@8Rotref
known { /N@OE@@8Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@8Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin tx@NodeDict begin /NodeScale {} def
end [ {@@x0 @@x sub 0} {0 1} @@y0 @@y sub @@y0 @@y add trans {PlainIfc}
@@x 0 eq not { {@@x0 @@x add 0} {0 1} @@y0 @@y sub @@y0 @@y add trans
{PlainIfc} } if [1.5]  false true false (OE@@8) { 28.45274 mul exch
28.45274 mul exch  } NewOptexpComp  end  end
 -600
1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@8Center
@GetCenter 0.0 0.0 0.  180.  add matrix rotate dtransform VecAdd  28.45274
div exch 28.45274 div exch   end  28.45274 mul exch 28.45274 mul exch
 } false /N@OE@@8Label 10 {InitPnode } /NodeScale {} def NewNode end
 end
 -600 1762 a -600 1762 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -600 1762
a -600 1762 a
tx@Dict begin  PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin RotEnd  end
 -600 1762 a -600
1762 a
tx@Dict begin PutEnd  end
 -600 1762 a @beginspecial @setspecial
  tx@Dict begin STP newpath end
 
@endspecial
-600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@8Rotref
@GetCenter 2 copy /N@OE@@8A @GetCenter 0.  0.   28.45274 mul exch 28.45274
mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@8TrefA 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@8Rotref
@GetCenter 2 copy /N@OE@@8B @GetCenter 0.  0.   28.45274 mul exch 28.45274
mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@8TrefB 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -600 1762 a -600
1762 a
tx@Dict begin tx@OptexpDict begin  (1) (N) (OE@@8) CorrectDipoleIfc
 end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -600 1762 a -600 1762
a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@MILas
known { /N@MILas load GetCenter } { 0 0 } ifelse end } false /N@OE@@9A
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@BS1
known { /N@BS1 load GetCenter } { 0 0 } ifelse end } false /N@OE@@9B
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 -600
1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /N@OE@@9A @GetCenter /N@OE@@9B @GetCenter
@ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac -1 def
} if  end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@@y 1.  0.5 mul def /@@x 1. 1. 
0.5 mul capHeight   1. 1.  0.5 mul capHeight  add  0.5 mul def  end
 end
 -600 1762
a -600 1762 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@9A /N@OE@@9B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -600 1762 a -600 1762 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 1762 a -600
1762 a
tx@Dict begin  tx@NodeDict begin /t 0.25 def LPut end PutBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin NAngle  RotBegin  end
 -600 1762 a -600 1762
a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@9Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@9Rotref
known { /N@OE@@9Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -600
1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@9Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin tx@NodeDict begin /NodeScale {} def
end [ {@@x neg 0} {1.  0} 1.  -0.5 mul dup neg trans {CurvedIfc} {@@x
0} {1.  neg 0} 1.  -0.5 mul dup neg trans {CurvedIfc} [2]  false true
false (OE@@9) { 28.45274 mul exch 28.45274 mul exch  } NewOptexpComp
 end  end
 -600 1762
a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@9Center
@GetCenter 0.0 28.45274 180.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@9Label 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -600 1762 a -600 1762 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -600 1762 a -600
1762 a
tx@Dict begin  PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin RotEnd  end
 -600 1762 a -600 1762
a
tx@Dict begin PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@9Rotref
@GetCenter 2 copy /N@OE@@9A @GetCenter 0.  0.   28.45274 mul exch 28.45274
mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@9TrefA 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@9Rotref
@GetCenter 2 copy /N@OE@@9B @GetCenter 0.  0.   28.45274 mul exch 28.45274
mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@9TrefB 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -600
1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin  (1) (N) (OE@@9) CorrectDipoleIfc
 end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin  (OE@NL1) (OE@@9) CompAlias  end
 end
 -600 1762
a -600 1762 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@MILas
known { /N@MILas load GetCenter } { 0 0 } ifelse end } false /N@OE@@10A
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600
1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@BS1
known { /N@BS1 load GetCenter } { 0 0 } ifelse end } false /N@OE@@10B
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 -600 1762 a -600 1762
a
tx@Dict begin tx@OptexpDict begin /N@OE@@10A @GetCenter /N@OE@@10B
@GetCenter @ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac
-1 def } if  end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@@y 1.  0.5 mul def /@@x 1. 1. 
0.5 mul capHeight   1. 1.  0.5 mul capHeight  add  0.5 mul def  end
 end
 -600 1762 a -600 1762 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@10A /N@OE@@10B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -600
1762 a -600 1762 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin /t 0.65 def LPut end PutBegin  end
 -600 1762
a -600 1762 a
tx@Dict begin NAngle  RotBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -600 1762 a -600
1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@10Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@10Rotref
known { /N@OE@@10Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -600 1762 a -600 1762
a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@10Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin tx@NodeDict begin /NodeScale {} def
end [ {@@x neg 0} {1.  0} 1.  -0.5 mul dup neg trans {CurvedIfc} {@@x
0} {1.  neg 0} 1.  -0.5 mul dup neg trans {CurvedIfc} [2]  false true
false (OE@@10) { 28.45274 mul exch 28.45274 mul exch  } NewOptexpComp
 end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@10Center
@GetCenter 0.0 28.45274 180.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@10Label 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -600
1762 a -600 1762 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  PutEnd  end
 -600 1762
a -600 1762 a
tx@Dict begin RotEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin PutEnd  end
 -600 1762 a -600
1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@10Rotref
@GetCenter 2 copy /N@OE@@10A @GetCenter 0.  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@10TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@10Rotref
@GetCenter 2 copy /N@OE@@10B @GetCenter 0.  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@10TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -600 1762 a -600 1762
a
tx@Dict begin tx@OptexpDict begin  (1) (N) (OE@@10) CorrectDipoleIfc
 end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin  (OE@NL2) (OE@@10) CompAlias  end
 end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -600
1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin tx@NodeDict
begin tx@NodeDict /N@BS1 known { /N@BS1 load GetCenter } { 0 0 } ifelse
end  28.45274 div exch 28.45274 div exch  tx@NodeDict begin tx@NodeDict
/N@BS4 known { /N@BS4 load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  tx@NodeDict begin tx@NodeDict /N@BS2 known
{ /N@BS2 load GetCenter } { 0 0 } ifelse end  28.45274 div exch 28.45274
div exch  calcNodes /exch@ref@OE@@11 ED X@A Y@A end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@11@A 10 {InitPnode } /NodeScale {}
def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin X@B Y@B end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@11@B 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -600 1762
a -600 1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@BS2
known { /N@BS2 load GetCenter } { 0 0 } ifelse end } false /N@OE@@11Origin
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@BS1
known { /N@BS1 load GetCenter } { 0 0 } ifelse end } false /N@OE@@11A
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600
1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@BS4
known { /N@BS4 load GetCenter } { 0 0 } ifelse end } false /N@OE@@11B
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 -600 1762 a -600 1762
a
tx@Dict begin tx@OptexpDict begin /N@OE@@11@A @GetCenter /N@OE@@11@B
@GetCenter @ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac
-1 def } if  end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@@x 0.8  0.5 sqrt mul def  end 
end
 -600 1762 a -600 1762 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@11@A /N@OE@@11@B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -600
1762 a -600 1762 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin /t .5 def LPut end PutBegin  end
 -600 1762
a -600 1762 a
tx@Dict begin NAngle  RotBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin {  0.  neg  0.   28.45274 mul exch 28.45274 mul exch
 } PutCoor PutBegin  end
 -600 1762 a -600
1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@11Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@11Rotref
known { /N@OE@@11Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -600 1762 a -600 1762
a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@11Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin tx@NodeDict begin /NodeScale {} def
end [ {0.8  0.5 mul 2 sqrt div neg dup} {-1 1} 0.8  0.5 mul neg 0.8
 0.5 mul trans {PlainIfc} {0.8  0.5 mul 2 sqrt div dup neg} {1 1} 0.8
 0.5 mul neg 0.8  0.5 mul trans {PlainIfc} {0 0} {1 0} 0.8  0.5 mul
2 sqrt mul dup neg exch trans {PlainIfc} {0.8  0.5 mul 2 sqrt div dup}
{-1 1} 0.8  0.5 mul neg 0.8  0.5 mul trans {PlainIfc} {0.8  0.5 mul
2 sqrt div neg dup neg} {1 1} 0.8  0.5 mul neg 0.8  0.5 mul trans {PlainIfc}
3 [1.5]  true true false (OE@@11) { 28.45274 mul exch 28.45274 mul
exch  } NewOptexpComp  end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@11Center
@GetCenter 0.0 22.76227 0.  45.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@11Label 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -600
1762 a -600 1762 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  PutEnd  end
 -600 1762
a -600 1762 a
tx@Dict begin RotEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin PutEnd  end
 -600 1762 a -600
1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@11Rotref
@GetCenter 2 copy /N@OE@@11A @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@11TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@11Rotref
@GetCenter 2 copy /N@OE@@11B @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@11TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -600 1762 a -600 1762
a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@11Rotref
@GetCenter 2 copy /N@OE@@11@A @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@11@TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@11Rotref
@GetCenter 2 copy /N@OE@@11@B @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@11@TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin  (OE@NBS2) (OE@@11) CompAlias  end
 end
 -600
1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin tx@NodeDict
begin tx@NodeDict /N@M4 known { /N@M4 load GetCenter } { 0 0 } ifelse
end  28.45274 div exch 28.45274 div exch  tx@NodeDict begin tx@NodeDict
/N@BS5 known { /N@BS5 load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  tx@NodeDict begin tx@NodeDict /N@BS3 known
{ /N@BS3 load GetCenter } { 0 0 } ifelse end  28.45274 div exch 28.45274
div exch  calcNodes /exch@ref@OE@@12 ED X@A Y@A end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@12@A 10 {InitPnode } /NodeScale {}
def NewNode end  end
 -600 1762
a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin X@B Y@B end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@12@B 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@BS3
known { /N@BS3 load GetCenter } { 0 0 } ifelse end } false /N@OE@@12Origin
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600
1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@M4
known { /N@M4 load GetCenter } { 0 0 } ifelse end } false /N@OE@@12A
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@BS5
known { /N@BS5 load GetCenter } { 0 0 } ifelse end } false /N@OE@@12B
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762
a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /N@OE@@12@A @GetCenter /N@OE@@12@B
@GetCenter @ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac
-1 def } if  end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@@x 0.8  0.5 sqrt mul def  end 
end
 -600
1762 a -600 1762 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@12@A /N@OE@@12@B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -600 1762 a -600 1762 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 1762
a -600 1762 a
tx@Dict begin  tx@NodeDict begin /t .5 def LPut end PutBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin NAngle  RotBegin  end
 -600 1762 a -600
1762 a
tx@Dict begin {  0.  neg  0.   28.45274 mul exch 28.45274 mul exch
 } PutCoor PutBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@12Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762
a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@12Rotref
known { /N@OE@@12Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@12Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin tx@NodeDict begin /NodeScale {} def
end [ {0.8  0.5 mul 2 sqrt div neg dup} {-1 1} 0.8  0.5 mul neg 0.8
 0.5 mul trans {PlainIfc} {0.8  0.5 mul 2 sqrt div dup neg} {1 1} 0.8
 0.5 mul neg 0.8  0.5 mul trans {PlainIfc} {0 0} {1 0} 0.8  0.5 mul
2 sqrt mul dup neg exch trans {PlainIfc} {0.8  0.5 mul 2 sqrt div dup}
{-1 1} 0.8  0.5 mul neg 0.8  0.5 mul trans {PlainIfc} {0.8  0.5 mul
2 sqrt div neg dup neg} {1 1} 0.8  0.5 mul neg 0.8  0.5 mul trans {PlainIfc}
3 [1.5]  true true false (OE@@12) { 28.45274 mul exch 28.45274 mul
exch  } NewOptexpComp  end  end
 -600
1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@12Center
@GetCenter 0.0 22.76227 -90.  45.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@12Label 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -600 1762
a -600 1762 a
tx@Dict begin  PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin RotEnd  end
 -600 1762 a -600
1762 a
tx@Dict begin PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@12Rotref
@GetCenter 2 copy /N@OE@@12A @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@12TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -600 1762 a -600 1762
a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@12Rotref
@GetCenter 2 copy /N@OE@@12B @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@12TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@12Rotref
@GetCenter 2 copy /N@OE@@12@A @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@12@TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@12Rotref
@GetCenter 2 copy /N@OE@@12@B @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@12@TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -600
1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin  (OE@NBS3) (OE@@12) CompAlias  end
 end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -600 1762
a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin tx@NodeDict
begin tx@NodeDict /N@M3 known { /N@M3 load GetCenter } { 0 0 } ifelse
end  28.45274 div exch 28.45274 div exch  tx@NodeDict begin tx@NodeDict
/N@BS5 known { /N@BS5 load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  tx@NodeDict begin tx@NodeDict /N@BS4 known
{ /N@BS4 load GetCenter } { 0 0 } ifelse end  28.45274 div exch 28.45274
div exch  calcNodes /exch@ref@OE@@13 ED X@A Y@A end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@13@A 10 {InitPnode } /NodeScale {}
def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin X@B Y@B end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@13@B 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -600 1762 a -600
1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@BS4
known { /N@BS4 load GetCenter } { 0 0 } ifelse end } false /N@OE@@13Origin
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@M3
known { /N@M3 load GetCenter } { 0 0 } ifelse end } false /N@OE@@13A
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762
a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@BS5
known { /N@BS5 load GetCenter } { 0 0 } ifelse end } false /N@OE@@13B
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /N@OE@@13@A @GetCenter /N@OE@@13@B
@GetCenter @ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac
-1 def } if  end  end
 -600
1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@@x 0.8  0.5 sqrt mul def  end 
end
 -600 1762 a -600 1762 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@13@A /N@OE@@13@B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -600 1762
a -600 1762 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin /t .5 def LPut end PutBegin  end
 -600 1762 a -600
1762 a
tx@Dict begin NAngle  RotBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin {  0.  neg  0.   28.45274 mul exch 28.45274 mul exch
 } PutCoor PutBegin  end
 -600 1762 a -600 1762
a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@13Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@13Rotref
known { /N@OE@@13Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@13Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -600
1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin tx@NodeDict begin /NodeScale {} def
end [ {0.8  0.5 mul 2 sqrt div neg dup} {-1 1} 0.8  0.5 mul neg 0.8
 0.5 mul trans {PlainIfc} {0.8  0.5 mul 2 sqrt div dup neg} {1 1} 0.8
 0.5 mul neg 0.8  0.5 mul trans {PlainIfc} {0 0} {1 0} 0.8  0.5 mul
2 sqrt mul dup neg exch trans {PlainIfc} {0.8  0.5 mul 2 sqrt div dup}
{-1 1} 0.8  0.5 mul neg 0.8  0.5 mul trans {PlainIfc} {0.8  0.5 mul
2 sqrt div neg dup neg} {1 1} 0.8  0.5 mul neg 0.8  0.5 mul trans {PlainIfc}
3 [1.5]  true true false (OE@@13) { 28.45274 mul exch 28.45274 mul
exch  } NewOptexpComp  end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@13Center
@GetCenter 0.0 22.76227 90.  45.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@13Label 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -600 1762
a -600 1762 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  PutEnd  end
 -600 1762 a -600
1762 a
tx@Dict begin RotEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin PutEnd  end
 -600 1762 a -600 1762
a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@13Rotref
@GetCenter 2 copy /N@OE@@13A @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@13TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@13Rotref
@GetCenter 2 copy /N@OE@@13B @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@13TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@13Rotref
@GetCenter 2 copy /N@OE@@13@A @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@13@TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -600
1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@13Rotref
@GetCenter 2 copy /N@OE@@13@B @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@13@TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin  (OE@NBS4) (OE@@13) CompAlias  end
 end
 -600 1762
a -600 1762 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin tx@NodeDict
begin tx@NodeDict /N@M1 known { /N@M1 load GetCenter } { 0 0 } ifelse
end  28.45274 div exch 28.45274 div exch  tx@NodeDict begin tx@NodeDict
/N@FocLens known { /N@FocLens load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  tx@NodeDict begin tx@NodeDict
/N@BS5 known { /N@BS5 load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  calcNodes /exch@ref@OE@@14 ED X@A Y@A end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@14@A 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -600 1762 a -600
1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin X@B Y@B end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@14@B 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@BS5
known { /N@BS5 load GetCenter } { 0 0 } ifelse end } false /N@OE@@14Origin
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762
a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@M1
known { /N@M1 load GetCenter } { 0 0 } ifelse end } false /N@OE@@14A
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@FocLens
known { /N@FocLens load GetCenter } { 0 0 } ifelse end } false /N@OE@@14B
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 -600
1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /N@OE@@14@A @GetCenter /N@OE@@14@B
@GetCenter @ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac
-1 def } if  end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@@x 0.8  0.5 sqrt mul def  end 
end
 -600 1762
a -600 1762 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@14@A /N@OE@@14@B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -600 1762 a -600 1762 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 1762 a -600
1762 a
tx@Dict begin  tx@NodeDict begin /t .5 def LPut end PutBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin NAngle  RotBegin  end
 -600 1762 a -600 1762
a
tx@Dict begin {  0.  neg  0.   28.45274 mul exch 28.45274 mul exch
 } PutCoor PutBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@14Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@14Rotref
known { /N@OE@@14Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -600
1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@14Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin tx@NodeDict begin /NodeScale {} def
end [ {0.8  0.5 mul 2 sqrt div neg dup} {-1 1} 0.8  0.5 mul neg 0.8
 0.5 mul trans {PlainIfc} {0.8  0.5 mul 2 sqrt div dup neg} {1 1} 0.8
 0.5 mul neg 0.8  0.5 mul trans {PlainIfc} {0 0} {1 0} 0.8  0.5 mul
2 sqrt mul dup neg exch trans {PlainIfc} {0.8  0.5 mul 2 sqrt div dup}
{-1 1} 0.8  0.5 mul neg 0.8  0.5 mul trans {PlainIfc} {0.8  0.5 mul
2 sqrt div neg dup neg} {1 1} 0.8  0.5 mul neg 0.8  0.5 mul trans {PlainIfc}
3 [1.5]  true true false (OE@@14) { 28.45274 mul exch 28.45274 mul
exch  } NewOptexpComp  end  end
 -600 1762
a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@14Center
@GetCenter 0.0 22.76227 0.  45.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@14Label 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -600 1762 a -600
1762 a
tx@Dict begin  PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin RotEnd  end
 -600 1762 a -600 1762
a
tx@Dict begin PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@14Rotref
@GetCenter 2 copy /N@OE@@14A @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@14TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@14Rotref
@GetCenter 2 copy /N@OE@@14B @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@14TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -600
1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@14Rotref
@GetCenter 2 copy /N@OE@@14@A @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@14@TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@14Rotref
@GetCenter 2 copy /N@OE@@14@B @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@14@TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -600 1762
a -600 1762 a
tx@Dict begin tx@OptexpDict begin  (OE@NBS5) (OE@@14) CompAlias  end
 end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -600 1762 a -600
1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin tx@NodeDict
begin tx@NodeDict /N@BS4 known { /N@BS4 load GetCenter } { 0 0 } ifelse
end  28.45274 div exch 28.45274 div exch  tx@NodeDict begin tx@NodeDict
/N@BS4 known { /N@BS4 load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  tx@NodeDict begin tx@NodeDict /N@M2 known
{ /N@M2 load GetCenter } { 0 0 } ifelse end  28.45274 div exch 28.45274
div exch  calcNodes /exch@ref@OE@@15 ED X@A Y@A end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@15@A 10 {InitPnode } /NodeScale {}
def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin X@B Y@B end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@15@B 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762
a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@M2
known { /N@M2 load GetCenter } { 0 0 } ifelse end } false /N@OE@@15Origin
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@BS4
known { /N@BS4 load GetCenter } { 0 0 } ifelse end } false /N@OE@@15A
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@BS4
known { /N@BS4 load GetCenter } { 0 0 } ifelse end } false /N@OE@@15B
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600
1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /N@OE@@15@A @GetCenter /N@OE@@15@B
@GetCenter @ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac
-1 def } if  end  end
 -600 1762
a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@@x 1.  0.5 mul def end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin 0.15  0.5 mul dup /@@y0 ED /@@y ED
end  end
 -600 1762 a -600
1762 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@15@A /N@OE@@15@B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -600 1762 a -600 1762 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 1762 a -600 1762
a
tx@Dict begin  tx@NodeDict begin /t .5 def LPut end PutBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin NAngle  RotBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin {  0.  neg  0.   28.45274 mul exch 28.45274 mul exch
 } PutCoor PutBegin  end
 -600
1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@15Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@15Rotref
known { /N@OE@@15Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -600 1762
a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@15Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin [ {0 0} {1 0} 1.  -0.5 mul dup neg
refl {PlainIfc}  1   false  true false (OE@@15) { 28.45274 mul exch
28.45274 mul exch  } NewOptexpComp  end  end
 -600 1762 a -600
1762 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 } false /N@OE@@15Center 10
{InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@15Center
@GetCenter 0.0 22.76227 0.  0.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@15Label 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -600 1762 a -600 1762
a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin RotEnd  end
 -600
1762 a -600 1762 a
tx@Dict begin PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@15Rotref
@GetCenter 2 copy /N@OE@@15A @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@15TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -600 1762
a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@15Rotref
@GetCenter 2 copy /N@OE@@15B @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@15TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@15Rotref
@GetCenter 2 copy /N@OE@@15@A @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@15@TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -600 1762 a -600
1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@15Rotref
@GetCenter 2 copy /N@OE@@15@B @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@15@TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin  (OE@NM2) (OE@@15) CompAlias  end
 end
 -600 1762 a -600 1762
a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {81.09048 199.1692 } false /N@OE@@16A
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {83.9355 199.1692 } false /N@OE@@16B
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600
1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /N@OE@@16A @GetCenter /N@OE@@16B
@GetCenter @ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac
-1 def } if  end  end
 -600 1762
a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@@x 0.  0.5 mul def /@@y 0.  0.5
mul def  end  end
 -600 1762 a -600 1762 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@16A /N@OE@@16B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -600 1762 a -600
1762 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@16A
known { /N@OE@@16A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@16B known { /N@OE@@16B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA tx@OptexpDict begin  @@x0
neg @@x sub  end 1 sub angle cos mul add YA tx@OptexpDict begin  @@x0
neg @@x sub  end 1 sub angle sin mul add   28.45274 mul exch 28.45274
mul exch  } false /N@temp@nlputA 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -600 1762 a -600 1762
a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@16A
known { /N@OE@@16A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@16B known { /N@OE@@16B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA tx@OptexpDict begin  @@x0
neg @@x sub  end 1 add angle cos mul add YA tx@OptexpDict begin  @@x0
neg @@x sub  end 1 add angle sin mul add   28.45274 mul exch 28.45274
mul exch  } false /N@temp@nlputB 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputA
known { /N@temp@nlputA load GetCenter } { 0 0 } ifelse end } false
/N@@@A 10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputB
known { /N@temp@nlputB load GetCenter } { 0 0 } ifelse end } false
/N@@@B 10 {InitPnode } /NodeScale {} def NewNode end  end
 -600
1762 a -600 1762 a
tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 -600 1762
a -600 1762 a
tx@Dict begin NAngle  RotBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -600 1762 a -600
1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@16Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@16Rotref
known { /N@OE@@16Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -600 1762 a -600 1762
a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@16Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin tx@NodeDict begin /NodeScale {} def
end [ {@@x0 @@x sub 0} {0 1} @@y0 @@y sub @@y0 @@y add trans {PlainIfc}
@@x 0 eq not { {@@x0 @@x add 0} {0 1} @@y0 @@y sub @@y0 @@y add trans
{PlainIfc} } if [1.5]  false true false (OE@@16) { 28.45274 mul exch
28.45274 mul exch  } NewOptexpComp  end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin OE@@16 begin 4 dict dup /source exch
def begin /beamangle 0 def /beamdiv 10 def end source length 0 eq {
currentdict /source undef } if end  end  end
 -600
1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@16Center
@GetCenter 0.0 0.0 0.  180.  add matrix rotate dtransform VecAdd  28.45274
div exch 28.45274 div exch   end  28.45274 mul exch 28.45274 mul exch
 } false /N@OE@@16Label 10 {InitPnode } /NodeScale {} def NewNode end
 end
 -600 1762 a -600 1762 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -600 1762
a -600 1762 a
tx@Dict begin  PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin RotEnd  end
 -600 1762 a -600
1762 a
tx@Dict begin PutEnd  end
 -600 1762 a @beginspecial @setspecial
  tx@Dict begin STP newpath end
 
@endspecial
-600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@16Rotref
@GetCenter 2 copy /N@OE@@16A @GetCenter 0.  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@16TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@16Rotref
@GetCenter 2 copy /N@OE@@16B @GetCenter 0.  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@16TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -600 1762 a -600
1762 a
tx@Dict begin tx@OptexpDict begin  (1) (N) (OE@@16) CorrectDipoleIfc
 end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin  (OE@SRC2) (OE@@16) CompAlias  end
 end
 -600 1762 a -600 1762
a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin tx@NodeDict
begin tx@NodeDict /N@BS4 known { /N@BS4 load GetCenter } { 0 0 } ifelse
end  28.45274 div exch 28.45274 div exch  tx@NodeDict begin tx@NodeDict
/N@BS4 known { /N@BS4 load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  tx@NodeDict begin tx@NodeDict /N@M3 known
{ /N@M3 load GetCenter } { 0 0 } ifelse end  28.45274 div exch 28.45274
div exch  calcNodes /exch@ref@OE@@17 ED X@A Y@A end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@17@A 10 {InitPnode } /NodeScale {}
def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin X@B Y@B end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@17@B 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -600
1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@M3
known { /N@M3 load GetCenter } { 0 0 } ifelse end } false /N@OE@@17Origin
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@BS4
known { /N@BS4 load GetCenter } { 0 0 } ifelse end } false /N@OE@@17A
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762
a -600 1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@BS4
known { /N@BS4 load GetCenter } { 0 0 } ifelse end } false /N@OE@@17B
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 -600 1762 a -600
1762 a
tx@Dict begin tx@OptexpDict begin /N@OE@@17@A @GetCenter /N@OE@@17@B
@GetCenter @ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac
-1 def } if  end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@@y0 28.45274 def end  end
 -600 1762 a -600 1762
a
tx@Dict begin tx@OptexpDict begin 28.45274 @@y0 div 1.  0.5 mul mul
2.5 div /@@y0 ED  end  end
 -600 1762 a -600 1762 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@17@A /N@OE@@17@B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -600 1762 a -600 1762 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600
1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin /t .5 def LPut end PutBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin NAngle  RotBegin  end
 -600 1762
a -600 1762 a
tx@Dict begin {  0.  neg  0.   28.45274 mul exch 28.45274 mul exch
 } PutCoor PutBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@17Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600
1762 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@17Rotref
known { /N@OE@@17Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@17Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762
a
tx@Dict begin tx@OptexpDict begin [ {0 0} {1 0} 1.  -0.5 mul dup neg
refl {PlainIfc}  1   false  true false (OE@@17) { 28.45274 mul exch
28.45274 mul exch  } NewOptexpComp  end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 } false /N@OE@@17Center 10
{InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@17Center
@GetCenter 0.0 28.45274 0.  0.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@17Label 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -600
1762 a -600 1762 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  PutEnd  end
 -600 1762
a -600 1762 a
tx@Dict begin RotEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin PutEnd  end
 -600 1762 a -600
1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@17Rotref
@GetCenter 2 copy /N@OE@@17A @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@17TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@17Rotref
@GetCenter 2 copy /N@OE@@17B @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@17TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -600 1762 a -600 1762
a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@17Rotref
@GetCenter 2 copy /N@OE@@17@A @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@17@TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@17Rotref
@GetCenter 2 copy /N@OE@@17@B @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@17@TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin  (OE@NM3) (OE@@17) CompAlias  end
 end
 -600
1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin tx@NodeDict
begin tx@NodeDict /N@BS3 known { /N@BS3 load GetCenter } { 0 0 } ifelse
end  28.45274 div exch 28.45274 div exch  tx@NodeDict begin tx@NodeDict
/N@BS3 known { /N@BS3 load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  tx@NodeDict begin tx@NodeDict /N@M4 known
{ /N@M4 load GetCenter } { 0 0 } ifelse end  28.45274 div exch 28.45274
div exch  calcNodes /exch@ref@OE@@18 ED X@A Y@A end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@18@A 10 {InitPnode } /NodeScale {}
def NewNode end  end
 -600 1762
a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin X@B Y@B end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@18@B 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@M4
known { /N@M4 load GetCenter } { 0 0 } ifelse end } false /N@OE@@18Origin
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600
1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@BS3
known { /N@BS3 load GetCenter } { 0 0 } ifelse end } false /N@OE@@18A
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@BS3
known { /N@BS3 load GetCenter } { 0 0 } ifelse end } false /N@OE@@18B
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762
a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /N@OE@@18@A @GetCenter /N@OE@@18@B
@GetCenter @ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac
-1 def } if  end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@@y0 28.45274 def end  end
 -600
1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin 28.45274 @@y0 div 1.  0.5 mul mul
2.5 div /@@y0 ED  end  end
 -600 1762 a -600 1762 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@18@A /N@OE@@18@B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -600 1762
a -600 1762 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin /t .5 def LPut end PutBegin  end
 -600 1762 a -600
1762 a
tx@Dict begin NAngle  RotBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin {  0.  neg  0.   28.45274 mul exch 28.45274 mul exch
 } PutCoor PutBegin  end
 -600 1762 a -600 1762
a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@18Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@18Rotref
known { /N@OE@@18Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@18Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -600
1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin [ {0 0} {1 0} 1.  -0.5 mul dup neg
refl {PlainIfc}  1   false  true false (OE@@18) { 28.45274 mul exch
28.45274 mul exch  } NewOptexpComp  end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 } false /N@OE@@18Center 10
{InitPnode } /NodeScale {} def NewNode end  end
 -600 1762
a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@18Center
@GetCenter 0.0 39.83366 0.  0.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@18Label 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -600 1762 a -600
1762 a
tx@Dict begin  PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin RotEnd  end
 -600 1762 a -600 1762
a
tx@Dict begin PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@18Rotref
@GetCenter 2 copy /N@OE@@18A @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@18TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@18Rotref
@GetCenter 2 copy /N@OE@@18B @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@18TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -600
1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@18Rotref
@GetCenter 2 copy /N@OE@@18@A @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@18@TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@18Rotref
@GetCenter 2 copy /N@OE@@18@B @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@18@TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -600 1762
a -600 1762 a
tx@Dict begin tx@OptexpDict begin  (OE@NM4) (OE@@18) CompAlias  end
 end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -600 1762 a -600
1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin tx@NodeDict
begin tx@NodeDict /N@BS3 known { /N@BS3 load GetCenter } { 0 0 } ifelse
end  28.45274 div exch 28.45274 div exch  tx@NodeDict begin tx@NodeDict
/N@BS3 known { /N@BS3 load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  tx@NodeDict begin tx@NodeDict /N@M1 known
{ /N@M1 load GetCenter } { 0 0 } ifelse end  28.45274 div exch 28.45274
div exch  calcNodes /exch@ref@OE@@19 ED X@A Y@A end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@19@A 10 {InitPnode } /NodeScale {}
def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin X@B Y@B end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@19@B 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762
a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@M1
known { /N@M1 load GetCenter } { 0 0 } ifelse end } false /N@OE@@19Origin
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@BS3
known { /N@BS3 load GetCenter } { 0 0 } ifelse end } false /N@OE@@19A
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@BS3
known { /N@BS3 load GetCenter } { 0 0 } ifelse end } false /N@OE@@19B
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600
1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /N@OE@@19@A @GetCenter /N@OE@@19@B
@GetCenter @ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac
-1 def } if  end  end
 -600 1762
a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@@y0 28.45274 def end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin 28.45274 @@y0 div 1.  0.5 mul mul
2.5 div /@@y0 ED  end  end
 -600 1762 a -600
1762 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@19@A /N@OE@@19@B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -600 1762 a -600 1762 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 1762 a -600 1762
a
tx@Dict begin  tx@NodeDict begin /t .5 def LPut end PutBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin NAngle  RotBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin {  0.  neg  0.   28.45274 mul exch 28.45274 mul exch
 } PutCoor PutBegin  end
 -600
1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@19Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@19Rotref
known { /N@OE@@19Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -600 1762
a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@19Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin [ {0 0} {1 0} 1.  -0.5 mul dup neg
refl {PlainIfc}  1   false  true false (OE@@19) { 28.45274 mul exch
28.45274 mul exch  } NewOptexpComp  end  end
 -600 1762 a -600
1762 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 } false /N@OE@@19Center 10
{InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@19Center
@GetCenter 0.0 36.98865 90.  0.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@19Label 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -600 1762 a -600 1762
a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin RotEnd  end
 -600
1762 a -600 1762 a
tx@Dict begin PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@19Rotref
@GetCenter 2 copy /N@OE@@19A @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@19TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -600 1762
a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@19Rotref
@GetCenter 2 copy /N@OE@@19B @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@19TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@19Rotref
@GetCenter 2 copy /N@OE@@19@A @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@19@TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -600 1762 a -600
1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@19Rotref
@GetCenter 2 copy /N@OE@@19@B @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@19@TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin  (OE@NM1) (OE@@19) CompAlias  end
 end
 -600 1762 a -600 1762
a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@BS5
known { /N@BS5 load GetCenter } { 0 0 } ifelse end } false /N@OE@@20A
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@FocLens
known { /N@FocLens load GetCenter } { 0 0 } ifelse end } false /N@OE@@20B
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600
1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /N@OE@@20A @GetCenter /N@OE@@20B
@GetCenter @ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac
-1 def } if  end  end
 -600 1762
a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@@y 1.  0.5 mul def /@@x 1. 1. 
0.5 mul capHeight   1. 1.  0.5 mul capHeight  add  0.5 mul def  end
 end
 -600 1762 a -600 1762 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@20A /N@OE@@20B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -600 1762 a -600
1762 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin /t 0.9 def LPut end PutBegin  end
 -600 1762 a -600 1762
a
tx@Dict begin NAngle  RotBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@20Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -600
1762 a -600 1762 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@20Rotref
known { /N@OE@@20Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@20Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -600 1762
a -600 1762 a
tx@Dict begin tx@OptexpDict begin tx@NodeDict begin /NodeScale {} def
end [ {@@x neg 0} {1.  0} 1.  -0.5 mul dup neg trans {CurvedIfc} {@@x
0} {1.  neg 0} 1.  -0.5 mul dup neg trans {CurvedIfc} [1.5]  false
true false (OE@@20) { 28.45274 mul exch 28.45274 mul exch  } NewOptexpComp
 end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@20Center
@GetCenter 0.0 28.45274 0.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@20Label 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -600 1762 a -600
1762 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  PutEnd  end
 -600 1762 a -600 1762
a
tx@Dict begin RotEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@20Rotref
@GetCenter 2 copy /N@OE@@20A @GetCenter 0.  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@20TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -600
1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@20Rotref
@GetCenter 2 copy /N@OE@@20B @GetCenter 0.  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@20TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin  (1) (N) (OE@@20) CorrectDipoleIfc
 end  end
 -600 1762
a -600 1762 a
tx@Dict begin tx@OptexpDict begin  (OE@NL3) (OE@@20) CompAlias  end
 end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -600 1762 a -600
1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@FocLens
known { /N@FocLens load GetCenter } { 0 0 } ifelse end } false /N@OE@@21A
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@FocLens2
known { /N@FocLens2 load GetCenter } { 0 0 } ifelse end } false /N@OE@@21B
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762
a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /N@OE@@21A @GetCenter /N@OE@@21B
@GetCenter @ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac
-1 def } if  end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@@y 1.  0.5 mul def /@@x 1. 1. 
0.5 mul capHeight   1. 1.  0.5 mul capHeight  add  0.5 mul def  end
 end
 -600
1762 a -600 1762 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@21A /N@OE@@21B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -600 1762 a -600 1762 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 1762
a -600 1762 a
tx@Dict begin  tx@NodeDict begin /t 1. def LPut end PutBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin NAngle  RotBegin  end
 -600 1762 a -600
1762 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@21Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762
a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@21Rotref
known { /N@OE@@21Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@21Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin tx@NodeDict begin /NodeScale {} def
end [ {@@x neg 0} {1.  0} 1.  -0.5 mul dup neg trans {CurvedIfc} {@@x
0} {1.  neg 0} 1.  -0.5 mul dup neg trans {CurvedIfc} [1.5]  false
true false (OE@@21) { 28.45274 mul exch 28.45274 mul exch  } NewOptexpComp
 end  end
 -600
1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@21Center
@GetCenter 0.0 28.45274 0.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@21Label 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -600 1762
a -600 1762 a
tx@Dict begin  PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin RotEnd  end
 -600 1762 a -600
1762 a
tx@Dict begin PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@21Rotref
@GetCenter 2 copy /N@OE@@21A @GetCenter 0.  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@21TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -600 1762 a -600 1762
a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@21Rotref
@GetCenter 2 copy /N@OE@@21B @GetCenter 0.  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@21TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin  (1) (N) (OE@@21) CorrectDipoleIfc
 end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin  (OE@NL4) (OE@@21) CompAlias  end
 end
 -600
1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@FocLens
known { /N@FocLens load GetCenter } { 0 0 } ifelse end } false /N@OE@@22A
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762
a -600 1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@ZoomLens
known { /N@ZoomLens load GetCenter } { 0 0 } ifelse end } false /N@OE@@22B
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 -600 1762 a -600
1762 a
tx@Dict begin tx@OptexpDict begin /N@OE@@22A @GetCenter /N@OE@@22B
@GetCenter @ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac
-1 def } if  end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@@y 1.  0.5 mul def /@@x 1. 1. 
0.5 mul capHeight   1. 1.  0.5 mul capHeight  add  0.5 mul def  end
 end
 -600 1762 a -600 1762
a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@22A /N@OE@@22B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -600 1762 a -600 1762 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin /t 1. def LPut end PutBegin  end
 -600
1762 a -600 1762 a
tx@Dict begin NAngle  RotBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -600 1762
a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@22Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@22Rotref
known { /N@OE@@22Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -600 1762 a -600
1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@22Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin tx@NodeDict begin /NodeScale {} def
end [ {@@x neg 0} {1.  0} 1.  -0.5 mul dup neg trans {CurvedIfc} {@@x
0} {1.  neg 0} 1.  -0.5 mul dup neg trans {CurvedIfc} [1.5]  false
true false (OE@@22) { 28.45274 mul exch 28.45274 mul exch  } NewOptexpComp
 end  end
 -600 1762 a -600 1762
a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@22Center
@GetCenter 0.0 28.45274 0.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@22Label 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  PutEnd  end
 -600
1762 a -600 1762 a
tx@Dict begin RotEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin PutEnd  end
 -600 1762
a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@22Rotref
@GetCenter 2 copy /N@OE@@22A @GetCenter 0.  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@22TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@22Rotref
@GetCenter 2 copy /N@OE@@22B @GetCenter 0.  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@22TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -600 1762 a -600
1762 a
tx@Dict begin tx@OptexpDict begin  (1) (N) (OE@@22) CorrectDipoleIfc
 end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin  (OE@NL5) (OE@@22) CompAlias  end
 end
 -600 1762 a -600 1762
a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@ZoomLens
known { /N@ZoomLens load GetCenter } { 0 0 } ifelse end } false /N@OE@@23A
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@CAM
known { /N@CAM load GetCenter } { 0 0 } ifelse end } false /N@OE@@23B
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600
1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /N@OE@@23A @GetCenter /N@OE@@23B
@GetCenter @ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac
-1 def } if  end  end
 -600 1762
a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@@x 1.5  0.5 mul def /@@y 0.9  0.5
mul def  end  end
 -600 1762 a -600 1762 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@23A /N@OE@@23B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -600 1762 a -600
1762 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@23A
known { /N@OE@@23A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@23B known { /N@OE@@23B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA tx@OptexpDict begin /N@OE@@23A
@GetCenter  28.45274 div exch 28.45274 div exch  /N@OE@@23B @GetCenter
 28.45274 div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end
1 sub angle cos mul add YA tx@OptexpDict begin /N@OE@@23A @GetCenter
 28.45274 div exch 28.45274 div exch  /N@OE@@23B @GetCenter  28.45274
div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end 1 sub angle
sin mul add   28.45274 mul exch 28.45274 mul exch  } false /N@temp@nlputA
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762
a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@23A
known { /N@OE@@23A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@23B known { /N@OE@@23B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA tx@OptexpDict begin /N@OE@@23A
@GetCenter  28.45274 div exch 28.45274 div exch  /N@OE@@23B @GetCenter
 28.45274 div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end
1 add angle cos mul add YA tx@OptexpDict begin /N@OE@@23A @GetCenter
 28.45274 div exch 28.45274 div exch  /N@OE@@23B @GetCenter  28.45274
div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end 1 add angle
sin mul add   28.45274 mul exch 28.45274 mul exch  } false /N@temp@nlputB
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputA
known { /N@temp@nlputA load GetCenter } { 0 0 } ifelse end } false
/N@@@A 10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputB
known { /N@temp@nlputB load GetCenter } { 0 0 } ifelse end } false
/N@@@B 10 {InitPnode } /NodeScale {} def NewNode end  end
 -600
1762 a -600 1762 a
tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 -600 1762
a -600 1762 a
tx@Dict begin NAngle  RotBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -600 1762 a -600
1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@23Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@23Rotref
known { /N@OE@@23Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -600 1762 a -600 1762
a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@23Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin tx@NodeDict begin /NodeScale {} def
end [ {@@x0 @@x sub 0} {0 1} @@y0 @@y sub @@y0 @@y add trans {PlainIfc}
@@x 0 eq not { {@@x0 @@x add 0} {0 1} @@y0 @@y sub @@y0 @@y add trans
{PlainIfc} } if [1.5]  false true false (OE@@23) { 28.45274 mul exch
28.45274 mul exch  } NewOptexpComp  end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@23Center
@GetCenter 0.0 0.0 0.  180.  add matrix rotate dtransform VecAdd  28.45274
div exch 28.45274 div exch   end  28.45274 mul exch 28.45274 mul exch
 } false /N@OE@@23Label 10 {InitPnode } /NodeScale {} def NewNode end
 end
 -600
1762 a -600 1762 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  PutEnd  end
 -600 1762
a -600 1762 a
tx@Dict begin RotEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin PutEnd  end
 -600 1762 a @beginspecial
@setspecial
  tx@Dict begin STP newpath end
 
@endspecial -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@23Rotref
@GetCenter 2 copy /N@OE@@23A @GetCenter 0.  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@23TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -600 1762 a -600
1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@23Rotref
@GetCenter 2 copy /N@OE@@23B @GetCenter 0.  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@23TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin  (1) (N) (OE@@23) CorrectDipoleIfc
 end  end
 -600 1762 a -600 1762
a
tx@Dict begin tx@OptexpDict begin  (OE@NCAM) (OE@@23) CompAlias  end
 end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@@x 0.  0.5 mul def /@@y 0.  0.5
mul def  end  end
 -600
1762 a -600 1762 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@1A /N@OE@@1B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -600 1762 a -600 1762 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 1762
a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@1A
known { /N@OE@@1A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@1B known { /N@OE@@1B load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def /dy YB
YA sub def /angle dy dx Atan def XA tx@OptexpDict begin  @@x0 neg @@x
sub  end 1 sub angle cos mul add YA tx@OptexpDict begin  @@x0 neg @@x
sub  end 1 sub angle sin mul add   28.45274 mul exch 28.45274 mul exch
 } false /N@temp@nlputA 10 {InitPnode } /NodeScale {} def NewNode end
 end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@1A
known { /N@OE@@1A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@1B known { /N@OE@@1B load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def /dy YB
YA sub def /angle dy dx Atan def XA tx@OptexpDict begin  @@x0 neg @@x
sub  end 1 add angle cos mul add YA tx@OptexpDict begin  @@x0 neg @@x
sub  end 1 add angle sin mul add   28.45274 mul exch 28.45274 mul exch
 } false /N@temp@nlputB 10 {InitPnode } /NodeScale {} def NewNode end
 end
 -600 1762 a -600
1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputA
known { /N@temp@nlputA load GetCenter } { 0 0 } ifelse end } false
/N@@@A 10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputB
known { /N@temp@nlputB load GetCenter } { 0 0 } ifelse end } false
/N@@@B 10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762
a
tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin NAngle  RotBegin  end
 -600
1762 a -600 1762 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@1Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -600 1762
a -600 1762 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@1Rotref
known { /N@OE@@1Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -600 1762 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray   0. true  tx@OptexpDict begin
@@x neg @@y0 @@y sub end  28.45274 mul exch 28.45274 mul exch   tx@OptexpDict
begin @@x @@y0 @@y add end  28.45274 mul exch 28.45274 mul exch  .5
Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
-600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@1Center
@GetCenter 0.0 0.0 0.  180.  add matrix rotate dtransform VecAdd  28.45274
div exch 28.45274 div exch   end  28.45274 mul exch 28.45274 mul exch
 } false /N@OE@@1Label 10 {InitPnode } /NodeScale {} def NewNode end
 end
 -600 1762 a -600 1762 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -600 1762 a -600
1762 a
tx@Dict begin  PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin RotEnd  end
 -600 1762 a -600 1762
a
tx@Dict begin PutEnd  end
 -600 1762 a @beginspecial @setspecial
  tx@Dict begin STP newpath end
 
@endspecial
-600 1762 a
tx@Dict begin tx@OptexpDict begin  (OE@SRC) (OE@@1) CompAlias  end
 end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -600 1762 a -600
1762 a
tx@Dict begin tx@OptexpDict begin /@@y 1.  0.5 mul def end  end
 -600 1762 a -600 1762 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@2A /N@OE@@2B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -600 1762 a -600 1762
a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin /t 0. def LPut end PutBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin NAngle  RotBegin  end
 -600
1762 a -600 1762 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@2Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -600 1762
a -600 1762 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@2Rotref
known { /N@OE@@2Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -600 1762 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [  0 0.1  2 div  28.45274 mul exch 28.45274
mul exch   0 1.  2 div  28.45274 mul exch 28.45274 mul exch    /Lineto
/lineto load def 0  setlinejoin false Line  gsave 1.6 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [  0 0.1  -2 div  28.45274 mul exch 28.45274
mul exch   0 1.  -2 div  28.45274 mul exch 28.45274 mul exch    /Lineto
/lineto load def 0  setlinejoin false Line  gsave 1.6 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@2Center
@GetCenter 0.0 22.76227 180.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@2Label 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -600
1762 a -600 1762 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  PutEnd  end
 -600 1762
a -600 1762 a
tx@Dict begin RotEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin PutEnd  end
 -600 1762 a -600
1762 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@OE@@2Label known {
/N@OE@@2Label load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 -600 1762 a -659 1791 a Fa(PH)-600 1762 y
tx@Dict begin  PutEnd  end
 -600
1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin  (OE@NPH0) (OE@@2) CompAlias  end
 end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -600 1762
a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@@y 1.  0.5 mul def /@@x 1. 1. 
0.5 mul capHeight   1. 1.  0.5 mul capHeight  add  0.5 mul def  end
 end
 -600 1762 a -600 1762 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@3A /N@OE@@3B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -600 1762 a -600
1762 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin /t 1. def LPut end PutBegin  end
 -600 1762 a -600 1762
a
tx@Dict begin NAngle  RotBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@3Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -600
1762 a -600 1762 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@3Rotref
known { /N@OE@@3Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -600 1762 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  tx@OptexpDict begin   1.
 28.45274 mul 2 div 1.  28.45274 mul leftCurvedIfc   1.  28.45274 mul
2 div 1.  28.45274 mul rightCurvedIfc  @@x 28.45274 mul dup 7 1 roll
sub neg 5 1 roll ArcR sub 5 1 roll ArcL  closepath 1 setlinejoin end
 gsave 0.7 0.7 1  setrgbcolor  1. .setopacityalpha  fill  grestore
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   1  setlinejoin 0  setlinecap
stroke  grestore end


@endspecial -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@3Center
@GetCenter 0.0 28.45274 180.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@3Label 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -600 1762 a -600 1762 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -600
1762 a -600 1762 a
tx@Dict begin  PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin RotEnd  end
 -600 1762
a -600 1762 a
tx@Dict begin PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@OE@@3Label known {
/N@OE@@3Label load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 -600 1762 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray -711 1832 a Fa(50mm)p 0
TeXcolorgray 0 TeXcolorgray -660 1732 a(A)n(C)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray -600 1762 a
tx@Dict begin  PutEnd  end
 -600 1762 a
-600 1762 a
tx@Dict begin tx@OptexpDict begin  (OE@NL0) (OE@@3) CompAlias  end
 end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -600 1762 a -600
1762 a
tx@Dict begin tx@OptexpDict begin /@@y 1.  0.5 mul def  end  end
 -600 1762 a -600 1762 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@4A /N@OE@@4B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -600 1762 a -600 1762
a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin /t 0.4 def LPut end PutBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin NAngle  RotBegin  end
 -600
1762 a -600 1762 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@4Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -600 1762
a -600 1762 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@4Rotref
known { /N@OE@@4Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -600 1762 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [  tx@OptexpDict begin 0 @@y end  28.45274
mul exch 28.45274 mul exch   tx@OptexpDict begin 0 @@y neg end  28.45274
mul exch 28.45274 mul exch    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
-600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@4Center
@GetCenter 0.0 34.1432 180.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@4Label 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -600 1762 a -600 1762 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -600 1762 a -600
1762 a
tx@Dict begin  PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin RotEnd  end
 -600 1762 a -600 1762
a
tx@Dict begin PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@OE@@4Label known {
/N@OE@@4Label load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 -600 1762 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray -785 1882 a Fa(BW)28 b(69nm)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray -729 1782
a(3.745m)p 0 TeXcolorgray 0 TeXcolorgray -701 1683 a(Filter)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-600 1762 a
tx@Dict begin  PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin  (OE@NF0) (OE@@4) CompAlias  end
 end
 -600 1762 a -600
1762 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@@y 1.  0.5 mul def end  end
 -600 1762 a -600 1762
a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@5A /N@OE@@5B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -600 1762 a -600 1762 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin /t 0. def LPut end PutBegin  end
 -600
1762 a -600 1762 a
tx@Dict begin NAngle  RotBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -600 1762
a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@5Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@5Rotref
known { /N@OE@@5Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -600 1762 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [  0 0.1  2 div  28.45274 mul exch 28.45274
mul exch   0 1.  2 div  28.45274 mul exch 28.45274 mul exch    /Lineto
/lineto load def 0  setlinejoin false Line  gsave 1.6 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [  0 0.1  -2 div  28.45274 mul exch 28.45274
mul exch   0 1.  -2 div  28.45274 mul exch 28.45274 mul exch    /Lineto
/lineto load def 0  setlinejoin false Line  gsave 1.6 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
-600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@5Center
@GetCenter 0.0 22.76227 180.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@5Label 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -600 1762 a -600 1762 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -600 1762 a -600
1762 a
tx@Dict begin  PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin RotEnd  end
 -600 1762 a -600 1762
a
tx@Dict begin PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@OE@@5Label known {
/N@OE@@5Label load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 -600 1762 a -691 1791 a Fa(APH)-600
1762 y
tx@Dict begin  PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin  (OE@NPH1) (OE@@5) CompAlias  end
 end
 -600 1762 a -600 1762
a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@@x 0.8  0.5 sqrt mul def  end 
end
 -600 1762 a -600 1762 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@6@A /N@OE@@6@B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -600
1762 a -600 1762 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin /t .5 def LPut end PutBegin  end
 -600 1762
a -600 1762 a
tx@Dict begin NAngle  RotBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin {  0.  neg  0.   28.45274 mul exch 28.45274 mul exch
 } PutCoor PutBegin  end
 -600 1762 a -600
1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@6Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@6Rotref
known { /N@OE@@6Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -600 1762 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  0.8 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [  0.8  2.0 div 2 sqrt mul 0  28.45274 mul exch 28.45274 mul
exch   0.8  2.0 div neg 2 sqrt mul 0  28.45274 mul exch 28.45274 mul
exch    /Lineto /lineto load def 0  setlinejoin false Line  gsave 0.8
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial -600 1762 a
tx@Dict begin  gsave STV CP T /ps@rot 45. def grestore  end
 -600 1762 a -600
1762 a
tx@Dict begin { 0.0 0.0 } PutCoor PutBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin ps@rot  RotBegin  end
 -600 1762 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray   0. true  0.8  2.0 div neg
0.8  2.0 div neg  28.45274 mul exch 28.45274 mul exch   0.8  2.0 div
0.8  2.0 div   28.45274 mul exch 28.45274 mul exch  0 Frame  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial -600 1762 a
tx@Dict begin RotEnd  end
 -600 1762 a -600
1762 a
tx@Dict begin  PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@6Center
@GetCenter 0.0 22.76227 -90.  45.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@6Label 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -600 1762 a -600 1762
a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin RotEnd  end
 -600
1762 a -600 1762 a
tx@Dict begin PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@OE@@6Label known {
/N@OE@@6Label load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 -600 1762
a -652 1791 a Fa(BS)-600 1762 y
tx@Dict begin  PutEnd  end
 -600 1762 a -600 1762
a
tx@Dict begin tx@OptexpDict begin  (OE@NBS1) (OE@@6) CompAlias  end
 end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@@x 1.  0.5 mul def end  end
 -600
1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin 0.15  0.5 mul dup /@@y0 ED /@@y ED
end  end
 -600 1762 a -600 1762 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@7@A /N@OE@@7@B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -600 1762
a -600 1762 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin /t .5 def LPut end PutBegin  end
 -600 1762 a -600
1762 a
tx@Dict begin NAngle  RotBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin {  0.  neg  0.   28.45274 mul exch 28.45274 mul exch
 } PutCoor PutBegin  end
 -600 1762 a -600 1762
a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@7Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@7Rotref
known { /N@OE@@7Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -600 1762 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray   0. true  1.  0.5 mul neg
0.15    28.45274 mul exch 28.45274 mul exch   1.  0.5 mul 0  28.45274
mul exch 28.45274 mul exch  0 Frame  gsave 90 rotate  /clipType { clip
} def 45. rotate 0.4 SLW 0  setgray 1.12 0.0 0.0 LineFill  grestore
end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [  1.  0.5 mul CLW 28.45274 2 mul div
  28.45274 mul exch 28.45274 mul exch   1.  0.5 mul neg CLW 28.45274
2 mul div   28.45274 mul exch 28.45274 mul exch    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 1.6 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -600
1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@7Center
@GetCenter 0.0 22.76227 0.  0.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@7Label 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -600 1762 a -600 1762 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -600 1762 a -600 1762
a
tx@Dict begin  PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin RotEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin PutEnd  end
 -600
1762 a -600 1762 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@OE@@7Label known {
/N@OE@@7Label load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 -600 1762 a -719 1791 a Fa(Mirror)-600
1762 y
tx@Dict begin  PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin  (OE@NM0) (OE@@7) CompAlias  end
 end
 -600 1762 a -600 1762
a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@@x 1.5  0.5 mul def /@@y 0.9  0.5
mul def  end  end
 -600 1762 a -600 1762 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@8A /N@OE@@8B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -600
1762 a -600 1762 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@8A
known { /N@OE@@8A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@8B known { /N@OE@@8B load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def /dy YB
YA sub def /angle dy dx Atan def XA tx@OptexpDict begin  @@x0 neg @@x
sub  end 1 sub angle cos mul add YA tx@OptexpDict begin  @@x0 neg @@x
sub  end 1 sub angle sin mul add   28.45274 mul exch 28.45274 mul exch
 } false /N@temp@nlputA 10 {InitPnode } /NodeScale {} def NewNode end
 end
 -600 1762
a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@8A
known { /N@OE@@8A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@8B known { /N@OE@@8B load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def /dy YB
YA sub def /angle dy dx Atan def XA tx@OptexpDict begin  @@x0 neg @@x
sub  end 1 add angle cos mul add YA tx@OptexpDict begin  @@x0 neg @@x
sub  end 1 add angle sin mul add   28.45274 mul exch 28.45274 mul exch
 } false /N@temp@nlputB 10 {InitPnode } /NodeScale {} def NewNode end
 end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputA
known { /N@temp@nlputA load GetCenter } { 0 0 } ifelse end } false
/N@@@A 10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600
1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputB
known { /N@temp@nlputB load GetCenter } { 0 0 } ifelse end } false
/N@@@B 10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -600 1762 a -600 1762
a
tx@Dict begin  tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin NAngle  RotBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -600
1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@8Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@8Rotref
known { /N@OE@@8Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -600 1762
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray   0. true  tx@OptexpDict begin
@@x neg @@y0 @@y sub end  28.45274 mul exch 28.45274 mul exch   tx@OptexpDict
begin @@x @@y0 @@y add end  28.45274 mul exch 28.45274 mul exch  .5
Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@8Center
@GetCenter 0.0 0.0 0.  180.  add matrix rotate dtransform VecAdd  28.45274
div exch 28.45274 div exch   end  28.45274 mul exch 28.45274 mul exch
 } false /N@OE@@8Label 10 {InitPnode } /NodeScale {} def NewNode end
 end

-600 1762 a -600 1762 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  PutEnd  end
 -600
1762 a -600 1762 a
tx@Dict begin RotEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin PutEnd  end
 -600 1762
a @beginspecial @setspecial
  tx@Dict begin STP newpath end
 
@endspecial -600 1762 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@OE@@8Label known {
/N@OE@@8Label load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end

-600 1762 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-708 1832 a Fa(3.39m)p 0 TeXcolorgray 0 TeXcolorgray
-697 1732 a(Laser)p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-600 1762 a
tx@Dict begin  PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -600 1762 a -600
1762 a
tx@Dict begin tx@OptexpDict begin /@@y 1.  0.5 mul def /@@x 1. 1. 
0.5 mul capHeight   1. 1.  0.5 mul capHeight  add  0.5 mul def  end
 end
 -600 1762 a -600 1762 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@9A /N@OE@@9B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -600 1762 a -600 1762
a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin /t 0.25 def LPut end PutBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin NAngle  RotBegin  end
 -600
1762 a -600 1762 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@9Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -600 1762
a -600 1762 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@9Rotref
known { /N@OE@@9Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -600 1762 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  tx@OptexpDict begin   1.
 28.45274 mul 2 div 1.  28.45274 mul leftCurvedIfc   1.  28.45274 mul
2 div 1.  28.45274 mul rightCurvedIfc  @@x 28.45274 mul dup 7 1 roll
sub neg 5 1 roll ArcR sub 5 1 roll ArcL  closepath 1 setlinejoin end
 gsave 0.7 0.7 1  setrgbcolor  1. .setopacityalpha  fill  grestore
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   1  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
-600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@9Center
@GetCenter 0.0 28.45274 180.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@9Label 10 {InitPnode } /NodeScale {} def NewNode
end  end
 -600 1762 a -600 1762 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -600 1762 a -600
1762 a
tx@Dict begin  PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin RotEnd  end
 -600 1762 a -600 1762
a
tx@Dict begin PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@OE@@9Label known {
/N@OE@@9Label load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 -600 1762 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray -711 1832 a Fa(11mm)p 0
TeXcolorgray 0 TeXcolorgray -654 1732 a(AS)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray -600 1762 a
tx@Dict begin  PutEnd  end
 -600 1762 a
-600 1762 a
tx@Dict begin tx@OptexpDict begin  (OE@NL1) (OE@@9) CompAlias  end
 end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -600 1762 a -600
1762 a
tx@Dict begin tx@OptexpDict begin /@@y 1.  0.5 mul def /@@x 1. 1. 
0.5 mul capHeight   1. 1.  0.5 mul capHeight  add  0.5 mul def  end
 end
 -600 1762 a -600 1762 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@10A /N@OE@@10B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -600 1762 a -600 1762
a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin /t 0.65 def LPut end PutBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin NAngle  RotBegin  end
 -600
1762 a -600 1762 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@10Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -600 1762
a -600 1762 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@10Rotref
known { /N@OE@@10Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -600 1762 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  tx@OptexpDict begin   1.
 28.45274 mul 2 div 1.  28.45274 mul leftCurvedIfc   1.  28.45274 mul
2 div 1.  28.45274 mul rightCurvedIfc  @@x 28.45274 mul dup 7 1 roll
sub neg 5 1 roll ArcR sub 5 1 roll ArcL  closepath 1 setlinejoin end
 gsave 0.7 0.7 1  setrgbcolor  1. .setopacityalpha  fill  grestore
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   1  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
-600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@10Center
@GetCenter 0.0 28.45274 180.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@10Label 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -600 1762 a -600
1762 a
tx@Dict begin  PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin RotEnd  end
 -600 1762 a -600 1762
a
tx@Dict begin PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@OE@@10Label known
{ /N@OE@@10Label load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 -600 1762 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray -731 1832 a Fa(150mm)p
0 TeXcolorgray 0 TeXcolorgray -658 1732 a(PC)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray -600 1762 a
tx@Dict begin  PutEnd  end
 -600 1762 a
-600 1762 a
tx@Dict begin tx@OptexpDict begin  (OE@NL2) (OE@@10) CompAlias  end
 end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -600 1762 a -600
1762 a
tx@Dict begin tx@OptexpDict begin /@@x 0.8  0.5 sqrt mul def  end 
end
 -600 1762 a -600 1762 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@11@A /N@OE@@11@B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -600 1762 a -600 1762
a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin /t .5 def LPut end PutBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin NAngle  RotBegin  end
 -600
1762 a -600 1762 a
tx@Dict begin {  0.  neg  0.   28.45274 mul exch 28.45274 mul exch
 } PutCoor PutBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@11Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -600 1762
a -600 1762 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@11Rotref
known { /N@OE@@11Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -600 1762 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  0.8 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [  0.8  2.0 div 2 sqrt mul 0  28.45274 mul exch 28.45274 mul
exch   0.8  2.0 div neg 2 sqrt mul 0  28.45274 mul exch 28.45274 mul
exch    /Lineto /lineto load def 0  setlinejoin false Line  gsave 0.8
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
-600 1762 a
tx@Dict begin  gsave STV CP T /ps@rot 45. def grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin { 0.0 0.0 } PutCoor PutBegin  end
 -600 1762 a -600
1762 a
tx@Dict begin ps@rot  RotBegin  end
 -600 1762 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray   0. true  0.8  2.0 div neg
0.8  2.0 div neg  28.45274 mul exch 28.45274 mul exch   0.8  2.0 div
0.8  2.0 div   28.45274 mul exch 28.45274 mul exch  0 Frame  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
-600 1762 a
tx@Dict begin RotEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin  PutEnd  end
 -600 1762 a -600
1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@11Center
@GetCenter 0.0 22.76227 0.  45.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@11Label 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -600 1762 a -600 1762
a
tx@Dict begin  PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin RotEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin PutEnd  end
 -600
1762 a -600 1762 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@OE@@11Label known
{ /N@OE@@11Label load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 -600 1762 a -652 1791 a Fa(BS)-600
1762 y
tx@Dict begin  PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin  (OE@NBS2) (OE@@11) CompAlias  end
 end
 -600 1762 a -600 1762
a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@@x 0.8  0.5 sqrt mul def  end 
end
 -600 1762 a -600 1762 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@12@A /N@OE@@12@B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -600
1762 a -600 1762 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin /t .5 def LPut end PutBegin  end
 -600 1762
a -600 1762 a
tx@Dict begin NAngle  RotBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin {  0.  neg  0.   28.45274 mul exch 28.45274 mul exch
 } PutCoor PutBegin  end
 -600 1762 a -600
1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@12Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@12Rotref
known { /N@OE@@12Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -600 1762 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  0.8 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [  0.8  2.0 div 2 sqrt mul 0  28.45274 mul exch 28.45274 mul
exch   0.8  2.0 div neg 2 sqrt mul 0  28.45274 mul exch 28.45274 mul
exch    /Lineto /lineto load def 0  setlinejoin false Line  gsave 0.8
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial -600 1762 a
tx@Dict begin  gsave STV CP T /ps@rot 45. def grestore  end
 -600 1762 a -600
1762 a
tx@Dict begin { 0.0 0.0 } PutCoor PutBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin ps@rot  RotBegin  end
 -600 1762 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray   0. true  0.8  2.0 div neg
0.8  2.0 div neg  28.45274 mul exch 28.45274 mul exch   0.8  2.0 div
0.8  2.0 div   28.45274 mul exch 28.45274 mul exch  0 Frame  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial -600 1762 a
tx@Dict begin RotEnd  end
 -600 1762 a -600
1762 a
tx@Dict begin  PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@12Center
@GetCenter 0.0 22.76227 -90.  45.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@12Label 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -600 1762 a -600 1762
a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin RotEnd  end
 -600
1762 a -600 1762 a
tx@Dict begin PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@OE@@12Label known
{ /N@OE@@12Label load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 -600 1762
a -652 1791 a Fa(BS)-600 1762 y
tx@Dict begin  PutEnd  end
 -600 1762 a -600 1762
a
tx@Dict begin tx@OptexpDict begin  (OE@NBS3) (OE@@12) CompAlias  end
 end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@@x 0.8  0.5 sqrt mul def  end 
end
 -600
1762 a -600 1762 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@13@A /N@OE@@13@B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -600 1762 a -600 1762 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 1762
a -600 1762 a
tx@Dict begin  tx@NodeDict begin /t .5 def LPut end PutBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin NAngle  RotBegin  end
 -600 1762 a -600
1762 a
tx@Dict begin {  0.  neg  0.   28.45274 mul exch 28.45274 mul exch
 } PutCoor PutBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@13Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762
a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@13Rotref
known { /N@OE@@13Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -600 1762 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  0.8 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [  0.8  2.0 div 2 sqrt mul 0  28.45274 mul exch 28.45274 mul
exch   0.8  2.0 div neg 2 sqrt mul 0  28.45274 mul exch 28.45274 mul
exch    /Lineto /lineto load def 0  setlinejoin false Line  gsave 0.8
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
-600 1762 a
tx@Dict begin  gsave STV CP T /ps@rot 45. def grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin { 0.0 0.0 } PutCoor PutBegin  end
 -600 1762 a -600
1762 a
tx@Dict begin ps@rot  RotBegin  end
 -600 1762 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray   0. true  0.8  2.0 div neg
0.8  2.0 div neg  28.45274 mul exch 28.45274 mul exch   0.8  2.0 div
0.8  2.0 div   28.45274 mul exch 28.45274 mul exch  0 Frame  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
-600 1762 a
tx@Dict begin RotEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin  PutEnd  end
 -600 1762 a -600
1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@13Center
@GetCenter 0.0 22.76227 90.  45.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@13Label 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -600 1762 a -600 1762
a
tx@Dict begin  PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin RotEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin PutEnd  end
 -600
1762 a -600 1762 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@OE@@13Label known
{ /N@OE@@13Label load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 -600 1762 a -652 1791 a Fa(BS)-600
1762 y
tx@Dict begin  PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin  (OE@NBS4) (OE@@13) CompAlias  end
 end
 -600 1762 a -600 1762
a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@@x 0.8  0.5 sqrt mul def  end 
end
 -600 1762 a -600 1762 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@14@A /N@OE@@14@B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -600
1762 a -600 1762 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin /t .5 def LPut end PutBegin  end
 -600 1762
a -600 1762 a
tx@Dict begin NAngle  RotBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin {  0.  neg  0.   28.45274 mul exch 28.45274 mul exch
 } PutCoor PutBegin  end
 -600 1762 a -600
1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@14Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@14Rotref
known { /N@OE@@14Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -600 1762 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  0.8 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale 0 CLW
2 div T 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 0 CLW 2 div T 1 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [  0.8  2.0 div 2 sqrt mul 0  28.45274 mul exch 28.45274 mul
exch   0.8  2.0 div neg 2 sqrt mul 0  28.45274 mul exch 28.45274 mul
exch    /Lineto /lineto load def 0  setlinejoin false Line  gsave 0.8
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial -600 1762 a
tx@Dict begin  gsave STV CP T /ps@rot 45. def grestore  end
 -600 1762 a -600
1762 a
tx@Dict begin { 0.0 0.0 } PutCoor PutBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin ps@rot  RotBegin  end
 -600 1762 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray   0. true  0.8  2.0 div neg
0.8  2.0 div neg  28.45274 mul exch 28.45274 mul exch   0.8  2.0 div
0.8  2.0 div   28.45274 mul exch 28.45274 mul exch  0 Frame  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial -600 1762 a
tx@Dict begin RotEnd  end
 -600 1762 a -600
1762 a
tx@Dict begin  PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@14Center
@GetCenter 0.0 22.76227 0.  45.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@14Label 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -600 1762 a -600 1762
a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin RotEnd  end
 -600
1762 a -600 1762 a
tx@Dict begin PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@OE@@14Label known
{ /N@OE@@14Label load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 -600 1762
a -652 1791 a Fa(BS)-600 1762 y
tx@Dict begin  PutEnd  end
 -600 1762 a -600 1762
a
tx@Dict begin tx@OptexpDict begin  (OE@NBS5) (OE@@14) CompAlias  end
 end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@@x 1.  0.5 mul def end  end
 -600
1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin 0.15  0.5 mul dup /@@y0 ED /@@y ED
end  end
 -600 1762 a -600 1762 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@15@A /N@OE@@15@B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -600 1762
a -600 1762 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin /t .5 def LPut end PutBegin  end
 -600 1762 a -600
1762 a
tx@Dict begin NAngle  RotBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin {  0.  neg  0.   28.45274 mul exch 28.45274 mul exch
 } PutCoor PutBegin  end
 -600 1762 a -600 1762
a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@15Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@15Rotref
known { /N@OE@@15Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -600 1762 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray   0. true  1.  0.5 mul neg
0.15    28.45274 mul exch 28.45274 mul exch   1.  0.5 mul 0  28.45274
mul exch 28.45274 mul exch  0 Frame  gsave 90 rotate  /clipType { clip
} def 45. rotate 0.4 SLW 0  setgray 1.12 0.0 0.0 LineFill  grestore
end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [  1.  0.5 mul CLW 28.45274 2 mul div
  28.45274 mul exch 28.45274 mul exch   1.  0.5 mul neg CLW 28.45274
2 mul div   28.45274 mul exch 28.45274 mul exch    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 1.6 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -600
1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@15Center
@GetCenter 0.0 22.76227 0.  0.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@15Label 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -600 1762 a -600 1762
a
tx@Dict begin  PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin RotEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin PutEnd  end
 -600
1762 a -600 1762 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@OE@@15Label known
{ /N@OE@@15Label load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 -600 1762 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -621 1832 a Fa(2)p 0 TeXcolorgray 0 TeXcolorgray
-719 1732 a(Mirror)p 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -600 1762 a
tx@Dict begin  PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin  (OE@NM2) (OE@@15) CompAlias  end
 end
 -600
1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@@x 0.  0.5 mul def /@@y 0.  0.5
mul def  end  end
 -600 1762
a -600 1762 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@16A /N@OE@@16B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -600 1762 a -600 1762 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 1762 a -600
1762 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@16A
known { /N@OE@@16A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@16B known { /N@OE@@16B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA tx@OptexpDict begin  @@x0
neg @@x sub  end 1 sub angle cos mul add YA tx@OptexpDict begin  @@x0
neg @@x sub  end 1 sub angle sin mul add   28.45274 mul exch 28.45274
mul exch  } false /N@temp@nlputA 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@16A
known { /N@OE@@16A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@16B known { /N@OE@@16B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA tx@OptexpDict begin  @@x0
neg @@x sub  end 1 add angle cos mul add YA tx@OptexpDict begin  @@x0
neg @@x sub  end 1 add angle sin mul add   28.45274 mul exch 28.45274
mul exch  } false /N@temp@nlputB 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -600 1762 a -600 1762
a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputA
known { /N@temp@nlputA load GetCenter } { 0 0 } ifelse end } false
/N@@@A 10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputB
known { /N@temp@nlputB load GetCenter } { 0 0 } ifelse end } false
/N@@@B 10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -600
1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin NAngle  RotBegin  end
 -600 1762
a -600 1762 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@16Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600
1762 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@16Rotref
known { /N@OE@@16Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -600 1762 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray   0. true  tx@OptexpDict begin
@@x neg @@y0 @@y sub end  28.45274 mul exch 28.45274 mul exch   tx@OptexpDict
begin @@x @@y0 @@y add end  28.45274 mul exch 28.45274 mul exch  .5
Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
-600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@16Center
@GetCenter 0.0 0.0 0.  180.  add matrix rotate dtransform VecAdd  28.45274
div exch 28.45274 div exch   end  28.45274 mul exch 28.45274 mul exch
 } false /N@OE@@16Label 10 {InitPnode } /NodeScale {} def NewNode end
 end
 -600 1762 a -600 1762 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -600 1762 a -600
1762 a
tx@Dict begin  PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin RotEnd  end
 -600 1762 a -600 1762
a
tx@Dict begin PutEnd  end
 -600 1762 a @beginspecial @setspecial
  tx@Dict begin STP newpath end
 
@endspecial
-600 1762 a
tx@Dict begin tx@OptexpDict begin  (OE@SRC2) (OE@@16) CompAlias  end
 end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -600 1762 a -600
1762 a
tx@Dict begin tx@OptexpDict begin /@@y0 28.45274 def end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin 28.45274 @@y0 div 1.  0.5 mul mul
2.5 div /@@y0 ED  end  end
 -600 1762 a -600 1762
a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@17@A /N@OE@@17@B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -600 1762 a -600 1762 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin /t .5 def LPut end PutBegin  end
 -600
1762 a -600 1762 a
tx@Dict begin NAngle  RotBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin {  0.  neg  0.   28.45274 mul exch 28.45274 mul exch
 } PutCoor PutBegin  end
 -600 1762
a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@17Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@17Rotref
known { /N@OE@@17Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -600 1762 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray   0. true  1.  0.5 mul 4 div
0  28.45274 mul exch 28.45274 mul exch   1.  0.5 mul -4 div 1.  0.5
mul 2.5 div  28.45274 mul exch 28.45274 mul exch  .5 Frame  gsave 0.7
 setgray  1. .setopacityalpha  fill  grestore gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [  1.  0.5 mul 4 div 1.  0.5 mul   28.45274
mul exch 28.45274 mul exch   1.  0.5 mul 2 div 1.  0.5 mul 2 div  28.45274
mul exch 28.45274 mul exch   0 1.  0.5 mul 1.5 div  28.45274 mul exch
28.45274 mul exch   0 1.  0.5 mul 2.5 div  28.45274 mul exch 28.45274
mul exch    false /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse
def BezierNArray n 1 eq { pop pop }{ 2 copy /y0 ED /x0 ED ArrowA n
4 sub 3 idiv { 6 2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll
ArrowB /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul
def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1
sub 3 mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub
cy sub by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add
cx t0 mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul
add y0 add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay
t 3 exp mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos} {ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi
}{ 1. } ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def
/t GetArrowPos def /t0 t 0.95 mul def getValues ArrowInside pop pop
pop pop } repeat x1 y1 x2 y2 x3 y3 curveto } ifelse   gsave 0.8 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [  1.  0.5 mul CLW 28.45274 2 mul div
  28.45274 mul exch 28.45274 mul exch   1.  0.5 mul neg CLW 28.45274
2 mul div   28.45274 mul exch 28.45274 mul exch    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 1.6 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@17Center
@GetCenter 0.0 28.45274 0.  0.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@17Label 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -600
1762 a -600 1762 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  PutEnd  end
 -600 1762
a -600 1762 a
tx@Dict begin RotEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin PutEnd  end
 -600 1762 a -600
1762 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@OE@@17Label known
{ /N@OE@@17Label load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 -600 1762 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-754 1832 a Fa(Mirror)e(3)p 0 TeXcolorgray 0 TeXcolorgray
-796 1732 a(Dela)n(y)h(Line)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -600 1762 a
tx@Dict begin  PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin  (OE@NM3) (OE@@17) CompAlias  end
 end
 -600
1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@@y0 28.45274 def end  end
 -600 1762
a -600 1762 a
tx@Dict begin tx@OptexpDict begin 28.45274 @@y0 div 1.  0.5 mul mul
2.5 div /@@y0 ED  end  end
 -600 1762 a -600 1762 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@18@A /N@OE@@18@B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -600 1762 a -600
1762 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin /t .5 def LPut end PutBegin  end
 -600 1762 a -600 1762
a
tx@Dict begin NAngle  RotBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin {  0.  neg  0.   28.45274 mul exch 28.45274 mul exch
 } PutCoor PutBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@18Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -600
1762 a -600 1762 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@18Rotref
known { /N@OE@@18Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -600 1762 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray   0. true  1.  0.5 mul 4 div
0  28.45274 mul exch 28.45274 mul exch   1.  0.5 mul -4 div 1.  0.5
mul 2.5 div  28.45274 mul exch 28.45274 mul exch  .5 Frame  gsave 0.7
 setgray  1. .setopacityalpha  fill  grestore gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [  1.  0.5 mul 4 div 1.  0.5 mul   28.45274
mul exch 28.45274 mul exch   1.  0.5 mul 2 div 1.  0.5 mul 2 div  28.45274
mul exch 28.45274 mul exch   0 1.  0.5 mul 1.5 div  28.45274 mul exch
28.45274 mul exch   0 1.  0.5 mul 2.5 div  28.45274 mul exch 28.45274
mul exch    false /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse
def BezierNArray n 1 eq { pop pop }{ 2 copy /y0 ED /x0 ED ArrowA n
4 sub 3 idiv { 6 2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll
ArrowB /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul
def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1
sub 3 mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub
cy sub by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add
cx t0 mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul
add y0 add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay
t 3 exp mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos} {ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi
}{ 1. } ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def
/t GetArrowPos def /t0 t 0.95 mul def getValues ArrowInside pop pop
pop pop } repeat x1 y1 x2 y2 x3 y3 curveto } ifelse   gsave 0.8 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [  1.  0.5 mul CLW 28.45274 2 mul div
  28.45274 mul exch 28.45274 mul exch   1.  0.5 mul neg CLW 28.45274
2 mul div   28.45274 mul exch 28.45274 mul exch    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 1.6 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@18Center
@GetCenter 0.0 39.83366 0.  0.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@18Label 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -600 1762 a -600
1762 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  PutEnd  end
 -600 1762 a -600 1762
a
tx@Dict begin RotEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@OE@@18Label known
{ /N@OE@@18Label load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 -600
1762 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray -754
1832 a Fa(Mirror)f(4)p 0 TeXcolorgray 0 TeXcolorgray
-796 1732 a(Dela)n(y)h(Line)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -600 1762 a
tx@Dict begin  PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin  (OE@NM4) (OE@@18) CompAlias  end
 end
 -600
1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@@y0 28.45274 def end  end
 -600 1762
a -600 1762 a
tx@Dict begin tx@OptexpDict begin 28.45274 @@y0 div 1.  0.5 mul mul
2.5 div /@@y0 ED  end  end
 -600 1762 a -600 1762 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@19@A /N@OE@@19@B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -600 1762 a -600
1762 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin /t .5 def LPut end PutBegin  end
 -600 1762 a -600 1762
a
tx@Dict begin NAngle  RotBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin {  0.  neg  0.   28.45274 mul exch 28.45274 mul exch
 } PutCoor PutBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@19Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -600
1762 a -600 1762 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@19Rotref
known { /N@OE@@19Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -600 1762 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray   0. true  1.  0.5 mul 4 div
0  28.45274 mul exch 28.45274 mul exch   1.  0.5 mul -4 div 1.  0.5
mul 2.5 div  28.45274 mul exch 28.45274 mul exch  .5 Frame  gsave 0.7
 setgray  1. .setopacityalpha  fill  grestore gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [  1.  0.5 mul 4 div 1.  0.5 mul   28.45274
mul exch 28.45274 mul exch   1.  0.5 mul 2 div 1.  0.5 mul 2 div  28.45274
mul exch 28.45274 mul exch   0 1.  0.5 mul 1.5 div  28.45274 mul exch
28.45274 mul exch   0 1.  0.5 mul 2.5 div  28.45274 mul exch 28.45274
mul exch    false /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse
def BezierNArray n 1 eq { pop pop }{ 2 copy /y0 ED /x0 ED ArrowA n
4 sub 3 idiv { 6 2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll
ArrowB /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul
def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3 mul cx sub def /by y2 y1
sub 3 mul cy sub def /ax x3 x0 sub cx sub bx sub def /ay y3 y0 sub
cy sub by sub def /getValues { ax t0 3 exp mul bx t0 t0 mul mul add
cx t0 mul add x0 add ay t0 3 exp mul by t0 t0 mul mul add cy t0 mul
add y0 add ax t 3 exp mul bx t t mul mul add cx t mul add x0 add ay
t 3 exp mul by t t mul mul add cy t mul add y0 add } def /getdL { getValues
3 -1 roll sub 3 1 roll sub Pyth } def /CurveLength { /u 0 def /du 0.01
def 0 100 { /t0 u def /u u du add def /t u def getdL add } repeat }
def /GetArrowPos { /ende 0.5  1 gt {ArrowPos} {ArrowPos CurveLength
mul} ifelse def /u 0 def /du 0.01 def /sum 0 def { /t0 u def /u u du
add def /t u def /sum getdL sum add def sum ende gt {exit} if } loop
u } def /ArrowPos 0.  def /loopNo 0.5  1 gt {CurveLength 0.5  div cvi
}{ 1. } ifelse def loopNo cvi { /ArrowPos ArrowPos dArrowPos add def
/t GetArrowPos def /t0 t 0.95 mul def getValues ArrowInside pop pop
pop pop } repeat x1 y1 x2 y2 x3 y3 curveto } ifelse   gsave 0.8 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [  1.  0.5 mul CLW 28.45274 2 mul div
  28.45274 mul exch 28.45274 mul exch   1.  0.5 mul neg CLW 28.45274
2 mul div   28.45274 mul exch 28.45274 mul exch    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 1.6 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@19Center
@GetCenter 0.0 36.98865 90.  0.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@19Label 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -600 1762 a -600
1762 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  PutEnd  end
 -600 1762 a -600 1762
a
tx@Dict begin RotEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@OE@@19Label known
{ /N@OE@@19Label load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 -600
1762 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray -754
1832 a Fa(Mirror)f(1)p 0 TeXcolorgray 0 TeXcolorgray
-796 1732 a(Dela)n(y)h(Line)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -600 1762 a
tx@Dict begin  PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin  (OE@NM1) (OE@@19) CompAlias  end
 end
 -600
1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@@y 1.  0.5 mul def /@@x 1. 1. 
0.5 mul capHeight   1. 1.  0.5 mul capHeight  add  0.5 mul def  end
 end
 -600 1762
a -600 1762 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@20A /N@OE@@20B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -600 1762 a -600 1762 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 1762 a -600
1762 a
tx@Dict begin  tx@NodeDict begin /t 0.9 def LPut end PutBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin NAngle  RotBegin  end
 -600 1762 a -600 1762
a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@20Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@20Rotref
known { /N@OE@@20Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -600
1762 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  tx@OptexpDict begin   1.
 28.45274 mul 2 div 1.  28.45274 mul leftCurvedIfc   1.  28.45274 mul
2 div 1.  28.45274 mul rightCurvedIfc  @@x 28.45274 mul dup 7 1 roll
sub neg 5 1 roll ArcR sub 5 1 roll ArcL  closepath 1 setlinejoin end
 gsave 0.7 0.7 1  setrgbcolor  1. .setopacityalpha  fill  grestore
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   1  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial -600 1762
a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@20Center
@GetCenter 0.0 28.45274 0.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@20Label 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  PutEnd  end
 -600
1762 a -600 1762 a
tx@Dict begin RotEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin PutEnd  end
 -600 1762
a -600 1762 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@OE@@20Label known
{ /N@OE@@20Label load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 -600 1762 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -711 1832 a Fa(50mm)p 0 TeXcolorgray 0
TeXcolorgray -660 1732 a(A)n(C)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -600 1762 a
tx@Dict begin  PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin  (OE@NL3) (OE@@20) CompAlias  end
 end
 -600
1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@@y 1.  0.5 mul def /@@x 1. 1. 
0.5 mul capHeight   1. 1.  0.5 mul capHeight  add  0.5 mul def  end
 end
 -600 1762
a -600 1762 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@21A /N@OE@@21B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -600 1762 a -600 1762 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 1762 a -600
1762 a
tx@Dict begin  tx@NodeDict begin /t 1. def LPut end PutBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin NAngle  RotBegin  end
 -600 1762 a -600 1762
a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@21Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@21Rotref
known { /N@OE@@21Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -600
1762 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  tx@OptexpDict begin   1.
 28.45274 mul 2 div 1.  28.45274 mul leftCurvedIfc   1.  28.45274 mul
2 div 1.  28.45274 mul rightCurvedIfc  @@x 28.45274 mul dup 7 1 roll
sub neg 5 1 roll ArcR sub 5 1 roll ArcL  closepath 1 setlinejoin end
 gsave 0.7 0.7 1  setrgbcolor  1. .setopacityalpha  fill  grestore
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   1  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial -600 1762
a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@21Center
@GetCenter 0.0 28.45274 0.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@21Label 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  PutEnd  end
 -600
1762 a -600 1762 a
tx@Dict begin RotEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin PutEnd  end
 -600 1762
a -600 1762 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@OE@@21Label known
{ /N@OE@@21Label load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 -600 1762 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -711 1832 a Fa(50mm)p 0 TeXcolorgray 0
TeXcolorgray -660 1732 a(A)n(C)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -600 1762 a
tx@Dict begin  PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin  (OE@NL4) (OE@@21) CompAlias  end
 end
 -600
1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@@y 1.  0.5 mul def /@@x 1. 1. 
0.5 mul capHeight   1. 1.  0.5 mul capHeight  add  0.5 mul def  end
 end
 -600 1762
a -600 1762 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@22A /N@OE@@22B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -600 1762 a -600 1762 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 1762 a -600
1762 a
tx@Dict begin  tx@NodeDict begin /t 1. def LPut end PutBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin NAngle  RotBegin  end
 -600 1762 a -600 1762
a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@22Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@22Rotref
known { /N@OE@@22Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -600
1762 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  tx@OptexpDict begin   1.
 28.45274 mul 2 div 1.  28.45274 mul leftCurvedIfc   1.  28.45274 mul
2 div 1.  28.45274 mul rightCurvedIfc  @@x 28.45274 mul dup 7 1 roll
sub neg 5 1 roll ArcR sub 5 1 roll ArcL  closepath 1 setlinejoin end
 gsave 0.7 0.7 1  setrgbcolor  1. .setopacityalpha  fill  grestore
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   1  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial -600 1762
a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@22Center
@GetCenter 0.0 28.45274 0.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@22Label 10 {InitPnode } /NodeScale {} def
NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -600 1762 a -600 1762 a
tx@Dict begin  PutEnd  end
 -600
1762 a -600 1762 a
tx@Dict begin RotEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin PutEnd  end
 -600 1762
a -600 1762 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@OE@@22Label known
{ /N@OE@@22Label load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 -600 1762 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -711 1832 a Fa(50mm)p 0 TeXcolorgray 0
TeXcolorgray -660 1732 a(A)n(C)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -600 1762 a
tx@Dict begin  PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin  (OE@NL5) (OE@@22) CompAlias  end
 end
 -600
1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin /@@x 1.5  0.5 mul def /@@y 0.9  0.5
mul def  end  end
 -600 1762
a -600 1762 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@23A /N@OE@@23B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -600 1762 a -600 1762 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 1762 a -600
1762 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@23A
known { /N@OE@@23A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@23B known { /N@OE@@23B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA tx@OptexpDict begin /N@OE@@23A
@GetCenter  28.45274 div exch 28.45274 div exch  /N@OE@@23B @GetCenter
 28.45274 div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end
1 sub angle cos mul add YA tx@OptexpDict begin /N@OE@@23A @GetCenter
 28.45274 div exch 28.45274 div exch  /N@OE@@23B @GetCenter  28.45274
div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end 1 sub angle
sin mul add   28.45274 mul exch 28.45274 mul exch  } false /N@temp@nlputA
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@NodeDict begin tx@NodeDict /N@OE@@23A
known { /N@OE@@23A load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  /YA ED /XA ED tx@NodeDict begin tx@NodeDict
/N@OE@@23B known { /N@OE@@23B load GetCenter } { 0 0 } ifelse end 
28.45274 div exch 28.45274 div exch  /YB ED /XB ED /dx XB XA sub def
/dy YB YA sub def /angle dy dx Atan def XA tx@OptexpDict begin /N@OE@@23A
@GetCenter  28.45274 div exch 28.45274 div exch  /N@OE@@23B @GetCenter
 28.45274 div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end
1 add angle cos mul add YA tx@OptexpDict begin /N@OE@@23A @GetCenter
 28.45274 div exch 28.45274 div exch  /N@OE@@23B @GetCenter  28.45274
div exch 28.45274 div exch  @ABDist @@x0 @@x add add  end 1 add angle
sin mul add   28.45274 mul exch 28.45274 mul exch  } false /N@temp@nlputB
10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762
a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputA
known { /N@temp@nlputA load GetCenter } { 0 0 } ifelse end } false
/N@@@A 10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@temp@nlputB
known { /N@temp@nlputB load GetCenter } { 0 0 } ifelse end } false
/N@@@B 10 {InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600 1762 a
tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@@@A /N@@@B InitNC { NCCoor
tx@Dict begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED
/x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos
0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def
{/ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit } if
x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside
pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add
def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 -600
1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin NAngle  RotBegin  end
 -600 1762
a -600 1762 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 -600 1762 a -600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@23Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 -600 1762 a -600
1762 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@23Rotref
known { /N@OE@@23Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 -600 1762 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray   0. true  tx@OptexpDict begin
@@x neg @@y0 @@y sub end  28.45274 mul exch 28.45274 mul exch   tx@OptexpDict
begin @@x @@y0 @@y add end  28.45274 mul exch 28.45274 mul exch  .5
Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
-600 1762 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@23Center
@GetCenter 0.0 0.0 0.  180.  add matrix rotate dtransform VecAdd  28.45274
div exch 28.45274 div exch   end  28.45274 mul exch 28.45274 mul exch
 } false /N@OE@@23Label 10 {InitPnode } /NodeScale {} def NewNode end
 end
 -600 1762 a -600 1762 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 -600 1762 a -600
1762 a
tx@Dict begin  PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin RotEnd  end
 -600 1762 a -600 1762
a
tx@Dict begin PutEnd  end
 -600 1762 a @beginspecial @setspecial
  tx@Dict begin STP newpath end
 
@endspecial
-600 1762 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@OE@@23Label known
{ /N@OE@@23Label load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 -600 1762 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -741 1832 a Fa(Camera)p 0 TeXcolorgray
0 TeXcolorgray -646 1732 a(IR)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -600 1762 a
tx@Dict begin  PutEnd  end
 -600 1762 a -600 1762 a
tx@Dict begin tx@OptexpDict begin  (OE@NCAM) (OE@@23) CompAlias  end
 end
 -600
1762 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0 1 0  setrgbcolor  tx@OptexpDict
begin /loadbeampoints 0 def /loadbeam false def /beamangle 0 def /beamdiv
0 def /savebeampoints 1 def /savebeam true def /startinsidecount -1.
 cvi def startinsidecount 0 eq { /beaminsidefirst false def /startinside
false def } { /beaminsidefirst false def /startinside false def } ifelse
/stopinsidecount -1.  cvi def stopinsidecount 0 eq { /beaminsidelast
false def /stopinside false def } { /beaminsidelast false def /stopinside
false def } ifelse /beaminside true def /connectifc false def /beamalign
 relative def /beampathskip 0.  def -1  dup -1 gt { beampathskip add
} if /beampathcount ED /useNA true def /aligntovector false def /beamdiffractionorder
null def /beammode auto def  /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  [ (OE@NCAM) (OE@NL5) (OE@NL4) (OE@NL3) (OE@NBS5)
(OE@NBS4) (OE@NM3) (OE@NBS4) (OE@NBS2) (OE@NBS1) (OE@NF0) (OE@NL0)
(OE@NPH0) (OE@SRC)  counttomark 0 eq not { dup cvn load dup /source
known { /source get { def } forall }{ pop } ifelse } if beamalign firstcomp
eq { dup dup (Center) NodeName tx@NodeDict exch known not { pop /beamalign
relative def } { RelConnAngle@tref exch atan /beamangle exch def /beamalign
absolute def } ifelse } if  {/nbeam {[n] cvx exec} bind def /Warning
/PrintWarning load def } beamangle dup beamdiv 0.5 mul dup 4 -1 roll
add 3 1 roll sub  [  counttomark dup 0 eq { pop 0 0 } { 1 eq { 0 exch
} if } ifelse currentdict /beamwidth known { beamwidth currentdict
/beamwidth undef } { mark 0.01 counttomark 0 eq { 0 } if exch pop }
ifelse 0.5 mul 3 copy add  28.45274 mul exch 28.45274 mul exch   ToVec
5 1 roll sub  28.45274 mul exch 28.45274 mul exch  ] cvx   exch 4 -1
roll 4 2 roll exch  counttomark mark exch 2 add 1 roll gsave /fillBeam
{ gsave 0 1 0  setrgbcolor  0.2 .setopacityalpha  fill  grestore }
def /strokeBeam true false or def [/lastBeamPointTmpLow /lastBeamPointTmpUp
/lastVecTmpLow /lastVecTmpUp] {currentdict exch undef} forall tx@NodeDict
/N@OE@@BeamLow0 known tx@NodeDict /N@OE@@BeamUp0 known loadbeampoints
1 ge and and { /N@OE@@BeamLow0 @GetCenter ToVec /lastBeamPointTmpLow
ED /N@OE@@BeamUp0 @GetCenter ToVec /lastBeamPointTmpUp ED } if loadbeam
currentdict /lastVecLow0 known and currentdict /lastVecUp0 known and
{ /lastVecTmpLow /lastVecLow0 load def /lastVecTmpUp /lastVecUp0 load
def } if TraceAndFillWideBeam grestore pop counttomark 0 gt strokeBeam
and { counttomark dup /cnta ED /cntb ED cnta 6 idiv { cnta 3 roll /cnta
cnta 3 sub def /cntb cntb 3 sub def cntb 3 roll /cntb cntb 3 sub def
} repeat counttomark 2 idiv 1 add mark exch 1 roll gsave /Lineto /lineto
load def 20 dict begin DrawbeamPrepare counttomark 3 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def /arrowminlength
0.2 28.45274 mul def /arrowmaxlength -1 28.45274 mul def /arrowpos
0.5  def /arrowno 1.  cvi def /ArrowPosStart 0.  def /dArrowPosStart
0.5  def counttomark 3 idiv /N exch def () length 0 gt { DrawbeamArrowInside
}{ DrawbeamSimple } ifelse } if cleartomark end 1  setlinejoin 0.8
SLW 0 1 0  setrgbcolor  1. .setopacityalpha   1  setlinejoin 0  setlinecap
stroke  grestore gsave /Lineto /lineto load def 20 dict begin DrawbeamPrepare
counttomark 3 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg
add /arrowlength exch def /arrowminlength 0.2 28.45274 mul def /arrowmaxlength
-1 28.45274 mul def /arrowpos 0.5  def /arrowno 1.  cvi def /ArrowPosStart
0.  def /dArrowPosStart 0.5  def counttomark 3 idiv /N exch def ()
length 0 gt { DrawbeamArrowInside }{ DrawbeamSimple } ifelse } if cleartomark
end 1  setlinejoin 0.8 SLW 0 1 0  setrgbcolor  1. .setopacityalpha
  1  setlinejoin 0  setlinecap stroke  grestore } { pop } ifelse currentdict
/fillBeam known strokeBeam or savebeampoints 1 ge and currentdict /lastBeamPointTmpLow
known and currentdict /lastBeamPointTmpUp known and dup { lastBeamPointTmpLow
/N@OE@@BeamLow1 lastBeamPointTmpUp /N@OE@@BeamUp1 7 -1 roll } if currentdict
/fillBeam known strokeBeam or savebeam and currentdict /lastVecTmpLow
known and currentdict /lastVecTmpUp known and dup { /prevVecLow1 /prevVecUp1
currentdict /prevVecLow known currentdict /prevVecUp known and { prevVecLow
3 -1 roll prevVecUp } { 0 0 3 -1 roll 0 0 } ifelse /lastVecLow1 lastVecTmpLow
/lastVecUp1 lastVecTmpUp 13 -1 roll } if   end  end count /ocount exch
def
 
@endspecial -600 1762
a
tx@Dict begin tx@OptexpDict begin { tx@OptexpDict begin 4 { ToVec def
} repeat end } if { tx@NodeDict begin /NodeScale {} def end @NewNode
@NewNode } if  end  end
 -600 1762 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0 1 0  setrgbcolor  tx@OptexpDict
begin /loadbeampoints 0 def /loadbeam false def /beamangle 0 def /beamdiv
0 def /savebeampoints 1 def /savebeam true def /startinsidecount -1.
 cvi def startinsidecount 0 eq { /beaminsidefirst false def /startinside
false def } { /beaminsidefirst false def /startinside false def } ifelse
/stopinsidecount -1.  cvi def stopinsidecount 0 eq { /beaminsidelast
false def /stopinside false def } { /beaminsidelast false def /stopinside
false def } ifelse /beaminside true def /connectifc false def /beamalign
 relative def /beampathskip 0.  def -1  dup -1 gt { beampathskip add
} if /beampathcount ED /useNA true def /aligntovector false def /beamdiffractionorder
null def /beammode auto def  /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  [ (OE@NCAM) (OE@NL5) (OE@NL4) (OE@NL3) (OE@NBS5)
(OE@NBS4) (OE@NM2) (OE@NBS4) (OE@NBS2) (OE@NBS1) (OE@NF0) (OE@NL0)
(OE@NPH0) (OE@SRC)  counttomark 0 eq not { dup cvn load dup /source
known { /source get { def } forall }{ pop } ifelse } if beamalign firstcomp
eq { dup dup (Center) NodeName tx@NodeDict exch known not { pop /beamalign
relative def } { RelConnAngle@tref exch atan /beamangle exch def /beamalign
absolute def } ifelse } if  {/nbeam {[n] cvx exec} bind def /Warning
/PrintWarning load def } beamangle dup beamdiv 0.5 mul dup 4 -1 roll
add 3 1 roll sub  [  counttomark dup 0 eq { pop 0 0 } { 1 eq { 0 exch
} if } ifelse currentdict /beamwidth known { beamwidth currentdict
/beamwidth undef } { mark 0.01 counttomark 0 eq { 0 } if exch pop }
ifelse 0.5 mul 3 copy add  28.45274 mul exch 28.45274 mul exch   ToVec
5 1 roll sub  28.45274 mul exch 28.45274 mul exch  ] cvx   exch 4 -1
roll 4 2 roll exch  counttomark mark exch 2 add 1 roll gsave /fillBeam
{ gsave 0 1 0  setrgbcolor  0.2 .setopacityalpha  fill  grestore }
def /strokeBeam true false or def [/lastBeamPointTmpLow /lastBeamPointTmpUp
/lastVecTmpLow /lastVecTmpUp] {currentdict exch undef} forall tx@NodeDict
/N@OE@@BeamLow0 known tx@NodeDict /N@OE@@BeamUp0 known loadbeampoints
1 ge and and { /N@OE@@BeamLow0 @GetCenter ToVec /lastBeamPointTmpLow
ED /N@OE@@BeamUp0 @GetCenter ToVec /lastBeamPointTmpUp ED } if loadbeam
currentdict /lastVecLow0 known and currentdict /lastVecUp0 known and
{ /lastVecTmpLow /lastVecLow0 load def /lastVecTmpUp /lastVecUp0 load
def } if TraceAndFillWideBeam grestore pop counttomark 0 gt strokeBeam
and { counttomark dup /cnta ED /cntb ED cnta 6 idiv { cnta 3 roll /cnta
cnta 3 sub def /cntb cntb 3 sub def cntb 3 roll /cntb cntb 3 sub def
} repeat counttomark 2 idiv 1 add mark exch 1 roll gsave /Lineto /lineto
load def 20 dict begin DrawbeamPrepare counttomark 3 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def /arrowminlength
0.2 28.45274 mul def /arrowmaxlength -1 28.45274 mul def /arrowpos
0.5  def /arrowno 1.  cvi def /ArrowPosStart 0.  def /dArrowPosStart
0.5  def counttomark 3 idiv /N exch def () length 0 gt { DrawbeamArrowInside
}{ DrawbeamSimple } ifelse } if cleartomark end 1  setlinejoin 0.8
SLW 0 1 0  setrgbcolor  1. .setopacityalpha   1  setlinejoin 0  setlinecap
stroke  grestore gsave /Lineto /lineto load def 20 dict begin DrawbeamPrepare
counttomark 3 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg
add /arrowlength exch def /arrowminlength 0.2 28.45274 mul def /arrowmaxlength
-1 28.45274 mul def /arrowpos 0.5  def /arrowno 1.  cvi def /ArrowPosStart
0.  def /dArrowPosStart 0.5  def counttomark 3 idiv /N exch def ()
length 0 gt { DrawbeamArrowInside }{ DrawbeamSimple } ifelse } if cleartomark
end 1  setlinejoin 0.8 SLW 0 1 0  setrgbcolor  1. .setopacityalpha
  1  setlinejoin 0  setlinecap stroke  grestore } { pop } ifelse currentdict
/fillBeam known strokeBeam or savebeampoints 1 ge and currentdict /lastBeamPointTmpLow
known and currentdict /lastBeamPointTmpUp known and dup { lastBeamPointTmpLow
/N@OE@@BeamLow1 lastBeamPointTmpUp /N@OE@@BeamUp1 7 -1 roll } if currentdict
/fillBeam known strokeBeam or savebeam and currentdict /lastVecTmpLow
known and currentdict /lastVecTmpUp known and dup { /prevVecLow1 /prevVecUp1
currentdict /prevVecLow known currentdict /prevVecUp known and { prevVecLow
3 -1 roll prevVecUp } { 0 0 3 -1 roll 0 0 } ifelse /lastVecLow1 lastVecTmpLow
/lastVecUp1 lastVecTmpUp 13 -1 roll } if   end  end count /ocount exch
def
 
@endspecial
-600 1762 a
tx@Dict begin tx@OptexpDict begin { tx@OptexpDict begin 4 { ToVec def
} repeat end } if { tx@NodeDict begin /NodeScale {} def end @NewNode
@NewNode } if  end  end
 -600 1762 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0 1 0  setrgbcolor  tx@OptexpDict
begin /loadbeampoints 0 def /loadbeam false def /beamangle 0 def /beamdiv
0 def /savebeampoints 1 def /savebeam true def /startinsidecount -1.
 cvi def startinsidecount 0 eq { /beaminsidefirst false def /startinside
false def } { /beaminsidefirst false def /startinside false def } ifelse
/stopinsidecount -1.  cvi def stopinsidecount 0 eq { /beaminsidelast
false def /stopinside false def } { /beaminsidelast false def /stopinside
false def } ifelse /beaminside true def /connectifc false def /beamalign
 relative def /beampathskip 0.  def -1  dup -1 gt { beampathskip add
} if /beampathcount ED /useNA true def /aligntovector false def /beamdiffractionorder
null def /beammode auto def  /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  [ (OE@NCAM) (OE@NL5) (OE@NL4) (OE@NL3) (OE@NBS5)
(OE@NBS3) (OE@NM4) (OE@NBS3) (OE@NBS2) (OE@NBS1) (OE@NF0) (OE@NL0)
(OE@NPH0) (OE@SRC)  counttomark 0 eq not { dup cvn load dup /source
known { /source get { def } forall }{ pop } ifelse } if beamalign firstcomp
eq { dup dup (Center) NodeName tx@NodeDict exch known not { pop /beamalign
relative def } { RelConnAngle@tref exch atan /beamangle exch def /beamalign
absolute def } ifelse } if  {/nbeam {[n] cvx exec} bind def /Warning
/PrintWarning load def } beamangle dup beamdiv 0.5 mul dup 4 -1 roll
add 3 1 roll sub  [  counttomark dup 0 eq { pop 0 0 } { 1 eq { 0 exch
} if } ifelse currentdict /beamwidth known { beamwidth currentdict
/beamwidth undef } { mark 0.01 counttomark 0 eq { 0 } if exch pop }
ifelse 0.5 mul 3 copy add  28.45274 mul exch 28.45274 mul exch   ToVec
5 1 roll sub  28.45274 mul exch 28.45274 mul exch  ] cvx   exch 4 -1
roll 4 2 roll exch  counttomark mark exch 2 add 1 roll gsave /fillBeam
{ gsave 0 1 0  setrgbcolor  0.2 .setopacityalpha  fill  grestore }
def /strokeBeam true false or def [/lastBeamPointTmpLow /lastBeamPointTmpUp
/lastVecTmpLow /lastVecTmpUp] {currentdict exch undef} forall tx@NodeDict
/N@OE@@BeamLow0 known tx@NodeDict /N@OE@@BeamUp0 known loadbeampoints
1 ge and and { /N@OE@@BeamLow0 @GetCenter ToVec /lastBeamPointTmpLow
ED /N@OE@@BeamUp0 @GetCenter ToVec /lastBeamPointTmpUp ED } if loadbeam
currentdict /lastVecLow0 known and currentdict /lastVecUp0 known and
{ /lastVecTmpLow /lastVecLow0 load def /lastVecTmpUp /lastVecUp0 load
def } if TraceAndFillWideBeam grestore pop counttomark 0 gt strokeBeam
and { counttomark dup /cnta ED /cntb ED cnta 6 idiv { cnta 3 roll /cnta
cnta 3 sub def /cntb cntb 3 sub def cntb 3 roll /cntb cntb 3 sub def
} repeat counttomark 2 idiv 1 add mark exch 1 roll gsave /Lineto /lineto
load def 20 dict begin DrawbeamPrepare counttomark 3 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def /arrowminlength
0.2 28.45274 mul def /arrowmaxlength -1 28.45274 mul def /arrowpos
0.5  def /arrowno 1.  cvi def /ArrowPosStart 0.  def /dArrowPosStart
0.5  def counttomark 3 idiv /N exch def () length 0 gt { DrawbeamArrowInside
}{ DrawbeamSimple } ifelse } if cleartomark end 1  setlinejoin 0.8
SLW 0 1 0  setrgbcolor  1. .setopacityalpha   1  setlinejoin 0  setlinecap
stroke  grestore gsave /Lineto /lineto load def 20 dict begin DrawbeamPrepare
counttomark 3 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg
add /arrowlength exch def /arrowminlength 0.2 28.45274 mul def /arrowmaxlength
-1 28.45274 mul def /arrowpos 0.5  def /arrowno 1.  cvi def /ArrowPosStart
0.  def /dArrowPosStart 0.5  def counttomark 3 idiv /N exch def ()
length 0 gt { DrawbeamArrowInside }{ DrawbeamSimple } ifelse } if cleartomark
end 1  setlinejoin 0.8 SLW 0 1 0  setrgbcolor  1. .setopacityalpha
  1  setlinejoin 0  setlinecap stroke  grestore } { pop } ifelse currentdict
/fillBeam known strokeBeam or savebeampoints 1 ge and currentdict /lastBeamPointTmpLow
known and currentdict /lastBeamPointTmpUp known and dup { lastBeamPointTmpLow
/N@OE@@BeamLow1 lastBeamPointTmpUp /N@OE@@BeamUp1 7 -1 roll } if currentdict
/fillBeam known strokeBeam or savebeam and currentdict /lastVecTmpLow
known and currentdict /lastVecTmpUp known and dup { /prevVecLow1 /prevVecUp1
currentdict /prevVecLow known currentdict /prevVecUp known and { prevVecLow
3 -1 roll prevVecUp } { 0 0 3 -1 roll 0 0 } ifelse /lastVecLow1 lastVecTmpLow
/lastVecUp1 lastVecTmpUp 13 -1 roll } if   end  end count /ocount exch
def
 
@endspecial
-600 1762 a
tx@Dict begin tx@OptexpDict begin { tx@OptexpDict begin 4 { ToVec def
} repeat end } if { tx@NodeDict begin /NodeScale {} def end @NewNode
@NewNode } if  end  end
 -600 1762 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0 1 0  setrgbcolor  tx@OptexpDict
begin /loadbeampoints 0 def /loadbeam false def /beamangle 0 def /beamdiv
0 def /savebeampoints 1 def /savebeam true def /startinsidecount -1.
 cvi def startinsidecount 0 eq { /beaminsidefirst false def /startinside
false def } { /beaminsidefirst false def /startinside false def } ifelse
/stopinsidecount -1.  cvi def stopinsidecount 0 eq { /beaminsidelast
false def /stopinside false def } { /beaminsidelast false def /stopinside
false def } ifelse /beaminside true def /connectifc false def /beamalign
 relative def /beampathskip 0.  def -1  dup -1 gt { beampathskip add
} if /beampathcount ED /useNA true def /aligntovector false def /beamdiffractionorder
null def /beammode auto def  /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  [ (OE@NCAM) (OE@NL5) (OE@NL4) (OE@NL3) (OE@NBS5)
(OE@NBS3) (OE@NM1) (OE@NBS3) (OE@NBS2) (OE@NBS1) (OE@NF0) (OE@NL0)
(OE@NPH0) (OE@SRC)  counttomark 0 eq not { dup cvn load dup /source
known { /source get { def } forall }{ pop } ifelse } if beamalign firstcomp
eq { dup dup (Center) NodeName tx@NodeDict exch known not { pop /beamalign
relative def } { RelConnAngle@tref exch atan /beamangle exch def /beamalign
absolute def } ifelse } if  {/nbeam {[n] cvx exec} bind def /Warning
/PrintWarning load def } beamangle dup beamdiv 0.5 mul dup 4 -1 roll
add 3 1 roll sub  [  counttomark dup 0 eq { pop 0 0 } { 1 eq { 0 exch
} if } ifelse currentdict /beamwidth known { beamwidth currentdict
/beamwidth undef } { mark 0.01 counttomark 0 eq { 0 } if exch pop }
ifelse 0.5 mul 3 copy add  28.45274 mul exch 28.45274 mul exch   ToVec
5 1 roll sub  28.45274 mul exch 28.45274 mul exch  ] cvx   exch 4 -1
roll 4 2 roll exch  counttomark mark exch 2 add 1 roll gsave /fillBeam
{ gsave 0 1 0  setrgbcolor  0.2 .setopacityalpha  fill  grestore }
def /strokeBeam true false or def [/lastBeamPointTmpLow /lastBeamPointTmpUp
/lastVecTmpLow /lastVecTmpUp] {currentdict exch undef} forall tx@NodeDict
/N@OE@@BeamLow0 known tx@NodeDict /N@OE@@BeamUp0 known loadbeampoints
1 ge and and { /N@OE@@BeamLow0 @GetCenter ToVec /lastBeamPointTmpLow
ED /N@OE@@BeamUp0 @GetCenter ToVec /lastBeamPointTmpUp ED } if loadbeam
currentdict /lastVecLow0 known and currentdict /lastVecUp0 known and
{ /lastVecTmpLow /lastVecLow0 load def /lastVecTmpUp /lastVecUp0 load
def } if TraceAndFillWideBeam grestore pop counttomark 0 gt strokeBeam
and { counttomark dup /cnta ED /cntb ED cnta 6 idiv { cnta 3 roll /cnta
cnta 3 sub def /cntb cntb 3 sub def cntb 3 roll /cntb cntb 3 sub def
} repeat counttomark 2 idiv 1 add mark exch 1 roll gsave /Lineto /lineto
load def 20 dict begin DrawbeamPrepare counttomark 3 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def /arrowminlength
0.2 28.45274 mul def /arrowmaxlength -1 28.45274 mul def /arrowpos
0.5  def /arrowno 1.  cvi def /ArrowPosStart 0.  def /dArrowPosStart
0.5  def counttomark 3 idiv /N exch def () length 0 gt { DrawbeamArrowInside
}{ DrawbeamSimple } ifelse } if cleartomark end 1  setlinejoin 0.8
SLW 0 1 0  setrgbcolor  1. .setopacityalpha   1  setlinejoin 0  setlinecap
stroke  grestore gsave /Lineto /lineto load def 20 dict begin DrawbeamPrepare
counttomark 3 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg
add /arrowlength exch def /arrowminlength 0.2 28.45274 mul def /arrowmaxlength
-1 28.45274 mul def /arrowpos 0.5  def /arrowno 1.  cvi def /ArrowPosStart
0.  def /dArrowPosStart 0.5  def counttomark 3 idiv /N exch def ()
length 0 gt { DrawbeamArrowInside }{ DrawbeamSimple } ifelse } if cleartomark
end 1  setlinejoin 0.8 SLW 0 1 0  setrgbcolor  1. .setopacityalpha
  1  setlinejoin 0  setlinecap stroke  grestore } { pop } ifelse currentdict
/fillBeam known strokeBeam or savebeampoints 1 ge and currentdict /lastBeamPointTmpLow
known and currentdict /lastBeamPointTmpUp known and dup { lastBeamPointTmpLow
/N@OE@@BeamLow1 lastBeamPointTmpUp /N@OE@@BeamUp1 7 -1 roll } if currentdict
/fillBeam known strokeBeam or savebeam and currentdict /lastVecTmpLow
known and currentdict /lastVecTmpUp known and dup { /prevVecLow1 /prevVecUp1
currentdict /prevVecLow known currentdict /prevVecUp known and { prevVecLow
3 -1 roll prevVecUp } { 0 0 3 -1 roll 0 0 } ifelse /lastVecLow1 lastVecTmpLow
/lastVecUp1 lastVecTmpUp 13 -1 roll } if   end  end count /ocount exch
def
 
@endspecial
-600 1762 a
tx@Dict begin tx@OptexpDict begin { tx@OptexpDict begin 4 { ToVec def
} repeat end } if { tx@NodeDict begin /NodeScale {} def end @NewNode
@NewNode } if  end  end
 -600 1762 a 8849 1762 a
tx@Dict begin tx@OptexpDict begin /lastBeamPointUp1 /lastBeamPointLow1
/lastBeamPoint1 3 { currentdict exch undef } repeat /N@OE@@Beam1 /N@OE@@BeamUp1
/N@OE@@BeamLow1 3 { tx@NodeDict exch undef } repeat  end  end
 8849 1762 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
